
sender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d80  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004f08  08004f08  00014f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f60  08004f60  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004f60  08004f60  00014f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f68  08004f68  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f68  08004f68  00014f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f6c  08004f6c  00014f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004f70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000070  08004fe0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08004fe0  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014511  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002575  00000000  00000000  000345b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001218  00000000  00000000  00036b28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f0  00000000  00000000  00037d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000056a3  00000000  00000000  00038e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e3f9  00000000  00000000  0003e4d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00109dbd  00000000  00000000  0004c8cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00156689  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005074  00000000  00000000  00156704  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ef0 	.word	0x08004ef0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08004ef0 	.word	0x08004ef0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <_ZN8RecorderC1EP17TIM_HandleTypeDefP17ADC_HandleTypeDefP17DAC_HandleTypeDef>:
 *      Author: BCAMPAGN
 */

#include <Recorder.hpp>

Recorder::Recorder(TIM_HandleTypeDef *timer, ADC_HandleTypeDef *mic, DAC_HandleTypeDef *speaker){
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
 80004d4:	603b      	str	r3, [r7, #0]
 80004d6:	4a09      	ldr	r2, [pc, #36]	; (80004fc <_ZN8RecorderC1EP17TIM_HandleTypeDefP17ADC_HandleTypeDefP17DAC_HandleTypeDef+0x34>)
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	Timer_ = timer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	68ba      	ldr	r2, [r7, #8]
 80004e0:	605a      	str	r2, [r3, #4]
	Mic_ = mic;
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	609a      	str	r2, [r3, #8]
	Speaker_ = speaker;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	683a      	ldr	r2, [r7, #0]
 80004ec:	60da      	str	r2, [r3, #12]
}
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	4618      	mov	r0, r3
 80004f2:	3714      	adds	r7, #20
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	08004f10 	.word	0x08004f10

08000500 <_ZN8RecorderD1Ev>:

Recorder::~Recorder() {
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	4a04      	ldr	r2, [pc, #16]	; (800051c <_ZN8RecorderD1Ev+0x1c>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4618      	mov	r0, r3
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	08004f10 	.word	0x08004f10

08000520 <_ZN8RecorderD0Ev>:
Recorder::~Recorder() {
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
}
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f7ff ffe9 	bl	8000500 <_ZN8RecorderD1Ev>
 800052e:	2120      	movs	r1, #32
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f004 fb77 	bl	8004c24 <_ZdlPvj>
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4618      	mov	r0, r3
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}

08000540 <_ZN8Recorder4mainEv>:

void Recorder::main(){
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b089      	sub	sp, #36	; 0x24
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	uint32_t timer_val = __HAL_TIM_GET_COUNTER(Timer_);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000550:	61fb      	str	r3, [r7, #28]
	Buffer_ = new uint8_t[SAMPLE_RATE * MAX_RECORD_TIME];
 8000552:	484b      	ldr	r0, [pc, #300]	; (8000680 <_ZN8Recorder4mainEv+0x140>)
 8000554:	f004 fb64 	bl	8004c20 <_Znaj>
 8000558:	4603      	mov	r3, r0
 800055a:	461a      	mov	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	611a      	str	r2, [r3, #16]
	uint8_t tmp = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	73fb      	strb	r3, [r7, #15]
	while(true){
		//record if user button is pressed
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != GPIO_PIN_SET){
 8000564:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000568:	4846      	ldr	r0, [pc, #280]	; (8000684 <_ZN8Recorder4mainEv+0x144>)
 800056a:	f002 fa97 	bl	8002a9c <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	2b01      	cmp	r3, #1
 8000572:	bf14      	ite	ne
 8000574:	2301      	movne	r3, #1
 8000576:	2300      	moveq	r3, #0
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b00      	cmp	r3, #0
 800057c:	d039      	beq.n	80005f2 <_ZN8Recorder4mainEv+0xb2>
			//Record on timer rate 16KHz
			if (__HAL_TIM_GET_COUNTER(Timer_) - timer_val >= 10 && Counter_ < SAMPLE_RATE * MAX_RECORD_TIME){
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000586:	69fb      	ldr	r3, [r7, #28]
 8000588:	1ad3      	subs	r3, r2, r3
 800058a:	2b09      	cmp	r3, #9
 800058c:	d90b      	bls.n	80005a6 <_ZN8Recorder4mainEv+0x66>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8000594:	493c      	ldr	r1, [pc, #240]	; (8000688 <_ZN8Recorder4mainEv+0x148>)
 8000596:	f04f 0200 	mov.w	r2, #0
 800059a:	42a2      	cmp	r2, r4
 800059c:	bf08      	it	eq
 800059e:	4299      	cmpeq	r1, r3
 80005a0:	d301      	bcc.n	80005a6 <_ZN8Recorder4mainEv+0x66>
 80005a2:	2301      	movs	r3, #1
 80005a4:	e000      	b.n	80005a8 <_ZN8Recorder4mainEv+0x68>
 80005a6:	2300      	movs	r3, #0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d0db      	beq.n	8000564 <_ZN8Recorder4mainEv+0x24>
				HAL_ADC_Start(Mic_);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 f855 	bl	8001660 <HAL_ADC_Start>
				tmp = HAL_ADC_GetValue(Mic_);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 f90a 	bl	80017d4 <HAL_ADC_GetValue>
 80005c0:	4603      	mov	r3, r0
 80005c2:	73fb      	strb	r3, [r7, #15]
				Buffer_[Counter_] = tmp;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	691a      	ldr	r2, [r3, #16]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80005ce:	4413      	add	r3, r2
 80005d0:	7bfa      	ldrb	r2, [r7, #15]
 80005d2:	701a      	strb	r2, [r3, #0]
				Counter_++;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 80005da:	1c4b      	adds	r3, r1, #1
 80005dc:	f142 0400 	adc.w	r4, r2, #0
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	e9c2 3406 	strd	r3, r4, [r2, #24]
				timer_val = __HAL_TIM_GET_COUNTER(Timer_);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ee:	61fb      	str	r3, [r7, #28]
 80005f0:	e7b8      	b.n	8000564 <_ZN8Recorder4mainEv+0x24>
			}
		} else if(Counter_ > 0) {
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80005f8:	4323      	orrs	r3, r4
 80005fa:	d0b3      	beq.n	8000564 <_ZN8Recorder4mainEv+0x24>
	 		uint64_t i = 0;
 80005fc:	f04f 0300 	mov.w	r3, #0
 8000600:	f04f 0400 	mov.w	r4, #0
 8000604:	e9c7 3404 	strd	r3, r4, [r7, #16]
			while(i < Counter_){
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800060e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000612:	42a2      	cmp	r2, r4
 8000614:	bf08      	it	eq
 8000616:	4299      	cmpeq	r1, r3
 8000618:	d22a      	bcs.n	8000670 <_ZN8Recorder4mainEv+0x130>
				if (__HAL_TIM_GET_COUNTER(Timer_) - timer_val >= 10 ){
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	2b09      	cmp	r3, #9
 8000628:	bf8c      	ite	hi
 800062a:	2301      	movhi	r3, #1
 800062c:	2300      	movls	r3, #0
 800062e:	b2db      	uxtb	r3, r3
 8000630:	2b00      	cmp	r3, #0
 8000632:	d0e9      	beq.n	8000608 <_ZN8Recorder4mainEv+0xc8>
					HAL_DAC_SetValue(Speaker_, DAC_CHANNEL_1, DAC_ALIGN_8B_R, Buffer_[i]);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	68d8      	ldr	r0, [r3, #12]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	691a      	ldr	r2, [r3, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	4413      	add	r3, r2
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2208      	movs	r2, #8
 8000644:	2100      	movs	r1, #0
 8000646:	f001 ff41 	bl	80024cc <HAL_DAC_SetValue>
					HAL_DAC_Start(Speaker_, DAC_CHANNEL_1);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f001 feee 	bl	8002432 <HAL_DAC_Start>
					i++;
 8000656:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800065a:	1c59      	adds	r1, r3, #1
 800065c:	f144 0200 	adc.w	r2, r4, #0
 8000660:	e9c7 1204 	strd	r1, r2, [r7, #16]
					timer_val = __HAL_TIM_GET_COUNTER(Timer_);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066c:	61fb      	str	r3, [r7, #28]
			while(i < Counter_){
 800066e:	e7cb      	b.n	8000608 <_ZN8Recorder4mainEv+0xc8>
				}
			}
			Counter_ = 0;
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	f04f 0300 	mov.w	r3, #0
 8000676:	f04f 0400 	mov.w	r4, #0
 800067a:	e9c2 3406 	strd	r3, r4, [r2, #24]
		}
	}
 800067e:	e771      	b.n	8000564 <_ZN8Recorder4mainEv+0x24>
 8000680:	00013880 	.word	0x00013880
 8000684:	48000800 	.word	0x48000800
 8000688:	0001387f 	.word	0x0001387f

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f000 fc31 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f81f 	bl	80006d8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f000 f9af 	bl	80009fc <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800069e:	f000 f979 	bl	8000994 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 80006a2:	f000 f8b5 	bl	8000810 <_ZL12MX_ADC1_Initv>
  MX_DAC1_Init();
 80006a6:	f000 f939 	bl	800091c <_ZL12MX_DAC1_Initv>
  MX_TIM16_Init();
 80006aa:	f000 fa0f 	bl	8000acc <_ZL13MX_TIM16_Initv>
  /* USER CODE BEGIN 2 */


  //start timer
  HAL_TIM_Base_Start(&htim16);
 80006ae:	4807      	ldr	r0, [pc, #28]	; (80006cc <main+0x40>)
 80006b0:	f003 fd7a 	bl	80041a8 <HAL_TIM_Base_Start>
  Recorder r(&htim16, &hadc1 ,&hdac1);
 80006b4:	4638      	mov	r0, r7
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <main+0x44>)
 80006b8:	4a06      	ldr	r2, [pc, #24]	; (80006d4 <main+0x48>)
 80006ba:	4904      	ldr	r1, [pc, #16]	; (80006cc <main+0x40>)
 80006bc:	f7ff ff04 	bl	80004c8 <_ZN8RecorderC1EP17TIM_HandleTypeDefP17ADC_HandleTypeDefP17DAC_HandleTypeDef>
  r.main();
 80006c0:	463b      	mov	r3, r7
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff3c 	bl	8000540 <_ZN8Recorder4mainEv>
  //delete[] data;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <main+0x3c>
 80006ca:	bf00      	nop
 80006cc:	20000184 	.word	0x20000184
 80006d0:	200000f0 	.word	0x200000f0
 80006d4:	2000008c 	.word	0x2000008c

080006d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b0b8      	sub	sp, #224	; 0xe0
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006e2:	2244      	movs	r2, #68	; 0x44
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 fafc 	bl	8004ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006fc:	463b      	mov	r3, r7
 80006fe:	2288      	movs	r2, #136	; 0x88
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f004 faee 	bl	8004ce4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000708:	2302      	movs	r3, #2
 800070a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000712:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000716:	2310      	movs	r3, #16
 8000718:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000722:	2302      	movs	r3, #2
 8000724:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000728:	2301      	movs	r3, #1
 800072a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800072e:	230a      	movs	r3, #10
 8000730:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000734:	2307      	movs	r3, #7
 8000736:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800073a:	2302      	movs	r3, #2
 800073c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000740:	2302      	movs	r3, #2
 8000742:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800074a:	4618      	mov	r0, r3
 800074c:	f002 fa3a 	bl	8002bc4 <HAL_RCC_OscConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	bf14      	ite	ne
 8000756:	2301      	movne	r3, #1
 8000758:	2300      	moveq	r3, #0
 800075a:	b2db      	uxtb	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8000760:	f000 f9e0 	bl	8000b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	230f      	movs	r3, #15
 8000766:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076a:	2303      	movs	r3, #3
 800076c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000782:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000786:	2104      	movs	r1, #4
 8000788:	4618      	mov	r0, r3
 800078a:	f002 fe01 	bl	8003390 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	bf14      	ite	ne
 8000794:	2301      	movne	r3, #1
 8000796:	2300      	moveq	r3, #0
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 800079e:	f000 f9c1 	bl	8000b24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80007a2:	f244 0302 	movw	r3, #16386	; 0x4002
 80007a6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80007ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007b0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80007b2:	2302      	movs	r3, #2
 80007b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80007b6:	2301      	movs	r3, #1
 80007b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80007ba:	2308      	movs	r3, #8
 80007bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80007be:	2307      	movs	r3, #7
 80007c0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80007ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007ce:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d0:	463b      	mov	r3, r7
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 ffe0 	bl	8003798 <HAL_RCCEx_PeriphCLKConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	bf14      	ite	ne
 80007de:	2301      	movne	r3, #1
 80007e0:	2300      	moveq	r3, #0
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <_Z18SystemClock_Configv+0x114>
  {
    Error_Handler();
 80007e8:	f000 f99c 	bl	8000b24 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007f0:	f002 f992 	bl	8002b18 <HAL_PWREx_ControlVoltageScaling>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	bf14      	ite	ne
 80007fa:	2301      	movne	r3, #1
 80007fc:	2300      	moveq	r3, #0
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <_Z18SystemClock_Configv+0x130>
  {
    Error_Handler();
 8000804:	f000 f98e 	bl	8000b24 <Error_Handler>
  }
}
 8000808:	bf00      	nop
 800080a:	37e0      	adds	r7, #224	; 0xe0
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
 8000830:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000832:	4b37      	ldr	r3, [pc, #220]	; (8000910 <_ZL12MX_ADC1_Initv+0x100>)
 8000834:	4a37      	ldr	r2, [pc, #220]	; (8000914 <_ZL12MX_ADC1_Initv+0x104>)
 8000836:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000838:	4b35      	ldr	r3, [pc, #212]	; (8000910 <_ZL12MX_ADC1_Initv+0x100>)
 800083a:	2200      	movs	r2, #0
 800083c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B; // 8 bit resolution
 800083e:	4b34      	ldr	r3, [pc, #208]	; (8000910 <_ZL12MX_ADC1_Initv+0x100>)
 8000840:	2210      	movs	r2, #16
 8000842:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000844:	4b32      	ldr	r3, [pc, #200]	; (8000910 <_ZL12MX_ADC1_Initv+0x100>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800084a:	4b31      	ldr	r3, [pc, #196]	; (8000910 <_ZL12MX_ADC1_Initv+0x100>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000850:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <_ZL12MX_ADC1_Initv+0x100>)
 8000852:	2204      	movs	r2, #4
 8000854:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000856:	4b2e      	ldr	r3, [pc, #184]	; (8000910 <_ZL12MX_ADC1_Initv+0x100>)
 8000858:	2200      	movs	r2, #0
 800085a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800085c:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <_ZL12MX_ADC1_Initv+0x100>)
 800085e:	2200      	movs	r2, #0
 8000860:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000862:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <_ZL12MX_ADC1_Initv+0x100>)
 8000864:	2201      	movs	r2, #1
 8000866:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000868:	4b29      	ldr	r3, [pc, #164]	; (8000910 <_ZL12MX_ADC1_Initv+0x100>)
 800086a:	2200      	movs	r2, #0
 800086c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b27      	ldr	r3, [pc, #156]	; (8000910 <_ZL12MX_ADC1_Initv+0x100>)
 8000872:	2200      	movs	r2, #0
 8000874:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b26      	ldr	r3, [pc, #152]	; (8000910 <_ZL12MX_ADC1_Initv+0x100>)
 8000878:	2200      	movs	r2, #0
 800087a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800087c:	4b24      	ldr	r3, [pc, #144]	; (8000910 <_ZL12MX_ADC1_Initv+0x100>)
 800087e:	2200      	movs	r2, #0
 8000880:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000884:	4b22      	ldr	r3, [pc, #136]	; (8000910 <_ZL12MX_ADC1_Initv+0x100>)
 8000886:	2200      	movs	r2, #0
 8000888:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <_ZL12MX_ADC1_Initv+0x100>)
 800088c:	2200      	movs	r2, #0
 800088e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000892:	481f      	ldr	r0, [pc, #124]	; (8000910 <_ZL12MX_ADC1_Initv+0x100>)
 8000894:	f000 fd90 	bl	80013b8 <HAL_ADC_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	bf14      	ite	ne
 800089e:	2301      	movne	r3, #1
 80008a0:	2300      	moveq	r3, #0
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 80008a8:	f000 f93c 	bl	8000b24 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4816      	ldr	r0, [pc, #88]	; (8000910 <_ZL12MX_ADC1_Initv+0x100>)
 80008b8:	f001 fc08 	bl	80020cc <HAL_ADCEx_MultiModeConfigChannel>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	bf14      	ite	ne
 80008c2:	2301      	movne	r3, #1
 80008c4:	2300      	moveq	r3, #0
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 80008cc:	f000 f92a 	bl	8000b24 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <_ZL12MX_ADC1_Initv+0x108>)
 80008d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008d4:	2306      	movs	r3, #6
 80008d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008dc:	237f      	movs	r3, #127	; 0x7f
 80008de:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008e0:	2304      	movs	r3, #4
 80008e2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4619      	mov	r1, r3
 80008ec:	4808      	ldr	r0, [pc, #32]	; (8000910 <_ZL12MX_ADC1_Initv+0x100>)
 80008ee:	f000 ff7f 	bl	80017f0 <HAL_ADC_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	bf14      	ite	ne
 80008f8:	2301      	movne	r3, #1
 80008fa:	2300      	moveq	r3, #0
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 8000902:	f000 f90f 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	; 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000008c 	.word	0x2000008c
 8000914:	50040000 	.word	0x50040000
 8000918:	04300002 	.word	0x04300002

0800091c <_ZL12MX_DAC1_Initv>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2224      	movs	r2, #36	; 0x24
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f004 f9db 	bl	8004ce4 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <_ZL12MX_DAC1_Initv+0x70>)
 8000930:	4a17      	ldr	r2, [pc, #92]	; (8000990 <_ZL12MX_DAC1_Initv+0x74>)
 8000932:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000934:	4815      	ldr	r0, [pc, #84]	; (800098c <_ZL12MX_DAC1_Initv+0x70>)
 8000936:	f001 fd5a 	bl	80023ee <HAL_DAC_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	bf14      	ite	ne
 8000940:	2301      	movne	r3, #1
 8000942:	2300      	moveq	r3, #0
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <_ZL12MX_DAC1_Initv+0x32>
  {
    Error_Handler();
 800094a:	f000 f8eb 	bl	8000b24 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2200      	movs	r2, #0
 8000966:	4619      	mov	r1, r3
 8000968:	4808      	ldr	r0, [pc, #32]	; (800098c <_ZL12MX_DAC1_Initv+0x70>)
 800096a:	f001 fdd4 	bl	8002516 <HAL_DAC_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	bf14      	ite	ne
 8000974:	2301      	movne	r3, #1
 8000976:	2300      	moveq	r3, #0
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <_ZL12MX_DAC1_Initv+0x66>
  {
    Error_Handler();
 800097e:	f000 f8d1 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	3728      	adds	r7, #40	; 0x28
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200000f0 	.word	0x200000f0
 8000990:	40007400 	.word	0x40007400

08000994 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800099a:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <_ZL19MX_USART2_UART_Initv+0x64>)
 800099c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d6:	4807      	ldr	r0, [pc, #28]	; (80009f4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80009d8:	f003 fce8 	bl	80043ac <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	bf14      	ite	ne
 80009e2:	2301      	movne	r3, #1
 80009e4:	2300      	moveq	r3, #0
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80009ec:	f000 f89a 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000104 	.word	0x20000104
 80009f8:	40004400 	.word	0x40004400

080009fc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a2a      	ldr	r2, [pc, #168]	; (8000ac0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b28      	ldr	r3, [pc, #160]	; (8000ac0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2a:	4b25      	ldr	r3, [pc, #148]	; (8000ac0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4a24      	ldr	r2, [pc, #144]	; (8000ac0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4a1e      	ldr	r2, [pc, #120]	; (8000ac0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a18      	ldr	r2, [pc, #96]	; (8000ac0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <_ZL12MX_GPIO_Initv+0xc4>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2120      	movs	r1, #32
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f002 f827 	bl	8002acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <_ZL12MX_GPIO_Initv+0xc8>)
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <_ZL12MX_GPIO_Initv+0xcc>)
 8000a94:	f001 fe5a 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a98:	2320      	movs	r3, #32
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab2:	f001 fe4b 	bl	800274c <HAL_GPIO_Init>

}
 8000ab6:	bf00      	nop
 8000ab8:	3728      	adds	r7, #40	; 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	10210000 	.word	0x10210000
 8000ac8:	48000800 	.word	0x48000800

08000acc <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <_ZL13MX_TIM16_Initv+0x50>)
 8000ad2:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <_ZL13MX_TIM16_Initv+0x54>)
 8000ad4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 500 -1;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <_ZL13MX_TIM16_Initv+0x50>)
 8000ad8:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000adc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <_ZL13MX_TIM16_Initv+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <_ZL13MX_TIM16_Initv+0x50>)
 8000ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aea:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <_ZL13MX_TIM16_Initv+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <_ZL13MX_TIM16_Initv+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <_ZL13MX_TIM16_Initv+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000afe:	4807      	ldr	r0, [pc, #28]	; (8000b1c <_ZL13MX_TIM16_Initv+0x50>)
 8000b00:	f003 fafa 	bl	80040f8 <HAL_TIM_Base_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	bf14      	ite	ne
 8000b0a:	2301      	movne	r3, #1
 8000b0c:	2300      	moveq	r3, #0
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <_ZL13MX_TIM16_Initv+0x4c>
  {
    Error_Handler();
 8000b14:	f000 f806 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000184 	.word	0x20000184
 8000b20:	40014400 	.word	0x40014400

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <Error_Handler+0x6>

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <HAL_MspInit+0x44>)
 8000b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b36:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <HAL_MspInit+0x44>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <HAL_MspInit+0x44>)
 8000b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_MspInit+0x44>)
 8000b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <HAL_MspInit+0x44>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b54:	6593      	str	r3, [r2, #88]	; 0x58
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_MspInit+0x44>)
 8000b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <HAL_ADC_MspInit+0x74>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d123      	bne.n	8000bde <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_ADC_MspInit+0x78>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	4a14      	ldr	r2, [pc, #80]	; (8000bec <HAL_ADC_MspInit+0x78>)
 8000b9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_ADC_MspInit+0x78>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_ADC_MspInit+0x78>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_ADC_MspInit+0x78>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_ADC_MspInit+0x78>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bca:	230b      	movs	r3, #11
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <HAL_ADC_MspInit+0x7c>)
 8000bda:	f001 fdb7 	bl	800274c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	; 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	50040000 	.word	0x50040000
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	48000800 	.word	0x48000800

08000bf4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a15      	ldr	r2, [pc, #84]	; (8000c68 <HAL_DAC_MspInit+0x74>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d124      	bne.n	8000c60 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_DAC_MspInit+0x78>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1a:	4a14      	ldr	r2, [pc, #80]	; (8000c6c <HAL_DAC_MspInit+0x78>)
 8000c1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c20:	6593      	str	r3, [r2, #88]	; 0x58
 8000c22:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_DAC_MspInit+0x78>)
 8000c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <HAL_DAC_MspInit+0x78>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <HAL_DAC_MspInit+0x78>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <HAL_DAC_MspInit+0x78>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c46:	2310      	movs	r3, #16
 8000c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f001 fd76 	bl	800274c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000c60:	bf00      	nop
 8000c62:	3728      	adds	r7, #40	; 0x28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40007400 	.word	0x40007400
 8000c6c:	40021000 	.word	0x40021000

08000c70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <HAL_TIM_Base_MspInit+0x38>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d10b      	bne.n	8000c9a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <HAL_TIM_Base_MspInit+0x3c>)
 8000c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c86:	4a09      	ldr	r2, [pc, #36]	; (8000cac <HAL_TIM_Base_MspInit+0x3c>)
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <HAL_TIM_Base_MspInit+0x3c>)
 8000c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000c9a:	bf00      	nop
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40014400 	.word	0x40014400
 8000cac:	40021000 	.word	0x40021000

08000cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <HAL_UART_MspInit+0x7c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d128      	bne.n	8000d24 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd2:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <HAL_UART_MspInit+0x80>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd6:	4a16      	ldr	r2, [pc, #88]	; (8000d30 <HAL_UART_MspInit+0x80>)
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <HAL_UART_MspInit+0x80>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_UART_MspInit+0x80>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	4a10      	ldr	r2, [pc, #64]	; (8000d30 <HAL_UART_MspInit+0x80>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <HAL_UART_MspInit+0x80>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d02:	230c      	movs	r3, #12
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d12:	2307      	movs	r3, #7
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f001 fd14 	bl	800274c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d24:	bf00      	nop
 8000d26:	3728      	adds	r7, #40	; 0x28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40004400 	.word	0x40004400
 8000d30:	40021000 	.word	0x40021000

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <MemManage_Handler+0x4>

08000d46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d80:	f000 f916 	bl	8000fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
	return 1;
 8000d8c:	2301      	movs	r3, #1
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <_kill>:

int _kill(int pid, int sig)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000da2:	f003 ff65 	bl	8004c70 <__errno>
 8000da6:	4602      	mov	r2, r0
 8000da8:	2316      	movs	r3, #22
 8000daa:	6013      	str	r3, [r2, #0]
	return -1;
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <_exit>:

void _exit (int status)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ffe7 	bl	8000d98 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000dca:	e7fe      	b.n	8000dca <_exit+0x12>

08000dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd4:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <_sbrk+0x5c>)
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <_sbrk+0x60>)
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <_sbrk+0x64>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <_sbrk+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d207      	bcs.n	8000e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dfc:	f003 ff38 	bl	8004c70 <__errno>
 8000e00:	4602      	mov	r2, r0
 8000e02:	230c      	movs	r3, #12
 8000e04:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	e009      	b.n	8000e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <_sbrk+0x64>)
 8000e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20018000 	.word	0x20018000
 8000e2c:	00000400 	.word	0x00000400
 8000e30:	200001d0 	.word	0x200001d0
 8000e34:	200001e8 	.word	0x200001e8

08000e38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <SystemInit+0x64>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e42:	4a16      	ldr	r2, [pc, #88]	; (8000e9c <SystemInit+0x64>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <SystemInit+0x68>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a13      	ldr	r2, [pc, #76]	; (8000ea0 <SystemInit+0x68>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <SystemInit+0x68>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <SystemInit+0x68>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <SystemInit+0x68>)
 8000e64:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e68:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <SystemInit+0x68>)
 8000e70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e74:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <SystemInit+0x68>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a09      	ldr	r2, [pc, #36]	; (8000ea0 <SystemInit+0x68>)
 8000e7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <SystemInit+0x68>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <SystemInit+0x64>)
 8000e8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000edc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ea8:	f7ff ffc6 	bl	8000e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000eac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000eae:	e003      	b.n	8000eb8 <LoopCopyDataInit>

08000eb0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000eb2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000eb4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000eb6:	3104      	adds	r1, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000eb8:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ebc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ebe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ec0:	d3f6      	bcc.n	8000eb0 <CopyDataInit>
	ldr	r2, =_sbss
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ec4:	e002      	b.n	8000ecc <LoopFillZerobss>

08000ec6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ec6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ec8:	f842 3b04 	str.w	r3, [r2], #4

08000ecc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <LoopForever+0x16>)
	cmp	r2, r3
 8000ece:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ed0:	d3f9      	bcc.n	8000ec6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f003 fed3 	bl	8004c7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ed6:	f7ff fbd9 	bl	800068c <main>

08000eda <LoopForever>:

LoopForever:
    b LoopForever
 8000eda:	e7fe      	b.n	8000eda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000edc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000ee0:	08004f70 	.word	0x08004f70
	ldr	r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ee8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000eec:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000ef0:	200001e8 	.word	0x200001e8

08000ef4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC1_2_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <HAL_Init+0x3c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <HAL_Init+0x3c>)
 8000f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0e:	2003      	movs	r0, #3
 8000f10:	f001 fa3a 	bl	8002388 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f14:	2000      	movs	r0, #0
 8000f16:	f000 f80f 	bl	8000f38 <HAL_InitTick>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d002      	beq.n	8000f26 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	71fb      	strb	r3, [r7, #7]
 8000f24:	e001      	b.n	8000f2a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f26:	f7ff fe01 	bl	8000b2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40022000 	.word	0x40022000

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <HAL_InitTick+0x6c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d023      	beq.n	8000f94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <HAL_InitTick+0x70>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <HAL_InitTick+0x6c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fa37 	bl	80023d6 <HAL_SYSTICK_Config>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10f      	bne.n	8000f8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d809      	bhi.n	8000f88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f001 fa0f 	bl	800239e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f80:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <HAL_InitTick+0x74>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e007      	b.n	8000f98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	e004      	b.n	8000f98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	e001      	b.n	8000f98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000004 	.word	0x20000004

08000fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_IncTick+0x20>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <HAL_IncTick+0x24>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	200001e0 	.word	0x200001e0

08000fd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	; (8000fec <HAL_GetTick+0x14>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	200001e0 	.word	0x200001e0

08000ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff ffee 	bl	8000fd8 <HAL_GetTick>
 8000ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001008:	d005      	beq.n	8001016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_Delay+0x40>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001016:	bf00      	nop
 8001018:	f7ff ffde 	bl	8000fd8 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	429a      	cmp	r2, r3
 8001026:	d8f7      	bhi.n	8001018 <HAL_Delay+0x28>
  {
  }
}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000008 	.word	0x20000008

08001034 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	431a      	orrs	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	609a      	str	r2, [r3, #8]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	609a      	str	r2, [r3, #8]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800109c:	b480      	push	{r7}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3360      	adds	r3, #96	; 0x60
 80010ae:	461a      	mov	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <LL_ADC_SetOffset+0x44>)
 80010be:	4013      	ands	r3, r2
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	430a      	orrs	r2, r1
 80010ca:	4313      	orrs	r3, r2
 80010cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010d4:	bf00      	nop
 80010d6:	371c      	adds	r7, #28
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	03fff000 	.word	0x03fff000

080010e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3360      	adds	r3, #96	; 0x60
 80010f2:	461a      	mov	r2, r3
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001104:	4618      	mov	r0, r3
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	3360      	adds	r3, #96	; 0x60
 8001120:	461a      	mov	r2, r3
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	431a      	orrs	r2, r3
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800113a:	bf00      	nop
 800113c:	371c      	adds	r7, #28
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001146:	b480      	push	{r7}
 8001148:	b087      	sub	sp, #28
 800114a:	af00      	add	r7, sp, #0
 800114c:	60f8      	str	r0, [r7, #12]
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	3330      	adds	r3, #48	; 0x30
 8001156:	461a      	mov	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	0a1b      	lsrs	r3, r3, #8
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	f003 030c 	and.w	r3, r3, #12
 8001162:	4413      	add	r3, r2
 8001164:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	f003 031f 	and.w	r3, r3, #31
 8001170:	211f      	movs	r1, #31
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	401a      	ands	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	0e9b      	lsrs	r3, r3, #26
 800117e:	f003 011f 	and.w	r1, r3, #31
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	f003 031f 	and.w	r3, r3, #31
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	431a      	orrs	r2, r3
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001192:	bf00      	nop
 8001194:	371c      	adds	r7, #28
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800119e:	b480      	push	{r7}
 80011a0:	b087      	sub	sp, #28
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	60f8      	str	r0, [r7, #12]
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	3314      	adds	r3, #20
 80011ae:	461a      	mov	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	0e5b      	lsrs	r3, r3, #25
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	4413      	add	r3, r2
 80011bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	0d1b      	lsrs	r3, r3, #20
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2107      	movs	r1, #7
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	401a      	ands	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	0d1b      	lsrs	r3, r3, #20
 80011d8:	f003 031f 	and.w	r3, r3, #31
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	431a      	orrs	r2, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011e8:	bf00      	nop
 80011ea:	371c      	adds	r7, #28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800120c:	43db      	mvns	r3, r3
 800120e:	401a      	ands	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f003 0318 	and.w	r3, r3, #24
 8001216:	4908      	ldr	r1, [pc, #32]	; (8001238 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001218:	40d9      	lsrs	r1, r3
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	400b      	ands	r3, r1
 800121e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001222:	431a      	orrs	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	0007ffff 	.word	0x0007ffff

0800123c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 031f 	and.w	r3, r3, #31
}
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001268:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	6093      	str	r3, [r2, #8]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800128c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001290:	d101      	bne.n	8001296 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80012b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012e0:	d101      	bne.n	80012e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001304:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001308:	f043 0201 	orr.w	r2, r3, #1
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b01      	cmp	r3, #1
 800132e:	d101      	bne.n	8001334 <LL_ADC_IsEnabled+0x18>
 8001330:	2301      	movs	r3, #1
 8001332:	e000      	b.n	8001336 <LL_ADC_IsEnabled+0x1a>
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001352:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001356:	f043 0204 	orr.w	r2, r3, #4
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	2b04      	cmp	r3, #4
 800137c:	d101      	bne.n	8001382 <LL_ADC_REG_IsConversionOngoing+0x18>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	d101      	bne.n	80013a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e134      	b.n	800163c <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d109      	bne.n	80013f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff fbc7 	bl	8000b74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff3f 	bl	800127c <LL_ADC_IsDeepPowerDownEnabled>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d004      	beq.n	800140e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff25 	bl	8001258 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff5a 	bl	80012cc <LL_ADC_IsInternalRegulatorEnabled>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d113      	bne.n	8001446 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff3e 	bl	80012a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001428:	4b86      	ldr	r3, [pc, #536]	; (8001644 <HAL_ADC_Init+0x28c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	099b      	lsrs	r3, r3, #6
 800142e:	4a86      	ldr	r2, [pc, #536]	; (8001648 <HAL_ADC_Init+0x290>)
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	099b      	lsrs	r3, r3, #6
 8001436:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001438:	e002      	b.n	8001440 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3b01      	subs	r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f9      	bne.n	800143a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ff3e 	bl	80012cc <LL_ADC_IsInternalRegulatorEnabled>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10d      	bne.n	8001472 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145a:	f043 0210 	orr.w	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001466:	f043 0201 	orr.w	r2, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ff77 	bl	800136a <LL_ADC_REG_IsConversionOngoing>
 800147c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	2b00      	cmp	r3, #0
 8001488:	f040 80cf 	bne.w	800162a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	2b00      	cmp	r3, #0
 8001490:	f040 80cb 	bne.w	800162a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001498:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800149c:	f043 0202 	orr.w	r2, r3, #2
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff37 	bl	800131c <LL_ADC_IsEnabled>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d115      	bne.n	80014e0 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014b4:	4865      	ldr	r0, [pc, #404]	; (800164c <HAL_ADC_Init+0x294>)
 80014b6:	f7ff ff31 	bl	800131c <LL_ADC_IsEnabled>
 80014ba:	4604      	mov	r4, r0
 80014bc:	4864      	ldr	r0, [pc, #400]	; (8001650 <HAL_ADC_Init+0x298>)
 80014be:	f7ff ff2d 	bl	800131c <LL_ADC_IsEnabled>
 80014c2:	4603      	mov	r3, r0
 80014c4:	431c      	orrs	r4, r3
 80014c6:	4863      	ldr	r0, [pc, #396]	; (8001654 <HAL_ADC_Init+0x29c>)
 80014c8:	f7ff ff28 	bl	800131c <LL_ADC_IsEnabled>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4323      	orrs	r3, r4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d105      	bne.n	80014e0 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	4619      	mov	r1, r3
 80014da:	485f      	ldr	r0, [pc, #380]	; (8001658 <HAL_ADC_Init+0x2a0>)
 80014dc:	f7ff fdaa 	bl	8001034 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7e5b      	ldrb	r3, [r3, #25]
 80014e4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014ea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80014f0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80014f6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014fe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 3020 	ldrb.w	r3, [r3, #32]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d106      	bne.n	800151c <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	3b01      	subs	r3, #1
 8001514:	045b      	lsls	r3, r3, #17
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001520:	2b00      	cmp	r3, #0
 8001522:	d009      	beq.n	8001538 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001528:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	4b47      	ldr	r3, [pc, #284]	; (800165c <HAL_ADC_Init+0x2a4>)
 8001540:	4013      	ands	r3, r2
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	69b9      	ldr	r1, [r7, #24]
 8001548:	430b      	orrs	r3, r1
 800154a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff0a 	bl	800136a <LL_ADC_REG_IsConversionOngoing>
 8001556:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff17 	bl	8001390 <LL_ADC_INJ_IsConversionOngoing>
 8001562:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d13d      	bne.n	80015e6 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d13a      	bne.n	80015e6 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001574:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800157c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800158c:	f023 0302 	bic.w	r3, r3, #2
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6812      	ldr	r2, [r2, #0]
 8001594:	69b9      	ldr	r1, [r7, #24]
 8001596:	430b      	orrs	r3, r1
 8001598:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d118      	bne.n	80015d6 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80015ae:	f023 0304 	bic.w	r3, r3, #4
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015ba:	4311      	orrs	r1, r2
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80015c0:	4311      	orrs	r1, r2
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80015c6:	430a      	orrs	r2, r1
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0201 	orr.w	r2, r2, #1
 80015d2:	611a      	str	r2, [r3, #16]
 80015d4:	e007      	b.n	80015e6 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0201 	bic.w	r2, r2, #1
 80015e4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d10c      	bne.n	8001608 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f4:	f023 010f 	bic.w	r1, r3, #15
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	1e5a      	subs	r2, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	631a      	str	r2, [r3, #48]	; 0x30
 8001606:	e007      	b.n	8001618 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 020f 	bic.w	r2, r2, #15
 8001616:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161c:	f023 0303 	bic.w	r3, r3, #3
 8001620:	f043 0201 	orr.w	r2, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	655a      	str	r2, [r3, #84]	; 0x54
 8001628:	e007      	b.n	800163a <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162e:	f043 0210 	orr.w	r2, r3, #16
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800163a:	7ffb      	ldrb	r3, [r7, #31]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3724      	adds	r7, #36	; 0x24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd90      	pop	{r4, r7, pc}
 8001644:	20000000 	.word	0x20000000
 8001648:	053e2d63 	.word	0x053e2d63
 800164c:	50040000 	.word	0x50040000
 8001650:	50040100 	.word	0x50040100
 8001654:	50040200 	.word	0x50040200
 8001658:	50040300 	.word	0x50040300
 800165c:	fff0c007 	.word	0xfff0c007

08001660 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001668:	4857      	ldr	r0, [pc, #348]	; (80017c8 <HAL_ADC_Start+0x168>)
 800166a:	f7ff fde7 	bl	800123c <LL_ADC_GetMultimode>
 800166e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff fe78 	bl	800136a <LL_ADC_REG_IsConversionOngoing>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	f040 809c 	bne.w	80017ba <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001688:	2b01      	cmp	r3, #1
 800168a:	d101      	bne.n	8001690 <HAL_ADC_Start+0x30>
 800168c:	2302      	movs	r3, #2
 800168e:	e097      	b.n	80017c0 <HAL_ADC_Start+0x160>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 fc97 	bl	8001fcc <ADC_Enable>
 800169e:	4603      	mov	r3, r0
 80016a0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f040 8083 	bne.w	80017b0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a42      	ldr	r2, [pc, #264]	; (80017cc <HAL_ADC_Start+0x16c>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d002      	beq.n	80016ce <HAL_ADC_Start+0x6e>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	e000      	b.n	80016d0 <HAL_ADC_Start+0x70>
 80016ce:	4b40      	ldr	r3, [pc, #256]	; (80017d0 <HAL_ADC_Start+0x170>)
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6812      	ldr	r2, [r2, #0]
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d002      	beq.n	80016de <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d105      	bne.n	80016ea <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016f6:	d106      	bne.n	8001706 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fc:	f023 0206 	bic.w	r2, r3, #6
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	659a      	str	r2, [r3, #88]	; 0x58
 8001704:	e002      	b.n	800170c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	221c      	movs	r2, #28
 8001712:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a2a      	ldr	r2, [pc, #168]	; (80017cc <HAL_ADC_Start+0x16c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d002      	beq.n	800172c <HAL_ADC_Start+0xcc>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	e000      	b.n	800172e <HAL_ADC_Start+0xce>
 800172c:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <HAL_ADC_Start+0x170>)
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	4293      	cmp	r3, r2
 8001734:	d008      	beq.n	8001748 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	2b05      	cmp	r3, #5
 8001740:	d002      	beq.n	8001748 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	2b09      	cmp	r3, #9
 8001746:	d114      	bne.n	8001772 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d007      	beq.n	8001766 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800175e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fde9 	bl	8001342 <LL_ADC_REG_StartConversion>
 8001770:	e025      	b.n	80017be <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001776:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a12      	ldr	r2, [pc, #72]	; (80017cc <HAL_ADC_Start+0x16c>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d002      	beq.n	800178e <HAL_ADC_Start+0x12e>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	e000      	b.n	8001790 <HAL_ADC_Start+0x130>
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_ADC_Start+0x170>)
 8001790:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00f      	beq.n	80017be <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	655a      	str	r2, [r3, #84]	; 0x54
 80017ae:	e006      	b.n	80017be <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80017b8:	e001      	b.n	80017be <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017ba:	2302      	movs	r3, #2
 80017bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80017be:	7dfb      	ldrb	r3, [r7, #23]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	50040300 	.word	0x50040300
 80017cc:	50040100 	.word	0x50040100
 80017d0:	50040000 	.word	0x50040000

080017d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b0b6      	sub	sp, #216	; 0xd8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <HAL_ADC_ConfigChannel+0x22>
 800180e:	2302      	movs	r3, #2
 8001810:	e3c6      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x7b0>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fda3 	bl	800136a <LL_ADC_REG_IsConversionOngoing>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	f040 83a7 	bne.w	8001f7a <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b05      	cmp	r3, #5
 8001832:	d824      	bhi.n	800187e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	3b02      	subs	r3, #2
 800183a:	2b03      	cmp	r3, #3
 800183c:	d81b      	bhi.n	8001876 <HAL_ADC_ConfigChannel+0x86>
 800183e:	a201      	add	r2, pc, #4	; (adr r2, 8001844 <HAL_ADC_ConfigChannel+0x54>)
 8001840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001844:	08001855 	.word	0x08001855
 8001848:	0800185d 	.word	0x0800185d
 800184c:	08001865 	.word	0x08001865
 8001850:	0800186d 	.word	0x0800186d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	220c      	movs	r2, #12
 8001858:	605a      	str	r2, [r3, #4]
          break;
 800185a:	e011      	b.n	8001880 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	2212      	movs	r2, #18
 8001860:	605a      	str	r2, [r3, #4]
          break;
 8001862:	e00d      	b.n	8001880 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	2218      	movs	r2, #24
 8001868:	605a      	str	r2, [r3, #4]
          break;
 800186a:	e009      	b.n	8001880 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001872:	605a      	str	r2, [r3, #4]
          break;
 8001874:	e004      	b.n	8001880 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	2206      	movs	r2, #6
 800187a:	605a      	str	r2, [r3, #4]
          break;
 800187c:	e000      	b.n	8001880 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800187e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	6859      	ldr	r1, [r3, #4]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	f7ff fc5a 	bl	8001146 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fd67 	bl	800136a <LL_ADC_REG_IsConversionOngoing>
 800189c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fd73 	bl	8001390 <LL_ADC_INJ_IsConversionOngoing>
 80018aa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f040 81a6 	bne.w	8001c04 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f040 81a1 	bne.w	8001c04 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6818      	ldr	r0, [r3, #0]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	6819      	ldr	r1, [r3, #0]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	461a      	mov	r2, r3
 80018d0:	f7ff fc65 	bl	800119e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	695a      	ldr	r2, [r3, #20]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	08db      	lsrs	r3, r3, #3
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d00a      	beq.n	800190c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	6919      	ldr	r1, [r3, #16]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001906:	f7ff fbc9 	bl	800109c <LL_ADC_SetOffset>
 800190a:	e17b      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fbe6 	bl	80010e4 <LL_ADC_GetOffsetChannel>
 8001918:	4603      	mov	r3, r0
 800191a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10a      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x148>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fbdb 	bl	80010e4 <LL_ADC_GetOffsetChannel>
 800192e:	4603      	mov	r3, r0
 8001930:	0e9b      	lsrs	r3, r3, #26
 8001932:	f003 021f 	and.w	r2, r3, #31
 8001936:	e01e      	b.n	8001976 <HAL_ADC_ConfigChannel+0x186>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fbd0 	bl	80010e4 <LL_ADC_GetOffsetChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800194e:	fa93 f3a3 	rbit	r3, r3
 8001952:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001956:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800195a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800195e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001966:	2320      	movs	r3, #32
 8001968:	e004      	b.n	8001974 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800196a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800196e:	fab3 f383 	clz	r3, r3
 8001972:	b2db      	uxtb	r3, r3
 8001974:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800197e:	2b00      	cmp	r3, #0
 8001980:	d105      	bne.n	800198e <HAL_ADC_ConfigChannel+0x19e>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	0e9b      	lsrs	r3, r3, #26
 8001988:	f003 031f 	and.w	r3, r3, #31
 800198c:	e018      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x1d0>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800199a:	fa93 f3a3 	rbit	r3, r3
 800199e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80019a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80019aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80019b2:	2320      	movs	r3, #32
 80019b4:	e004      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80019b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80019ba:	fab3 f383 	clz	r3, r3
 80019be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d106      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2200      	movs	r2, #0
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fb9f 	bl	8001110 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2101      	movs	r1, #1
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fb83 	bl	80010e4 <LL_ADC_GetOffsetChannel>
 80019de:	4603      	mov	r3, r0
 80019e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10a      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x20e>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2101      	movs	r1, #1
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fb78 	bl	80010e4 <LL_ADC_GetOffsetChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	0e9b      	lsrs	r3, r3, #26
 80019f8:	f003 021f 	and.w	r2, r3, #31
 80019fc:	e01e      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x24c>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2101      	movs	r1, #1
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fb6d 	bl	80010e4 <LL_ADC_GetOffsetChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a14:	fa93 f3a3 	rbit	r3, r3
 8001a18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001a1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001a24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001a2c:	2320      	movs	r3, #32
 8001a2e:	e004      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001a30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a34:	fab3 f383 	clz	r3, r3
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d105      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x264>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	0e9b      	lsrs	r3, r3, #26
 8001a4e:	f003 031f 	and.w	r3, r3, #31
 8001a52:	e018      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x296>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a60:	fa93 f3a3 	rbit	r3, r3
 8001a64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001a68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001a70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001a78:	2320      	movs	r3, #32
 8001a7a:	e004      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a80:	fab3 f383 	clz	r3, r3
 8001a84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d106      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2101      	movs	r1, #1
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fb3c 	bl	8001110 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2102      	movs	r1, #2
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fb20 	bl	80010e4 <LL_ADC_GetOffsetChannel>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10a      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x2d4>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fb15 	bl	80010e4 <LL_ADC_GetOffsetChannel>
 8001aba:	4603      	mov	r3, r0
 8001abc:	0e9b      	lsrs	r3, r3, #26
 8001abe:	f003 021f 	and.w	r2, r3, #31
 8001ac2:	e01e      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x312>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2102      	movs	r1, #2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fb0a 	bl	80010e4 <LL_ADC_GetOffsetChannel>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001ae2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ae6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001aea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001af2:	2320      	movs	r3, #32
 8001af4:	e004      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001af6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001afa:	fab3 f383 	clz	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d105      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x32a>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	0e9b      	lsrs	r3, r3, #26
 8001b14:	f003 031f 	and.w	r3, r3, #31
 8001b18:	e016      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x358>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001b2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001b32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	e004      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001b3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d106      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2200      	movs	r2, #0
 8001b52:	2102      	movs	r1, #2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fadb 	bl	8001110 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2103      	movs	r1, #3
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fabf 	bl	80010e4 <LL_ADC_GetOffsetChannel>
 8001b66:	4603      	mov	r3, r0
 8001b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10a      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x396>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2103      	movs	r1, #3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fab4 	bl	80010e4 <LL_ADC_GetOffsetChannel>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	0e9b      	lsrs	r3, r3, #26
 8001b80:	f003 021f 	and.w	r2, r3, #31
 8001b84:	e017      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x3c6>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2103      	movs	r1, #3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff faa9 	bl	80010e4 <LL_ADC_GetOffsetChannel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ba0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001ba8:	2320      	movs	r3, #32
 8001baa:	e003      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001bac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bae:	fab3 f383 	clz	r3, r3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d105      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x3de>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	0e9b      	lsrs	r3, r3, #26
 8001bc8:	f003 031f 	and.w	r3, r3, #31
 8001bcc:	e011      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x402>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bde:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001be6:	2320      	movs	r3, #32
 8001be8:	e003      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bec:	fab3 f383 	clz	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d106      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2103      	movs	r1, #3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fa86 	bl	8001110 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fb87 	bl	800131c <LL_ADC_IsEnabled>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f040 813f 	bne.w	8001e94 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6818      	ldr	r0, [r3, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	6819      	ldr	r1, [r3, #0]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	461a      	mov	r2, r3
 8001c24:	f7ff fae6 	bl	80011f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	4a8e      	ldr	r2, [pc, #568]	; (8001e68 <HAL_ADC_ConfigChannel+0x678>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	f040 8130 	bne.w	8001e94 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10b      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x46c>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	0e9b      	lsrs	r3, r3, #26
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	2b09      	cmp	r3, #9
 8001c52:	bf94      	ite	ls
 8001c54:	2301      	movls	r3, #1
 8001c56:	2300      	movhi	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	e019      	b.n	8001c90 <HAL_ADC_ConfigChannel+0x4a0>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c64:	fa93 f3a3 	rbit	r3, r3
 8001c68:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001c6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c6c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001c74:	2320      	movs	r3, #32
 8001c76:	e003      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001c78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	3301      	adds	r3, #1
 8001c82:	f003 031f 	and.w	r3, r3, #31
 8001c86:	2b09      	cmp	r3, #9
 8001c88:	bf94      	ite	ls
 8001c8a:	2301      	movls	r3, #1
 8001c8c:	2300      	movhi	r3, #0
 8001c8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d079      	beq.n	8001d88 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d107      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x4c0>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0e9b      	lsrs	r3, r3, #26
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	069b      	lsls	r3, r3, #26
 8001caa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cae:	e015      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x4ec>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cb8:	fa93 f3a3 	rbit	r3, r3
 8001cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cc0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001cc8:	2320      	movs	r3, #32
 8001cca:	e003      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cce:	fab3 f383 	clz	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	069b      	lsls	r3, r3, #26
 8001cd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x50c>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	0e9b      	lsrs	r3, r3, #26
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f003 031f 	and.w	r3, r3, #31
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	e017      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x53c>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d0c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001d14:	2320      	movs	r3, #32
 8001d16:	e003      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d1a:	fab3 f383 	clz	r3, r3
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	3301      	adds	r3, #1
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	2101      	movs	r1, #1
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	ea42 0103 	orr.w	r1, r2, r3
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10a      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x562>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	0e9b      	lsrs	r3, r3, #26
 8001d42:	3301      	adds	r3, #1
 8001d44:	f003 021f 	and.w	r2, r3, #31
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	051b      	lsls	r3, r3, #20
 8001d50:	e018      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x594>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001d6a:	2320      	movs	r3, #32
 8001d6c:	e003      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d70:	fab3 f383 	clz	r3, r3
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	3301      	adds	r3, #1
 8001d78:	f003 021f 	and.w	r2, r3, #31
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d84:	430b      	orrs	r3, r1
 8001d86:	e080      	b.n	8001e8a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d107      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x5b4>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	0e9b      	lsrs	r3, r3, #26
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	069b      	lsls	r3, r3, #26
 8001d9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da2:	e015      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x5e0>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001dbc:	2320      	movs	r3, #32
 8001dbe:	e003      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	3301      	adds	r3, #1
 8001dca:	069b      	lsls	r3, r3, #26
 8001dcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x600>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0e9b      	lsrs	r3, r3, #26
 8001de2:	3301      	adds	r3, #1
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	2101      	movs	r1, #1
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	e017      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x630>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	61fb      	str	r3, [r7, #28]
  return result;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001e08:	2320      	movs	r3, #32
 8001e0a:	e003      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	3301      	adds	r3, #1
 8001e16:	f003 031f 	and.w	r3, r3, #31
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	ea42 0103 	orr.w	r1, r2, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10d      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x65c>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0e9b      	lsrs	r3, r3, #26
 8001e36:	3301      	adds	r3, #1
 8001e38:	f003 021f 	and.w	r2, r3, #31
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	3b1e      	subs	r3, #30
 8001e44:	051b      	lsls	r3, r3, #20
 8001e46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	e01d      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x698>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	613b      	str	r3, [r7, #16]
  return result;
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d103      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001e64:	2320      	movs	r3, #32
 8001e66:	e005      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x684>
 8001e68:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	3301      	adds	r3, #1
 8001e76:	f003 021f 	and.w	r2, r3, #31
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	3b1e      	subs	r3, #30
 8001e82:	051b      	lsls	r3, r3, #20
 8001e84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	6892      	ldr	r2, [r2, #8]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f7ff f985 	bl	800119e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b43      	ldr	r3, [pc, #268]	; (8001fa8 <HAL_ADC_ConfigChannel+0x7b8>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d079      	beq.n	8001f94 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ea0:	4842      	ldr	r0, [pc, #264]	; (8001fac <HAL_ADC_ConfigChannel+0x7bc>)
 8001ea2:	f7ff f8ed 	bl	8001080 <LL_ADC_GetCommonPathInternalCh>
 8001ea6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a40      	ldr	r2, [pc, #256]	; (8001fb0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d12b      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001eb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d125      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a3b      	ldr	r2, [pc, #236]	; (8001fb4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d004      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0x6e4>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a3a      	ldr	r2, [pc, #232]	; (8001fb8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d15c      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ed4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ed8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001edc:	4619      	mov	r1, r3
 8001ede:	4833      	ldr	r0, [pc, #204]	; (8001fac <HAL_ADC_ConfigChannel+0x7bc>)
 8001ee0:	f7ff f8bb 	bl	800105a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001ee4:	4b35      	ldr	r3, [pc, #212]	; (8001fbc <HAL_ADC_ConfigChannel+0x7cc>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	099b      	lsrs	r3, r3, #6
 8001eea:	4a35      	ldr	r2, [pc, #212]	; (8001fc0 <HAL_ADC_ConfigChannel+0x7d0>)
 8001eec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef0:	099a      	lsrs	r2, r3, #6
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001efc:	e002      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f9      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f0a:	e040      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a2c      	ldr	r2, [pc, #176]	; (8001fc4 <HAL_ADC_ConfigChannel+0x7d4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d118      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x758>
 8001f16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d112      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a23      	ldr	r2, [pc, #140]	; (8001fb4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d004      	beq.n	8001f36 <HAL_ADC_ConfigChannel+0x746>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a21      	ldr	r2, [pc, #132]	; (8001fb8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d12d      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3e:	4619      	mov	r1, r3
 8001f40:	481a      	ldr	r0, [pc, #104]	; (8001fac <HAL_ADC_ConfigChannel+0x7bc>)
 8001f42:	f7ff f88a 	bl	800105a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f46:	e024      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a1e      	ldr	r2, [pc, #120]	; (8001fc8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d120      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d11a      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a14      	ldr	r2, [pc, #80]	; (8001fb4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d115      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f70:	4619      	mov	r1, r3
 8001f72:	480e      	ldr	r0, [pc, #56]	; (8001fac <HAL_ADC_ConfigChannel+0x7bc>)
 8001f74:	f7ff f871 	bl	800105a <LL_ADC_SetCommonPathInternalCh>
 8001f78:	e00c      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7e:	f043 0220 	orr.w	r2, r3, #32
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001f8c:	e002      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f8e:	bf00      	nop
 8001f90:	e000      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f92:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f9c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	37d8      	adds	r7, #216	; 0xd8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	80080000 	.word	0x80080000
 8001fac:	50040300 	.word	0x50040300
 8001fb0:	c7520000 	.word	0xc7520000
 8001fb4:	50040000 	.word	0x50040000
 8001fb8:	50040200 	.word	0x50040200
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	053e2d63 	.word	0x053e2d63
 8001fc4:	cb840000 	.word	0xcb840000
 8001fc8:	80000001 	.word	0x80000001

08001fcc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff f99f 	bl	800131c <LL_ADC_IsEnabled>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d146      	bne.n	8002072 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	4b24      	ldr	r3, [pc, #144]	; (800207c <ADC_Enable+0xb0>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00d      	beq.n	800200e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff6:	f043 0210 	orr.w	r2, r3, #16
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	f043 0201 	orr.w	r2, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e032      	b.n	8002074 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff f96e 	bl	80012f4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002018:	f7fe ffde 	bl	8000fd8 <HAL_GetTick>
 800201c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800201e:	e021      	b.n	8002064 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff f979 	bl	800131c <LL_ADC_IsEnabled>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d104      	bne.n	800203a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff f95d 	bl	80012f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800203a:	f7fe ffcd 	bl	8000fd8 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d90d      	bls.n	8002064 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204c:	f043 0210 	orr.w	r2, r3, #16
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002058:	f043 0201 	orr.w	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e007      	b.n	8002074 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b01      	cmp	r3, #1
 8002070:	d1d6      	bne.n	8002020 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	8000003f 	.word	0x8000003f

08002080 <LL_ADC_IsEnabled>:
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <LL_ADC_IsEnabled+0x18>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <LL_ADC_IsEnabled+0x1a>
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d101      	bne.n	80020be <LL_ADC_REG_IsConversionOngoing+0x18>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b09f      	sub	sp, #124	; 0x7c
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e08f      	b.n	800220a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a47      	ldr	r2, [pc, #284]	; (8002214 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d102      	bne.n	8002102 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80020fc:	4b46      	ldr	r3, [pc, #280]	; (8002218 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	e001      	b.n	8002106 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10b      	bne.n	8002124 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002110:	f043 0220 	orr.w	r2, r3, #32
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e072      	b.n	800220a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff ffbd 	bl	80020a6 <LL_ADC_REG_IsConversionOngoing>
 800212c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ffb7 	bl	80020a6 <LL_ADC_REG_IsConversionOngoing>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d154      	bne.n	80021e8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800213e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002140:	2b00      	cmp	r3, #0
 8002142:	d151      	bne.n	80021e8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002144:	4b35      	ldr	r3, [pc, #212]	; (800221c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002146:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d02c      	beq.n	80021aa <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002162:	035b      	lsls	r3, r3, #13
 8002164:	430b      	orrs	r3, r1
 8002166:	431a      	orrs	r2, r3
 8002168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800216a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800216c:	4829      	ldr	r0, [pc, #164]	; (8002214 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800216e:	f7ff ff87 	bl	8002080 <LL_ADC_IsEnabled>
 8002172:	4604      	mov	r4, r0
 8002174:	4828      	ldr	r0, [pc, #160]	; (8002218 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002176:	f7ff ff83 	bl	8002080 <LL_ADC_IsEnabled>
 800217a:	4603      	mov	r3, r0
 800217c:	431c      	orrs	r4, r3
 800217e:	4828      	ldr	r0, [pc, #160]	; (8002220 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002180:	f7ff ff7e 	bl	8002080 <LL_ADC_IsEnabled>
 8002184:	4603      	mov	r3, r0
 8002186:	4323      	orrs	r3, r4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d137      	bne.n	80021fc <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800218c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002194:	f023 030f 	bic.w	r3, r3, #15
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	6811      	ldr	r1, [r2, #0]
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	6892      	ldr	r2, [r2, #8]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	431a      	orrs	r2, r3
 80021a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021a6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021a8:	e028      	b.n	80021fc <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80021aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021b4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021b6:	4817      	ldr	r0, [pc, #92]	; (8002214 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80021b8:	f7ff ff62 	bl	8002080 <LL_ADC_IsEnabled>
 80021bc:	4604      	mov	r4, r0
 80021be:	4816      	ldr	r0, [pc, #88]	; (8002218 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80021c0:	f7ff ff5e 	bl	8002080 <LL_ADC_IsEnabled>
 80021c4:	4603      	mov	r3, r0
 80021c6:	431c      	orrs	r4, r3
 80021c8:	4815      	ldr	r0, [pc, #84]	; (8002220 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80021ca:	f7ff ff59 	bl	8002080 <LL_ADC_IsEnabled>
 80021ce:	4603      	mov	r3, r0
 80021d0:	4323      	orrs	r3, r4
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d112      	bne.n	80021fc <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80021d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021de:	f023 030f 	bic.w	r3, r3, #15
 80021e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021e4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021e6:	e009      	b.n	80021fc <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	f043 0220 	orr.w	r2, r3, #32
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80021fa:	e000      	b.n	80021fe <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80021fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002206:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800220a:	4618      	mov	r0, r3
 800220c:	377c      	adds	r7, #124	; 0x7c
 800220e:	46bd      	mov	sp, r7
 8002210:	bd90      	pop	{r4, r7, pc}
 8002212:	bf00      	nop
 8002214:	50040000 	.word	0x50040000
 8002218:	50040100 	.word	0x50040100
 800221c:	50040300 	.word	0x50040300
 8002220:	50040200 	.word	0x50040200

08002224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <__NVIC_SetPriorityGrouping+0x44>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002240:	4013      	ands	r3, r2
 8002242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800224c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002256:	4a04      	ldr	r2, [pc, #16]	; (8002268 <__NVIC_SetPriorityGrouping+0x44>)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	60d3      	str	r3, [r2, #12]
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002270:	4b04      	ldr	r3, [pc, #16]	; (8002284 <__NVIC_GetPriorityGrouping+0x18>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	0a1b      	lsrs	r3, r3, #8
 8002276:	f003 0307 	and.w	r3, r3, #7
}
 800227a:	4618      	mov	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	6039      	str	r1, [r7, #0]
 8002292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002298:	2b00      	cmp	r3, #0
 800229a:	db0a      	blt.n	80022b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	490c      	ldr	r1, [pc, #48]	; (80022d4 <__NVIC_SetPriority+0x4c>)
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	0112      	lsls	r2, r2, #4
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	440b      	add	r3, r1
 80022ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b0:	e00a      	b.n	80022c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4908      	ldr	r1, [pc, #32]	; (80022d8 <__NVIC_SetPriority+0x50>)
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	3b04      	subs	r3, #4
 80022c0:	0112      	lsls	r2, r2, #4
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	440b      	add	r3, r1
 80022c6:	761a      	strb	r2, [r3, #24]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000e100 	.word	0xe000e100
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	; 0x24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f1c3 0307 	rsb	r3, r3, #7
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	bf28      	it	cs
 80022fa:	2304      	movcs	r3, #4
 80022fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3304      	adds	r3, #4
 8002302:	2b06      	cmp	r3, #6
 8002304:	d902      	bls.n	800230c <NVIC_EncodePriority+0x30>
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3b03      	subs	r3, #3
 800230a:	e000      	b.n	800230e <NVIC_EncodePriority+0x32>
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	f04f 32ff 	mov.w	r2, #4294967295
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43da      	mvns	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	401a      	ands	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002324:	f04f 31ff 	mov.w	r1, #4294967295
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	43d9      	mvns	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	4313      	orrs	r3, r2
         );
}
 8002336:	4618      	mov	r0, r3
 8002338:	3724      	adds	r7, #36	; 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3b01      	subs	r3, #1
 8002350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002354:	d301      	bcc.n	800235a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002356:	2301      	movs	r3, #1
 8002358:	e00f      	b.n	800237a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800235a:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <SysTick_Config+0x40>)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002362:	210f      	movs	r1, #15
 8002364:	f04f 30ff 	mov.w	r0, #4294967295
 8002368:	f7ff ff8e 	bl	8002288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <SysTick_Config+0x40>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002372:	4b04      	ldr	r3, [pc, #16]	; (8002384 <SysTick_Config+0x40>)
 8002374:	2207      	movs	r2, #7
 8002376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	e000e010 	.word	0xe000e010

08002388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff ff47 	bl	8002224 <__NVIC_SetPriorityGrouping>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b086      	sub	sp, #24
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	4603      	mov	r3, r0
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
 80023aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023b0:	f7ff ff5c 	bl	800226c <__NVIC_GetPriorityGrouping>
 80023b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	6978      	ldr	r0, [r7, #20]
 80023bc:	f7ff ff8e 	bl	80022dc <NVIC_EncodePriority>
 80023c0:	4602      	mov	r2, r0
 80023c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff5d 	bl	8002288 <__NVIC_SetPriority>
}
 80023ce:	bf00      	nop
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff ffb0 	bl	8002344 <SysTick_Config>
 80023e4:	4603      	mov	r3, r0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e014      	b.n	800242a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	791b      	ldrb	r3, [r3, #4]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d105      	bne.n	8002416 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7fe fbef 	bl	8000bf4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2202      	movs	r2, #2
 800241a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	795b      	ldrb	r3, [r3, #5]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_DAC_Start+0x16>
 8002444:	2302      	movs	r3, #2
 8002446:	e03b      	b.n	80024c0 <HAL_DAC_Start+0x8e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2202      	movs	r2, #2
 8002452:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6819      	ldr	r1, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	2201      	movs	r2, #1
 8002462:	409a      	lsls	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10f      	bne.n	8002492 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800247c:	2b04      	cmp	r3, #4
 800247e:	d118      	bne.n	80024b2 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	e00f      	b.n	80024b2 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800249c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024a0:	d107      	bne.n	80024b2 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f042 0202 	orr.w	r2, r2, #2
 80024b0:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d105      	bne.n	80024f6 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4413      	add	r3, r2
 80024f0:	3308      	adds	r3, #8
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	e004      	b.n	8002500 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4413      	add	r3, r2
 80024fc:	3314      	adds	r3, #20
 80024fe:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	461a      	mov	r2, r3
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	371c      	adds	r7, #28
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b088      	sub	sp, #32
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	795b      	ldrb	r3, [r3, #5]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_DAC_ConfigChannel+0x1c>
 800252e:	2302      	movs	r3, #2
 8002530:	e107      	b.n	8002742 <HAL_DAC_ConfigChannel+0x22c>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2201      	movs	r2, #1
 8002536:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2202      	movs	r2, #2
 800253c:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b04      	cmp	r3, #4
 8002544:	d174      	bne.n	8002630 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002546:	f7fe fd47 	bl	8000fd8 <HAL_GetTick>
 800254a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d134      	bne.n	80025bc <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002552:	e011      	b.n	8002578 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002554:	f7fe fd40 	bl	8000fd8 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d90a      	bls.n	8002578 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f043 0208 	orr.w	r2, r3, #8
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2203      	movs	r2, #3
 8002572:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e0e4      	b.n	8002742 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1e6      	bne.n	8002554 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002586:	2001      	movs	r0, #1
 8002588:	f7fe fd32 	bl	8000ff0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	6992      	ldr	r2, [r2, #24]
 8002594:	641a      	str	r2, [r3, #64]	; 0x40
 8002596:	e01e      	b.n	80025d6 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002598:	f7fe fd1e 	bl	8000fd8 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d90a      	bls.n	80025bc <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f043 0208 	orr.w	r2, r3, #8
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2203      	movs	r2, #3
 80025b6:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e0c2      	b.n	8002742 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	dbe8      	blt.n	8002598 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80025c6:	2001      	movs	r0, #1
 80025c8:	f7fe fd12 	bl	8000ff0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	6992      	ldr	r2, [r2, #24]
 80025d4:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	ea02 0103 	and.w	r1, r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	69da      	ldr	r2, [r3, #28]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f003 0310 	and.w	r3, r3, #16
 80025fa:	409a      	lsls	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	21ff      	movs	r1, #255	; 0xff
 8002612:	fa01 f303 	lsl.w	r3, r1, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	ea02 0103 	and.w	r1, r2, r3
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	6a1a      	ldr	r2, [r3, #32]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	409a      	lsls	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d11d      	bne.n	8002674 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	221f      	movs	r2, #31
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2207      	movs	r2, #7
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	431a      	orrs	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6819      	ldr	r1, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43da      	mvns	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	400a      	ands	r2, r1
 80026d8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	f640 72fc 	movw	r2, #4092	; 0xffc
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6819      	ldr	r1, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	22c0      	movs	r2, #192	; 0xc0
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	43da      	mvns	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	400a      	ands	r2, r1
 8002732:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2201      	movs	r2, #1
 8002738:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3720      	adds	r7, #32
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800275a:	e17f      	b.n	8002a5c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	2101      	movs	r1, #1
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	4013      	ands	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 8171 	beq.w	8002a56 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d00b      	beq.n	8002794 <HAL_GPIO_Init+0x48>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d007      	beq.n	8002794 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002788:	2b11      	cmp	r3, #17
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b12      	cmp	r3, #18
 8002792:	d130      	bne.n	80027f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	2203      	movs	r2, #3
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027ca:	2201      	movs	r2, #1
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4013      	ands	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	091b      	lsrs	r3, r3, #4
 80027e0:	f003 0201 	and.w	r2, r3, #1
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d118      	bne.n	8002834 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002808:	2201      	movs	r2, #1
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4013      	ands	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	08db      	lsrs	r3, r3, #3
 800281e:	f003 0201 	and.w	r2, r3, #1
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	2203      	movs	r2, #3
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x128>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b12      	cmp	r3, #18
 8002872:	d123      	bne.n	80028bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	08da      	lsrs	r2, r3, #3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3208      	adds	r2, #8
 800287c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002880:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	220f      	movs	r2, #15
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4013      	ands	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	08da      	lsrs	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3208      	adds	r2, #8
 80028b6:	6939      	ldr	r1, [r7, #16]
 80028b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0203 	and.w	r2, r3, #3
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80ac 	beq.w	8002a56 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fe:	4b5e      	ldr	r3, [pc, #376]	; (8002a78 <HAL_GPIO_Init+0x32c>)
 8002900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002902:	4a5d      	ldr	r2, [pc, #372]	; (8002a78 <HAL_GPIO_Init+0x32c>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6613      	str	r3, [r2, #96]	; 0x60
 800290a:	4b5b      	ldr	r3, [pc, #364]	; (8002a78 <HAL_GPIO_Init+0x32c>)
 800290c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002916:	4a59      	ldr	r2, [pc, #356]	; (8002a7c <HAL_GPIO_Init+0x330>)
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	089b      	lsrs	r3, r3, #2
 800291c:	3302      	adds	r3, #2
 800291e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002922:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	220f      	movs	r2, #15
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002940:	d025      	beq.n	800298e <HAL_GPIO_Init+0x242>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a4e      	ldr	r2, [pc, #312]	; (8002a80 <HAL_GPIO_Init+0x334>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d01f      	beq.n	800298a <HAL_GPIO_Init+0x23e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a4d      	ldr	r2, [pc, #308]	; (8002a84 <HAL_GPIO_Init+0x338>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d019      	beq.n	8002986 <HAL_GPIO_Init+0x23a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a4c      	ldr	r2, [pc, #304]	; (8002a88 <HAL_GPIO_Init+0x33c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d013      	beq.n	8002982 <HAL_GPIO_Init+0x236>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a4b      	ldr	r2, [pc, #300]	; (8002a8c <HAL_GPIO_Init+0x340>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00d      	beq.n	800297e <HAL_GPIO_Init+0x232>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a4a      	ldr	r2, [pc, #296]	; (8002a90 <HAL_GPIO_Init+0x344>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d007      	beq.n	800297a <HAL_GPIO_Init+0x22e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a49      	ldr	r2, [pc, #292]	; (8002a94 <HAL_GPIO_Init+0x348>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_GPIO_Init+0x22a>
 8002972:	2306      	movs	r3, #6
 8002974:	e00c      	b.n	8002990 <HAL_GPIO_Init+0x244>
 8002976:	2307      	movs	r3, #7
 8002978:	e00a      	b.n	8002990 <HAL_GPIO_Init+0x244>
 800297a:	2305      	movs	r3, #5
 800297c:	e008      	b.n	8002990 <HAL_GPIO_Init+0x244>
 800297e:	2304      	movs	r3, #4
 8002980:	e006      	b.n	8002990 <HAL_GPIO_Init+0x244>
 8002982:	2303      	movs	r3, #3
 8002984:	e004      	b.n	8002990 <HAL_GPIO_Init+0x244>
 8002986:	2302      	movs	r3, #2
 8002988:	e002      	b.n	8002990 <HAL_GPIO_Init+0x244>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <HAL_GPIO_Init+0x244>
 800298e:	2300      	movs	r3, #0
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	f002 0203 	and.w	r2, r2, #3
 8002996:	0092      	lsls	r2, r2, #2
 8002998:	4093      	lsls	r3, r2
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029a0:	4936      	ldr	r1, [pc, #216]	; (8002a7c <HAL_GPIO_Init+0x330>)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	089b      	lsrs	r3, r3, #2
 80029a6:	3302      	adds	r3, #2
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80029ae:	4b3a      	ldr	r3, [pc, #232]	; (8002a98 <HAL_GPIO_Init+0x34c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029d2:	4a31      	ldr	r2, [pc, #196]	; (8002a98 <HAL_GPIO_Init+0x34c>)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80029d8:	4b2f      	ldr	r3, [pc, #188]	; (8002a98 <HAL_GPIO_Init+0x34c>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	43db      	mvns	r3, r3
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029fc:	4a26      	ldr	r2, [pc, #152]	; (8002a98 <HAL_GPIO_Init+0x34c>)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a02:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <HAL_GPIO_Init+0x34c>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a26:	4a1c      	ldr	r2, [pc, #112]	; (8002a98 <HAL_GPIO_Init+0x34c>)
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a2c:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <HAL_GPIO_Init+0x34c>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a50:	4a11      	ldr	r2, [pc, #68]	; (8002a98 <HAL_GPIO_Init+0x34c>)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	fa22 f303 	lsr.w	r3, r2, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f47f ae78 	bne.w	800275c <HAL_GPIO_Init+0x10>
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	371c      	adds	r7, #28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40010000 	.word	0x40010000
 8002a80:	48000400 	.word	0x48000400
 8002a84:	48000800 	.word	0x48000800
 8002a88:	48000c00 	.word	0x48000c00
 8002a8c:	48001000 	.word	0x48001000
 8002a90:	48001400 	.word	0x48001400
 8002a94:	48001800 	.word	0x48001800
 8002a98:	40010400 	.word	0x40010400

08002a9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	887b      	ldrh	r3, [r7, #2]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
 8002ab8:	e001      	b.n	8002abe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aba:	2300      	movs	r3, #0
 8002abc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	807b      	strh	r3, [r7, #2]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002adc:	787b      	ldrb	r3, [r7, #1]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ae2:	887a      	ldrh	r2, [r7, #2]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ae8:	e002      	b.n	8002af0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aea:	887a      	ldrh	r2, [r7, #2]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b00:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	40007000 	.word	0x40007000

08002b18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b26:	d130      	bne.n	8002b8a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b28:	4b23      	ldr	r3, [pc, #140]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b34:	d038      	beq.n	8002ba8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b36:	4b20      	ldr	r3, [pc, #128]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b3e:	4a1e      	ldr	r2, [pc, #120]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b44:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b46:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2232      	movs	r2, #50	; 0x32
 8002b4c:	fb02 f303 	mul.w	r3, r2, r3
 8002b50:	4a1b      	ldr	r2, [pc, #108]	; (8002bc0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b52:	fba2 2303 	umull	r2, r3, r2, r3
 8002b56:	0c9b      	lsrs	r3, r3, #18
 8002b58:	3301      	adds	r3, #1
 8002b5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b5c:	e002      	b.n	8002b64 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b64:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b70:	d102      	bne.n	8002b78 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f2      	bne.n	8002b5e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b78:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b84:	d110      	bne.n	8002ba8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e00f      	b.n	8002baa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b96:	d007      	beq.n	8002ba8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b98:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ba0:	4a05      	ldr	r2, [pc, #20]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ba6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40007000 	.word	0x40007000
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	431bde83 	.word	0x431bde83

08002bc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e3d4      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bd6:	4ba1      	ldr	r3, [pc, #644]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002be0:	4b9e      	ldr	r3, [pc, #632]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 80e4 	beq.w	8002dc0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d007      	beq.n	8002c0e <HAL_RCC_OscConfig+0x4a>
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	2b0c      	cmp	r3, #12
 8002c02:	f040 808b 	bne.w	8002d1c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	f040 8087 	bne.w	8002d1c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c0e:	4b93      	ldr	r3, [pc, #588]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_RCC_OscConfig+0x62>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e3ac      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1a      	ldr	r2, [r3, #32]
 8002c2a:	4b8c      	ldr	r3, [pc, #560]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d004      	beq.n	8002c40 <HAL_RCC_OscConfig+0x7c>
 8002c36:	4b89      	ldr	r3, [pc, #548]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c3e:	e005      	b.n	8002c4c <HAL_RCC_OscConfig+0x88>
 8002c40:	4b86      	ldr	r3, [pc, #536]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c46:	091b      	lsrs	r3, r3, #4
 8002c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d223      	bcs.n	8002c98 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 fd3f 	bl	80036d8 <RCC_SetFlashLatencyFromMSIRange>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e38d      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c64:	4b7d      	ldr	r3, [pc, #500]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a7c      	ldr	r2, [pc, #496]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002c6a:	f043 0308 	orr.w	r3, r3, #8
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	4b7a      	ldr	r3, [pc, #488]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	4977      	ldr	r1, [pc, #476]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c82:	4b76      	ldr	r3, [pc, #472]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	4972      	ldr	r1, [pc, #456]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	604b      	str	r3, [r1, #4]
 8002c96:	e025      	b.n	8002ce4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c98:	4b70      	ldr	r3, [pc, #448]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a6f      	ldr	r2, [pc, #444]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002c9e:	f043 0308 	orr.w	r3, r3, #8
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	4b6d      	ldr	r3, [pc, #436]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	496a      	ldr	r1, [pc, #424]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cb6:	4b69      	ldr	r3, [pc, #420]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	4965      	ldr	r1, [pc, #404]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d109      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 fcff 	bl	80036d8 <RCC_SetFlashLatencyFromMSIRange>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e34d      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ce4:	f000 fc36 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8002ce8:	4601      	mov	r1, r0
 8002cea:	4b5c      	ldr	r3, [pc, #368]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	091b      	lsrs	r3, r3, #4
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	4a5a      	ldr	r2, [pc, #360]	; (8002e60 <HAL_RCC_OscConfig+0x29c>)
 8002cf6:	5cd3      	ldrb	r3, [r2, r3]
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	fa21 f303 	lsr.w	r3, r1, r3
 8002d00:	4a58      	ldr	r2, [pc, #352]	; (8002e64 <HAL_RCC_OscConfig+0x2a0>)
 8002d02:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d04:	4b58      	ldr	r3, [pc, #352]	; (8002e68 <HAL_RCC_OscConfig+0x2a4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fe f915 	bl	8000f38 <HAL_InitTick>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d052      	beq.n	8002dbe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	e331      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d032      	beq.n	8002d8a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d24:	4b4d      	ldr	r3, [pc, #308]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a4c      	ldr	r2, [pc, #304]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d30:	f7fe f952 	bl	8000fd8 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d38:	f7fe f94e 	bl	8000fd8 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e31a      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d4a:	4b44      	ldr	r3, [pc, #272]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d56:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a40      	ldr	r2, [pc, #256]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002d5c:	f043 0308 	orr.w	r3, r3, #8
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	4b3e      	ldr	r3, [pc, #248]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	493b      	ldr	r1, [pc, #236]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d74:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	021b      	lsls	r3, r3, #8
 8002d82:	4936      	ldr	r1, [pc, #216]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
 8002d88:	e01a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d8a:	4b34      	ldr	r3, [pc, #208]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a33      	ldr	r2, [pc, #204]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d96:	f7fe f91f 	bl	8000fd8 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d9e:	f7fe f91b 	bl	8000fd8 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e2e7      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002db0:	4b2a      	ldr	r3, [pc, #168]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f0      	bne.n	8002d9e <HAL_RCC_OscConfig+0x1da>
 8002dbc:	e000      	b.n	8002dc0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dbe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d074      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d005      	beq.n	8002dde <HAL_RCC_OscConfig+0x21a>
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	2b0c      	cmp	r3, #12
 8002dd6:	d10e      	bne.n	8002df6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d10b      	bne.n	8002df6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dde:	4b1f      	ldr	r3, [pc, #124]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d064      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x2f0>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d160      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e2c4      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfe:	d106      	bne.n	8002e0e <HAL_RCC_OscConfig+0x24a>
 8002e00:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a15      	ldr	r2, [pc, #84]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	e01d      	b.n	8002e4a <HAL_RCC_OscConfig+0x286>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e16:	d10c      	bne.n	8002e32 <HAL_RCC_OscConfig+0x26e>
 8002e18:	4b10      	ldr	r3, [pc, #64]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a0f      	ldr	r2, [pc, #60]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002e1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	4b0d      	ldr	r3, [pc, #52]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a0c      	ldr	r2, [pc, #48]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	e00b      	b.n	8002e4a <HAL_RCC_OscConfig+0x286>
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a06      	ldr	r2, [pc, #24]	; (8002e5c <HAL_RCC_OscConfig+0x298>)
 8002e44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e48:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d01c      	beq.n	8002e8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e52:	f7fe f8c1 	bl	8000fd8 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e58:	e011      	b.n	8002e7e <HAL_RCC_OscConfig+0x2ba>
 8002e5a:	bf00      	nop
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	08004f18 	.word	0x08004f18
 8002e64:	20000000 	.word	0x20000000
 8002e68:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7fe f8b4 	bl	8000fd8 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	; 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e280      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e7e:	4baf      	ldr	r3, [pc, #700]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x2a8>
 8002e8a:	e014      	b.n	8002eb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8c:	f7fe f8a4 	bl	8000fd8 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e94:	f7fe f8a0 	bl	8000fd8 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	; 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e26c      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ea6:	4ba5      	ldr	r3, [pc, #660]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x2d0>
 8002eb2:	e000      	b.n	8002eb6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d060      	beq.n	8002f84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x310>
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	2b0c      	cmp	r3, #12
 8002ecc:	d119      	bne.n	8002f02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d116      	bne.n	8002f02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ed4:	4b99      	ldr	r3, [pc, #612]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_OscConfig+0x328>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e249      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eec:	4b93      	ldr	r3, [pc, #588]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	061b      	lsls	r3, r3, #24
 8002efa:	4990      	ldr	r1, [pc, #576]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f00:	e040      	b.n	8002f84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d023      	beq.n	8002f52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f0a:	4b8c      	ldr	r3, [pc, #560]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a8b      	ldr	r2, [pc, #556]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f16:	f7fe f85f 	bl	8000fd8 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f1e:	f7fe f85b 	bl	8000fd8 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e227      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f30:	4b82      	ldr	r3, [pc, #520]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0f0      	beq.n	8002f1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3c:	4b7f      	ldr	r3, [pc, #508]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	061b      	lsls	r3, r3, #24
 8002f4a:	497c      	ldr	r1, [pc, #496]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	604b      	str	r3, [r1, #4]
 8002f50:	e018      	b.n	8002f84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f52:	4b7a      	ldr	r3, [pc, #488]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a79      	ldr	r2, [pc, #484]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5e:	f7fe f83b 	bl	8000fd8 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f66:	f7fe f837 	bl	8000fd8 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e203      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f78:	4b70      	ldr	r3, [pc, #448]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1f0      	bne.n	8002f66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d03c      	beq.n	800300a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d01c      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f98:	4b68      	ldr	r3, [pc, #416]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f9e:	4a67      	ldr	r2, [pc, #412]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa8:	f7fe f816 	bl	8000fd8 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb0:	f7fe f812 	bl	8000fd8 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e1de      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fc2:	4b5e      	ldr	r3, [pc, #376]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0ef      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x3ec>
 8002fd0:	e01b      	b.n	800300a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fd2:	4b5a      	ldr	r3, [pc, #360]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd8:	4a58      	ldr	r2, [pc, #352]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002fda:	f023 0301 	bic.w	r3, r3, #1
 8002fde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe2:	f7fd fff9 	bl	8000fd8 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fea:	f7fd fff5 	bl	8000fd8 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e1c1      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ffc:	4b4f      	ldr	r3, [pc, #316]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8002ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1ef      	bne.n	8002fea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80a6 	beq.w	8003164 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003018:	2300      	movs	r3, #0
 800301a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800301c:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_RCC_OscConfig+0x578>)
 800301e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10d      	bne.n	8003044 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003028:	4b44      	ldr	r3, [pc, #272]	; (800313c <HAL_RCC_OscConfig+0x578>)
 800302a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302c:	4a43      	ldr	r2, [pc, #268]	; (800313c <HAL_RCC_OscConfig+0x578>)
 800302e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003032:	6593      	str	r3, [r2, #88]	; 0x58
 8003034:	4b41      	ldr	r3, [pc, #260]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8003036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003040:	2301      	movs	r3, #1
 8003042:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003044:	4b3e      	ldr	r3, [pc, #248]	; (8003140 <HAL_RCC_OscConfig+0x57c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d118      	bne.n	8003082 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003050:	4b3b      	ldr	r3, [pc, #236]	; (8003140 <HAL_RCC_OscConfig+0x57c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a3a      	ldr	r2, [pc, #232]	; (8003140 <HAL_RCC_OscConfig+0x57c>)
 8003056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800305c:	f7fd ffbc 	bl	8000fd8 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003064:	f7fd ffb8 	bl	8000fd8 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e184      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003076:	4b32      	ldr	r3, [pc, #200]	; (8003140 <HAL_RCC_OscConfig+0x57c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d108      	bne.n	800309c <HAL_RCC_OscConfig+0x4d8>
 800308a:	4b2c      	ldr	r3, [pc, #176]	; (800313c <HAL_RCC_OscConfig+0x578>)
 800308c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003090:	4a2a      	ldr	r2, [pc, #168]	; (800313c <HAL_RCC_OscConfig+0x578>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800309a:	e024      	b.n	80030e6 <HAL_RCC_OscConfig+0x522>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b05      	cmp	r3, #5
 80030a2:	d110      	bne.n	80030c6 <HAL_RCC_OscConfig+0x502>
 80030a4:	4b25      	ldr	r3, [pc, #148]	; (800313c <HAL_RCC_OscConfig+0x578>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030aa:	4a24      	ldr	r2, [pc, #144]	; (800313c <HAL_RCC_OscConfig+0x578>)
 80030ac:	f043 0304 	orr.w	r3, r3, #4
 80030b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030b4:	4b21      	ldr	r3, [pc, #132]	; (800313c <HAL_RCC_OscConfig+0x578>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	4a20      	ldr	r2, [pc, #128]	; (800313c <HAL_RCC_OscConfig+0x578>)
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030c4:	e00f      	b.n	80030e6 <HAL_RCC_OscConfig+0x522>
 80030c6:	4b1d      	ldr	r3, [pc, #116]	; (800313c <HAL_RCC_OscConfig+0x578>)
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030cc:	4a1b      	ldr	r2, [pc, #108]	; (800313c <HAL_RCC_OscConfig+0x578>)
 80030ce:	f023 0301 	bic.w	r3, r3, #1
 80030d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030d6:	4b19      	ldr	r3, [pc, #100]	; (800313c <HAL_RCC_OscConfig+0x578>)
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030dc:	4a17      	ldr	r2, [pc, #92]	; (800313c <HAL_RCC_OscConfig+0x578>)
 80030de:	f023 0304 	bic.w	r3, r3, #4
 80030e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d016      	beq.n	800311c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ee:	f7fd ff73 	bl	8000fd8 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030f4:	e00a      	b.n	800310c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f6:	f7fd ff6f 	bl	8000fd8 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f241 3288 	movw	r2, #5000	; 0x1388
 8003104:	4293      	cmp	r3, r2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e139      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_RCC_OscConfig+0x578>)
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0ed      	beq.n	80030f6 <HAL_RCC_OscConfig+0x532>
 800311a:	e01a      	b.n	8003152 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311c:	f7fd ff5c 	bl	8000fd8 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003122:	e00f      	b.n	8003144 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003124:	f7fd ff58 	bl	8000fd8 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d906      	bls.n	8003144 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e122      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000
 8003140:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003144:	4b90      	ldr	r3, [pc, #576]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1e8      	bne.n	8003124 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003152:	7ffb      	ldrb	r3, [r7, #31]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d105      	bne.n	8003164 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003158:	4b8b      	ldr	r3, [pc, #556]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 800315a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315c:	4a8a      	ldr	r2, [pc, #552]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 800315e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003162:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 8108 	beq.w	800337e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003172:	2b02      	cmp	r3, #2
 8003174:	f040 80d0 	bne.w	8003318 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003178:	4b83      	ldr	r3, [pc, #524]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f003 0203 	and.w	r2, r3, #3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	429a      	cmp	r2, r3
 800318a:	d130      	bne.n	80031ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	3b01      	subs	r3, #1
 8003198:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800319a:	429a      	cmp	r2, r3
 800319c:	d127      	bne.n	80031ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d11f      	bne.n	80031ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031b8:	2a07      	cmp	r2, #7
 80031ba:	bf14      	ite	ne
 80031bc:	2201      	movne	r2, #1
 80031be:	2200      	moveq	r2, #0
 80031c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d113      	bne.n	80031ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d0:	085b      	lsrs	r3, r3, #1
 80031d2:	3b01      	subs	r3, #1
 80031d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d109      	bne.n	80031ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	085b      	lsrs	r3, r3, #1
 80031e6:	3b01      	subs	r3, #1
 80031e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d06e      	beq.n	80032cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	2b0c      	cmp	r3, #12
 80031f2:	d069      	beq.n	80032c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031f4:	4b64      	ldr	r3, [pc, #400]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d105      	bne.n	800320c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003200:	4b61      	ldr	r3, [pc, #388]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0b7      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003210:	4b5d      	ldr	r3, [pc, #372]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a5c      	ldr	r2, [pc, #368]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 8003216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800321a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800321c:	f7fd fedc 	bl	8000fd8 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003224:	f7fd fed8 	bl	8000fd8 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e0a4      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003236:	4b54      	ldr	r3, [pc, #336]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003242:	4b51      	ldr	r3, [pc, #324]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	4b51      	ldr	r3, [pc, #324]	; (800338c <HAL_RCC_OscConfig+0x7c8>)
 8003248:	4013      	ands	r3, r2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003252:	3a01      	subs	r2, #1
 8003254:	0112      	lsls	r2, r2, #4
 8003256:	4311      	orrs	r1, r2
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800325c:	0212      	lsls	r2, r2, #8
 800325e:	4311      	orrs	r1, r2
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003264:	0852      	lsrs	r2, r2, #1
 8003266:	3a01      	subs	r2, #1
 8003268:	0552      	lsls	r2, r2, #21
 800326a:	4311      	orrs	r1, r2
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003270:	0852      	lsrs	r2, r2, #1
 8003272:	3a01      	subs	r2, #1
 8003274:	0652      	lsls	r2, r2, #25
 8003276:	4311      	orrs	r1, r2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800327c:	0912      	lsrs	r2, r2, #4
 800327e:	0452      	lsls	r2, r2, #17
 8003280:	430a      	orrs	r2, r1
 8003282:	4941      	ldr	r1, [pc, #260]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 8003284:	4313      	orrs	r3, r2
 8003286:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003288:	4b3f      	ldr	r3, [pc, #252]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a3e      	ldr	r2, [pc, #248]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 800328e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003292:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003294:	4b3c      	ldr	r3, [pc, #240]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4a3b      	ldr	r2, [pc, #236]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 800329a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800329e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032a0:	f7fd fe9a 	bl	8000fd8 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a8:	f7fd fe96 	bl	8000fd8 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e062      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ba:	4b33      	ldr	r3, [pc, #204]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032c6:	e05a      	b.n	800337e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e059      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032cc:	4b2e      	ldr	r3, [pc, #184]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d152      	bne.n	800337e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032d8:	4b2b      	ldr	r3, [pc, #172]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a2a      	ldr	r2, [pc, #168]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 80032de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032e4:	4b28      	ldr	r3, [pc, #160]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	4a27      	ldr	r2, [pc, #156]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 80032ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032f0:	f7fd fe72 	bl	8000fd8 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f8:	f7fd fe6e 	bl	8000fd8 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e03a      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800330a:	4b1f      	ldr	r3, [pc, #124]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCC_OscConfig+0x734>
 8003316:	e032      	b.n	800337e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2b0c      	cmp	r3, #12
 800331c:	d02d      	beq.n	800337a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331e:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a19      	ldr	r2, [pc, #100]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 8003324:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003328:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800332a:	4b17      	ldr	r3, [pc, #92]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d105      	bne.n	8003342 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003336:	4b14      	ldr	r3, [pc, #80]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	4a13      	ldr	r2, [pc, #76]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 800333c:	f023 0303 	bic.w	r3, r3, #3
 8003340:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003342:	4b11      	ldr	r3, [pc, #68]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	4a10      	ldr	r2, [pc, #64]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 8003348:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800334c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003350:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003352:	f7fd fe41 	bl	8000fd8 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335a:	f7fd fe3d 	bl	8000fd8 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e009      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800336c:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_RCC_OscConfig+0x7c4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1f0      	bne.n	800335a <HAL_RCC_OscConfig+0x796>
 8003378:	e001      	b.n	800337e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3720      	adds	r7, #32
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40021000 	.word	0x40021000
 800338c:	f99d808c 	.word	0xf99d808c

08003390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0c8      	b.n	8003536 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033a4:	4b66      	ldr	r3, [pc, #408]	; (8003540 <HAL_RCC_ClockConfig+0x1b0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d910      	bls.n	80033d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b2:	4b63      	ldr	r3, [pc, #396]	; (8003540 <HAL_RCC_ClockConfig+0x1b0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f023 0207 	bic.w	r2, r3, #7
 80033ba:	4961      	ldr	r1, [pc, #388]	; (8003540 <HAL_RCC_ClockConfig+0x1b0>)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c2:	4b5f      	ldr	r3, [pc, #380]	; (8003540 <HAL_RCC_ClockConfig+0x1b0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0b0      	b.n	8003536 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d04c      	beq.n	800347a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d107      	bne.n	80033f8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e8:	4b56      	ldr	r3, [pc, #344]	; (8003544 <HAL_RCC_ClockConfig+0x1b4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d121      	bne.n	8003438 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e09e      	b.n	8003536 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d107      	bne.n	8003410 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003400:	4b50      	ldr	r3, [pc, #320]	; (8003544 <HAL_RCC_ClockConfig+0x1b4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d115      	bne.n	8003438 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e092      	b.n	8003536 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d107      	bne.n	8003428 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003418:	4b4a      	ldr	r3, [pc, #296]	; (8003544 <HAL_RCC_ClockConfig+0x1b4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d109      	bne.n	8003438 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e086      	b.n	8003536 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003428:	4b46      	ldr	r3, [pc, #280]	; (8003544 <HAL_RCC_ClockConfig+0x1b4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e07e      	b.n	8003536 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003438:	4b42      	ldr	r3, [pc, #264]	; (8003544 <HAL_RCC_ClockConfig+0x1b4>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f023 0203 	bic.w	r2, r3, #3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	493f      	ldr	r1, [pc, #252]	; (8003544 <HAL_RCC_ClockConfig+0x1b4>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800344a:	f7fd fdc5 	bl	8000fd8 <HAL_GetTick>
 800344e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003450:	e00a      	b.n	8003468 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003452:	f7fd fdc1 	bl	8000fd8 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003460:	4293      	cmp	r3, r2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e066      	b.n	8003536 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003468:	4b36      	ldr	r3, [pc, #216]	; (8003544 <HAL_RCC_ClockConfig+0x1b4>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 020c 	and.w	r2, r3, #12
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	429a      	cmp	r2, r3
 8003478:	d1eb      	bne.n	8003452 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003486:	4b2f      	ldr	r3, [pc, #188]	; (8003544 <HAL_RCC_ClockConfig+0x1b4>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	492c      	ldr	r1, [pc, #176]	; (8003544 <HAL_RCC_ClockConfig+0x1b4>)
 8003494:	4313      	orrs	r3, r2
 8003496:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003498:	4b29      	ldr	r3, [pc, #164]	; (8003540 <HAL_RCC_ClockConfig+0x1b0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d210      	bcs.n	80034c8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a6:	4b26      	ldr	r3, [pc, #152]	; (8003540 <HAL_RCC_ClockConfig+0x1b0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 0207 	bic.w	r2, r3, #7
 80034ae:	4924      	ldr	r1, [pc, #144]	; (8003540 <HAL_RCC_ClockConfig+0x1b0>)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b6:	4b22      	ldr	r3, [pc, #136]	; (8003540 <HAL_RCC_ClockConfig+0x1b0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e036      	b.n	8003536 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d4:	4b1b      	ldr	r3, [pc, #108]	; (8003544 <HAL_RCC_ClockConfig+0x1b4>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	4918      	ldr	r1, [pc, #96]	; (8003544 <HAL_RCC_ClockConfig+0x1b4>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d009      	beq.n	8003506 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034f2:	4b14      	ldr	r3, [pc, #80]	; (8003544 <HAL_RCC_ClockConfig+0x1b4>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4910      	ldr	r1, [pc, #64]	; (8003544 <HAL_RCC_ClockConfig+0x1b4>)
 8003502:	4313      	orrs	r3, r2
 8003504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003506:	f000 f825 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 800350a:	4601      	mov	r1, r0
 800350c:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <HAL_RCC_ClockConfig+0x1b4>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	4a0c      	ldr	r2, [pc, #48]	; (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 8003518:	5cd3      	ldrb	r3, [r2, r3]
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	fa21 f303 	lsr.w	r3, r1, r3
 8003522:	4a0a      	ldr	r2, [pc, #40]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003526:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <HAL_RCC_ClockConfig+0x1c0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd fd04 	bl	8000f38 <HAL_InitTick>
 8003530:	4603      	mov	r3, r0
 8003532:	72fb      	strb	r3, [r7, #11]

  return status;
 8003534:	7afb      	ldrb	r3, [r7, #11]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40022000 	.word	0x40022000
 8003544:	40021000 	.word	0x40021000
 8003548:	08004f18 	.word	0x08004f18
 800354c:	20000000 	.word	0x20000000
 8003550:	20000004 	.word	0x20000004

08003554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003554:	b480      	push	{r7}
 8003556:	b089      	sub	sp, #36	; 0x24
 8003558:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003562:	4b3d      	ldr	r3, [pc, #244]	; (8003658 <HAL_RCC_GetSysClockFreq+0x104>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800356c:	4b3a      	ldr	r3, [pc, #232]	; (8003658 <HAL_RCC_GetSysClockFreq+0x104>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0x34>
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	2b0c      	cmp	r3, #12
 8003580:	d121      	bne.n	80035c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d11e      	bne.n	80035c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003588:	4b33      	ldr	r3, [pc, #204]	; (8003658 <HAL_RCC_GetSysClockFreq+0x104>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d107      	bne.n	80035a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003594:	4b30      	ldr	r3, [pc, #192]	; (8003658 <HAL_RCC_GetSysClockFreq+0x104>)
 8003596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800359a:	0a1b      	lsrs	r3, r3, #8
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	e005      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035a4:	4b2c      	ldr	r3, [pc, #176]	; (8003658 <HAL_RCC_GetSysClockFreq+0x104>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035b0:	4a2a      	ldr	r2, [pc, #168]	; (800365c <HAL_RCC_GetSysClockFreq+0x108>)
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10d      	bne.n	80035dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035c4:	e00a      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d102      	bne.n	80035d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035cc:	4b24      	ldr	r3, [pc, #144]	; (8003660 <HAL_RCC_GetSysClockFreq+0x10c>)
 80035ce:	61bb      	str	r3, [r7, #24]
 80035d0:	e004      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035d8:	4b22      	ldr	r3, [pc, #136]	; (8003664 <HAL_RCC_GetSysClockFreq+0x110>)
 80035da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2b0c      	cmp	r3, #12
 80035e0:	d133      	bne.n	800364a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035e2:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <HAL_RCC_GetSysClockFreq+0x104>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d002      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0xa4>
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d003      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0xaa>
 80035f6:	e005      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035f8:	4b19      	ldr	r3, [pc, #100]	; (8003660 <HAL_RCC_GetSysClockFreq+0x10c>)
 80035fa:	617b      	str	r3, [r7, #20]
      break;
 80035fc:	e005      	b.n	800360a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035fe:	4b19      	ldr	r3, [pc, #100]	; (8003664 <HAL_RCC_GetSysClockFreq+0x110>)
 8003600:	617b      	str	r3, [r7, #20]
      break;
 8003602:	e002      	b.n	800360a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	617b      	str	r3, [r7, #20]
      break;
 8003608:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800360a:	4b13      	ldr	r3, [pc, #76]	; (8003658 <HAL_RCC_GetSysClockFreq+0x104>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	3301      	adds	r3, #1
 8003616:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003618:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <HAL_RCC_GetSysClockFreq+0x104>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	0a1b      	lsrs	r3, r3, #8
 800361e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	fb02 f203 	mul.w	r2, r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	fbb2 f3f3 	udiv	r3, r2, r3
 800362e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003630:	4b09      	ldr	r3, [pc, #36]	; (8003658 <HAL_RCC_GetSysClockFreq+0x104>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	0e5b      	lsrs	r3, r3, #25
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	3301      	adds	r3, #1
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	fbb2 f3f3 	udiv	r3, r2, r3
 8003648:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800364a:	69bb      	ldr	r3, [r7, #24]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3724      	adds	r7, #36	; 0x24
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	40021000 	.word	0x40021000
 800365c:	08004f30 	.word	0x08004f30
 8003660:	00f42400 	.word	0x00f42400
 8003664:	007a1200 	.word	0x007a1200

08003668 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800366c:	4b03      	ldr	r3, [pc, #12]	; (800367c <HAL_RCC_GetHCLKFreq+0x14>)
 800366e:	681b      	ldr	r3, [r3, #0]
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	20000000 	.word	0x20000000

08003680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003684:	f7ff fff0 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 8003688:	4601      	mov	r1, r0
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	0a1b      	lsrs	r3, r3, #8
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	4a04      	ldr	r2, [pc, #16]	; (80036a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003696:	5cd3      	ldrb	r3, [r2, r3]
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40021000 	.word	0x40021000
 80036a8:	08004f28 	.word	0x08004f28

080036ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036b0:	f7ff ffda 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 80036b4:	4601      	mov	r1, r0
 80036b6:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	0adb      	lsrs	r3, r3, #11
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	4a04      	ldr	r2, [pc, #16]	; (80036d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036c2:	5cd3      	ldrb	r3, [r2, r3]
 80036c4:	f003 031f 	and.w	r3, r3, #31
 80036c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40021000 	.word	0x40021000
 80036d4:	08004f28 	.word	0x08004f28

080036d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036e0:	2300      	movs	r3, #0
 80036e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036e4:	4b2a      	ldr	r3, [pc, #168]	; (8003790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036f0:	f7ff fa04 	bl	8002afc <HAL_PWREx_GetVoltageRange>
 80036f4:	6178      	str	r0, [r7, #20]
 80036f6:	e014      	b.n	8003722 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036f8:	4b25      	ldr	r3, [pc, #148]	; (8003790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fc:	4a24      	ldr	r2, [pc, #144]	; (8003790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003702:	6593      	str	r3, [r2, #88]	; 0x58
 8003704:	4b22      	ldr	r3, [pc, #136]	; (8003790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003710:	f7ff f9f4 	bl	8002afc <HAL_PWREx_GetVoltageRange>
 8003714:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003716:	4b1e      	ldr	r3, [pc, #120]	; (8003790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371a:	4a1d      	ldr	r2, [pc, #116]	; (8003790 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800371c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003720:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003728:	d10b      	bne.n	8003742 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b80      	cmp	r3, #128	; 0x80
 800372e:	d919      	bls.n	8003764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2ba0      	cmp	r3, #160	; 0xa0
 8003734:	d902      	bls.n	800373c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003736:	2302      	movs	r3, #2
 8003738:	613b      	str	r3, [r7, #16]
 800373a:	e013      	b.n	8003764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800373c:	2301      	movs	r3, #1
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	e010      	b.n	8003764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b80      	cmp	r3, #128	; 0x80
 8003746:	d902      	bls.n	800374e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003748:	2303      	movs	r3, #3
 800374a:	613b      	str	r3, [r7, #16]
 800374c:	e00a      	b.n	8003764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b80      	cmp	r3, #128	; 0x80
 8003752:	d102      	bne.n	800375a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003754:	2302      	movs	r3, #2
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	e004      	b.n	8003764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b70      	cmp	r3, #112	; 0x70
 800375e:	d101      	bne.n	8003764 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003760:	2301      	movs	r3, #1
 8003762:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f023 0207 	bic.w	r2, r3, #7
 800376c:	4909      	ldr	r1, [pc, #36]	; (8003794 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003774:	4b07      	ldr	r3, [pc, #28]	; (8003794 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	429a      	cmp	r2, r3
 8003780:	d001      	beq.n	8003786 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40021000 	.word	0x40021000
 8003794:	40022000 	.word	0x40022000

08003798 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037a0:	2300      	movs	r3, #0
 80037a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037a4:	2300      	movs	r3, #0
 80037a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d03f      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037bc:	d01c      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80037be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037c2:	d802      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x32>
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00e      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80037c8:	e01f      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80037ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037ce:	d003      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80037d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037d4:	d01c      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80037d6:	e018      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037d8:	4b85      	ldr	r3, [pc, #532]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4a84      	ldr	r2, [pc, #528]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037e4:	e015      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3304      	adds	r3, #4
 80037ea:	2100      	movs	r1, #0
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 fab9 	bl	8003d64 <RCCEx_PLLSAI1_Config>
 80037f2:	4603      	mov	r3, r0
 80037f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037f6:	e00c      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3320      	adds	r3, #32
 80037fc:	2100      	movs	r1, #0
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fba0 	bl	8003f44 <RCCEx_PLLSAI2_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003808:	e003      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	74fb      	strb	r3, [r7, #19]
      break;
 800380e:	e000      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003810:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003812:	7cfb      	ldrb	r3, [r7, #19]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10b      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003818:	4b75      	ldr	r3, [pc, #468]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003826:	4972      	ldr	r1, [pc, #456]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800382e:	e001      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003830:	7cfb      	ldrb	r3, [r7, #19]
 8003832:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d03f      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003848:	d01c      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800384a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800384e:	d802      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00e      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003854:	e01f      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003856:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800385a:	d003      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800385c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003860:	d01c      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003862:	e018      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003864:	4b62      	ldr	r3, [pc, #392]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4a61      	ldr	r2, [pc, #388]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800386a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003870:	e015      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3304      	adds	r3, #4
 8003876:	2100      	movs	r1, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fa73 	bl	8003d64 <RCCEx_PLLSAI1_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003882:	e00c      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3320      	adds	r3, #32
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fb5a 	bl	8003f44 <RCCEx_PLLSAI2_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003894:	e003      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	74fb      	strb	r3, [r7, #19]
      break;
 800389a:	e000      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800389c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800389e:	7cfb      	ldrb	r3, [r7, #19]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10b      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038a4:	4b52      	ldr	r3, [pc, #328]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038b2:	494f      	ldr	r1, [pc, #316]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038ba:	e001      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038bc:	7cfb      	ldrb	r3, [r7, #19]
 80038be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 80a0 	beq.w	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ce:	2300      	movs	r3, #0
 80038d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038d2:	4b47      	ldr	r3, [pc, #284]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80038e2:	2300      	movs	r3, #0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00d      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e8:	4b41      	ldr	r3, [pc, #260]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ec:	4a40      	ldr	r2, [pc, #256]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f2:	6593      	str	r3, [r2, #88]	; 0x58
 80038f4:	4b3e      	ldr	r3, [pc, #248]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003900:	2301      	movs	r3, #1
 8003902:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003904:	4b3b      	ldr	r3, [pc, #236]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a3a      	ldr	r2, [pc, #232]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800390a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003910:	f7fd fb62 	bl	8000fd8 <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003916:	e009      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003918:	f7fd fb5e 	bl	8000fd8 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d902      	bls.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	74fb      	strb	r3, [r7, #19]
        break;
 800392a:	e005      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800392c:	4b31      	ldr	r3, [pc, #196]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0ef      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003938:	7cfb      	ldrb	r3, [r7, #19]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d15c      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800393e:	4b2c      	ldr	r3, [pc, #176]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003948:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d01f      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	429a      	cmp	r2, r3
 800395a:	d019      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800395c:	4b24      	ldr	r3, [pc, #144]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800395e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003966:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003968:	4b21      	ldr	r3, [pc, #132]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396e:	4a20      	ldr	r2, [pc, #128]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003978:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397e:	4a1c      	ldr	r2, [pc, #112]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003988:	4a19      	ldr	r2, [pc, #100]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d016      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399a:	f7fd fb1d 	bl	8000fd8 <HAL_GetTick>
 800399e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039a0:	e00b      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a2:	f7fd fb19 	bl	8000fd8 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d902      	bls.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	74fb      	strb	r3, [r7, #19]
            break;
 80039b8:	e006      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ba:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0ec      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80039c8:	7cfb      	ldrb	r3, [r7, #19]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ce:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039de:	4904      	ldr	r1, [pc, #16]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039e6:	e009      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039e8:	7cfb      	ldrb	r3, [r7, #19]
 80039ea:	74bb      	strb	r3, [r7, #18]
 80039ec:	e006      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000
 80039f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f8:	7cfb      	ldrb	r3, [r7, #19]
 80039fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039fc:	7c7b      	ldrb	r3, [r7, #17]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d105      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a02:	4b9e      	ldr	r3, [pc, #632]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a06:	4a9d      	ldr	r2, [pc, #628]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a1a:	4b98      	ldr	r3, [pc, #608]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a20:	f023 0203 	bic.w	r2, r3, #3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a28:	4994      	ldr	r1, [pc, #592]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a3c:	4b8f      	ldr	r3, [pc, #572]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a42:	f023 020c 	bic.w	r2, r3, #12
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4a:	498c      	ldr	r1, [pc, #560]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a5e:	4b87      	ldr	r3, [pc, #540]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	4983      	ldr	r1, [pc, #524]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a80:	4b7e      	ldr	r3, [pc, #504]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	497b      	ldr	r1, [pc, #492]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0310 	and.w	r3, r3, #16
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003aa2:	4b76      	ldr	r3, [pc, #472]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab0:	4972      	ldr	r1, [pc, #456]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ac4:	4b6d      	ldr	r3, [pc, #436]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad2:	496a      	ldr	r1, [pc, #424]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ae6:	4b65      	ldr	r3, [pc, #404]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	4961      	ldr	r1, [pc, #388]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b08:	4b5c      	ldr	r3, [pc, #368]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b16:	4959      	ldr	r1, [pc, #356]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b2a:	4b54      	ldr	r3, [pc, #336]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b38:	4950      	ldr	r1, [pc, #320]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b4c:	4b4b      	ldr	r3, [pc, #300]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5a:	4948      	ldr	r1, [pc, #288]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b6e:	4b43      	ldr	r3, [pc, #268]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7c:	493f      	ldr	r1, [pc, #252]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d028      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b90:	4b3a      	ldr	r3, [pc, #232]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b9e:	4937      	ldr	r1, [pc, #220]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003baa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bae:	d106      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bb0:	4b32      	ldr	r3, [pc, #200]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	4a31      	ldr	r2, [pc, #196]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bba:	60d3      	str	r3, [r2, #12]
 8003bbc:	e011      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bc6:	d10c      	bne.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	2101      	movs	r1, #1
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 f8c8 	bl	8003d64 <RCCEx_PLLSAI1_Config>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003bd8:	7cfb      	ldrb	r3, [r7, #19]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003bde:	7cfb      	ldrb	r3, [r7, #19]
 8003be0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d028      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bee:	4b23      	ldr	r3, [pc, #140]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	491f      	ldr	r1, [pc, #124]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c0c:	d106      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c0e:	4b1b      	ldr	r3, [pc, #108]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	4a1a      	ldr	r2, [pc, #104]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c18:	60d3      	str	r3, [r2, #12]
 8003c1a:	e011      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c24:	d10c      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 f899 	bl	8003d64 <RCCEx_PLLSAI1_Config>
 8003c32:	4603      	mov	r3, r0
 8003c34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c36:	7cfb      	ldrb	r3, [r7, #19]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003c3c:	7cfb      	ldrb	r3, [r7, #19]
 8003c3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d02b      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5a:	4908      	ldr	r1, [pc, #32]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c6a:	d109      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c6c:	4b03      	ldr	r3, [pc, #12]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4a02      	ldr	r2, [pc, #8]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003c72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c76:	60d3      	str	r3, [r2, #12]
 8003c78:	e014      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003c7a:	bf00      	nop
 8003c7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	2101      	movs	r1, #1
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 f867 	bl	8003d64 <RCCEx_PLLSAI1_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c9a:	7cfb      	ldrb	r3, [r7, #19]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003ca0:	7cfb      	ldrb	r3, [r7, #19]
 8003ca2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d02f      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cb0:	4b2b      	ldr	r3, [pc, #172]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cbe:	4928      	ldr	r1, [pc, #160]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cce:	d10d      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	2102      	movs	r1, #2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f844 	bl	8003d64 <RCCEx_PLLSAI1_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ce0:	7cfb      	ldrb	r3, [r7, #19]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d014      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003ce6:	7cfb      	ldrb	r3, [r7, #19]
 8003ce8:	74bb      	strb	r3, [r7, #18]
 8003cea:	e011      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf4:	d10c      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3320      	adds	r3, #32
 8003cfa:	2102      	movs	r1, #2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 f921 	bl	8003f44 <RCCEx_PLLSAI2_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d06:	7cfb      	ldrb	r3, [r7, #19]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003d0c:	7cfb      	ldrb	r3, [r7, #19]
 8003d0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d1c:	4b10      	ldr	r3, [pc, #64]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d2a:	490d      	ldr	r1, [pc, #52]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00b      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d3e:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d4e:	4904      	ldr	r1, [pc, #16]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d56:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40021000 	.word	0x40021000

08003d64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d72:	4b73      	ldr	r3, [pc, #460]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d018      	beq.n	8003db0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d7e:	4b70      	ldr	r3, [pc, #448]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f003 0203 	and.w	r2, r3, #3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d10d      	bne.n	8003daa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
       ||
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d96:	4b6a      	ldr	r3, [pc, #424]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	091b      	lsrs	r3, r3, #4
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
       ||
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d044      	beq.n	8003e34 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	73fb      	strb	r3, [r7, #15]
 8003dae:	e041      	b.n	8003e34 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d00c      	beq.n	8003dd2 <RCCEx_PLLSAI1_Config+0x6e>
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d013      	beq.n	8003de4 <RCCEx_PLLSAI1_Config+0x80>
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d120      	bne.n	8003e02 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dc0:	4b5f      	ldr	r3, [pc, #380]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d11d      	bne.n	8003e08 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dd0:	e01a      	b.n	8003e08 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dd2:	4b5b      	ldr	r3, [pc, #364]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d116      	bne.n	8003e0c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de2:	e013      	b.n	8003e0c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003de4:	4b56      	ldr	r3, [pc, #344]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10f      	bne.n	8003e10 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003df0:	4b53      	ldr	r3, [pc, #332]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d109      	bne.n	8003e10 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e00:	e006      	b.n	8003e10 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
      break;
 8003e06:	e004      	b.n	8003e12 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003e08:	bf00      	nop
 8003e0a:	e002      	b.n	8003e12 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003e0c:	bf00      	nop
 8003e0e:	e000      	b.n	8003e12 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003e10:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10d      	bne.n	8003e34 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e18:	4b49      	ldr	r3, [pc, #292]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6819      	ldr	r1, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	4944      	ldr	r1, [pc, #272]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d17d      	bne.n	8003f36 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e3a:	4b41      	ldr	r3, [pc, #260]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a40      	ldr	r2, [pc, #256]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e46:	f7fd f8c7 	bl	8000fd8 <HAL_GetTick>
 8003e4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e4c:	e009      	b.n	8003e62 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e4e:	f7fd f8c3 	bl	8000fd8 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d902      	bls.n	8003e62 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	73fb      	strb	r3, [r7, #15]
        break;
 8003e60:	e005      	b.n	8003e6e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e62:	4b37      	ldr	r3, [pc, #220]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1ef      	bne.n	8003e4e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d160      	bne.n	8003f36 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d111      	bne.n	8003e9e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e7a:	4b31      	ldr	r3, [pc, #196]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6892      	ldr	r2, [r2, #8]
 8003e8a:	0211      	lsls	r1, r2, #8
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	68d2      	ldr	r2, [r2, #12]
 8003e90:	0912      	lsrs	r2, r2, #4
 8003e92:	0452      	lsls	r2, r2, #17
 8003e94:	430a      	orrs	r2, r1
 8003e96:	492a      	ldr	r1, [pc, #168]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	610b      	str	r3, [r1, #16]
 8003e9c:	e027      	b.n	8003eee <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d112      	bne.n	8003eca <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ea4:	4b26      	ldr	r3, [pc, #152]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003eac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6892      	ldr	r2, [r2, #8]
 8003eb4:	0211      	lsls	r1, r2, #8
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6912      	ldr	r2, [r2, #16]
 8003eba:	0852      	lsrs	r2, r2, #1
 8003ebc:	3a01      	subs	r2, #1
 8003ebe:	0552      	lsls	r2, r2, #21
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	491f      	ldr	r1, [pc, #124]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	610b      	str	r3, [r1, #16]
 8003ec8:	e011      	b.n	8003eee <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003eca:	4b1d      	ldr	r3, [pc, #116]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ed2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6892      	ldr	r2, [r2, #8]
 8003eda:	0211      	lsls	r1, r2, #8
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6952      	ldr	r2, [r2, #20]
 8003ee0:	0852      	lsrs	r2, r2, #1
 8003ee2:	3a01      	subs	r2, #1
 8003ee4:	0652      	lsls	r2, r2, #25
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	4915      	ldr	r1, [pc, #84]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003eee:	4b14      	ldr	r3, [pc, #80]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a13      	ldr	r2, [pc, #76]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ef4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ef8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efa:	f7fd f86d 	bl	8000fd8 <HAL_GetTick>
 8003efe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f00:	e009      	b.n	8003f16 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f02:	f7fd f869 	bl	8000fd8 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d902      	bls.n	8003f16 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	73fb      	strb	r3, [r7, #15]
          break;
 8003f14:	e005      	b.n	8003f22 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f16:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0ef      	beq.n	8003f02 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d106      	bne.n	8003f36 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f28:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	4903      	ldr	r1, [pc, #12]	; (8003f40 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40021000 	.word	0x40021000

08003f44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f52:	4b68      	ldr	r3, [pc, #416]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d018      	beq.n	8003f90 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f5e:	4b65      	ldr	r3, [pc, #404]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f003 0203 	and.w	r2, r3, #3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d10d      	bne.n	8003f8a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
       ||
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f76:	4b5f      	ldr	r3, [pc, #380]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	091b      	lsrs	r3, r3, #4
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
       ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d044      	beq.n	8004014 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	73fb      	strb	r3, [r7, #15]
 8003f8e:	e041      	b.n	8004014 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d00c      	beq.n	8003fb2 <RCCEx_PLLSAI2_Config+0x6e>
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d013      	beq.n	8003fc4 <RCCEx_PLLSAI2_Config+0x80>
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d120      	bne.n	8003fe2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fa0:	4b54      	ldr	r3, [pc, #336]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d11d      	bne.n	8003fe8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb0:	e01a      	b.n	8003fe8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fb2:	4b50      	ldr	r3, [pc, #320]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d116      	bne.n	8003fec <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc2:	e013      	b.n	8003fec <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fc4:	4b4b      	ldr	r3, [pc, #300]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10f      	bne.n	8003ff0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fd0:	4b48      	ldr	r3, [pc, #288]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d109      	bne.n	8003ff0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fe0:	e006      	b.n	8003ff0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe6:	e004      	b.n	8003ff2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003fe8:	bf00      	nop
 8003fea:	e002      	b.n	8003ff2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003fec:	bf00      	nop
 8003fee:	e000      	b.n	8003ff2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003ff0:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10d      	bne.n	8004014 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ff8:	4b3e      	ldr	r3, [pc, #248]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6819      	ldr	r1, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	3b01      	subs	r3, #1
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	430b      	orrs	r3, r1
 800400e:	4939      	ldr	r1, [pc, #228]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004010:	4313      	orrs	r3, r2
 8004012:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d167      	bne.n	80040ea <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800401a:	4b36      	ldr	r3, [pc, #216]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a35      	ldr	r2, [pc, #212]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004026:	f7fc ffd7 	bl	8000fd8 <HAL_GetTick>
 800402a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800402c:	e009      	b.n	8004042 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800402e:	f7fc ffd3 	bl	8000fd8 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d902      	bls.n	8004042 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	73fb      	strb	r3, [r7, #15]
        break;
 8004040:	e005      	b.n	800404e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004042:	4b2c      	ldr	r3, [pc, #176]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1ef      	bne.n	800402e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800404e:	7bfb      	ldrb	r3, [r7, #15]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d14a      	bne.n	80040ea <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d111      	bne.n	800407e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800405a:	4b26      	ldr	r3, [pc, #152]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6892      	ldr	r2, [r2, #8]
 800406a:	0211      	lsls	r1, r2, #8
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	68d2      	ldr	r2, [r2, #12]
 8004070:	0912      	lsrs	r2, r2, #4
 8004072:	0452      	lsls	r2, r2, #17
 8004074:	430a      	orrs	r2, r1
 8004076:	491f      	ldr	r1, [pc, #124]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004078:	4313      	orrs	r3, r2
 800407a:	614b      	str	r3, [r1, #20]
 800407c:	e011      	b.n	80040a2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800407e:	4b1d      	ldr	r3, [pc, #116]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004086:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6892      	ldr	r2, [r2, #8]
 800408e:	0211      	lsls	r1, r2, #8
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6912      	ldr	r2, [r2, #16]
 8004094:	0852      	lsrs	r2, r2, #1
 8004096:	3a01      	subs	r2, #1
 8004098:	0652      	lsls	r2, r2, #25
 800409a:	430a      	orrs	r2, r1
 800409c:	4915      	ldr	r1, [pc, #84]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040a2:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a13      	ldr	r2, [pc, #76]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ae:	f7fc ff93 	bl	8000fd8 <HAL_GetTick>
 80040b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040b4:	e009      	b.n	80040ca <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040b6:	f7fc ff8f 	bl	8000fd8 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d902      	bls.n	80040ca <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	73fb      	strb	r3, [r7, #15]
          break;
 80040c8:	e005      	b.n	80040d6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0ef      	beq.n	80040b6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d106      	bne.n	80040ea <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80040dc:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040de:	695a      	ldr	r2, [r3, #20]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	4903      	ldr	r1, [pc, #12]	; (80040f4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40021000 	.word	0x40021000

080040f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e049      	b.n	800419e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fc fda6 	bl	8000c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3304      	adds	r3, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f000 f89e 	bl	8004278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d001      	beq.n	80041c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e047      	b.n	8004250 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a23      	ldr	r2, [pc, #140]	; (800425c <HAL_TIM_Base_Start+0xb4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d01d      	beq.n	800420e <HAL_TIM_Base_Start+0x66>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041da:	d018      	beq.n	800420e <HAL_TIM_Base_Start+0x66>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1f      	ldr	r2, [pc, #124]	; (8004260 <HAL_TIM_Base_Start+0xb8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d013      	beq.n	800420e <HAL_TIM_Base_Start+0x66>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a1e      	ldr	r2, [pc, #120]	; (8004264 <HAL_TIM_Base_Start+0xbc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d00e      	beq.n	800420e <HAL_TIM_Base_Start+0x66>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1c      	ldr	r2, [pc, #112]	; (8004268 <HAL_TIM_Base_Start+0xc0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d009      	beq.n	800420e <HAL_TIM_Base_Start+0x66>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a1b      	ldr	r2, [pc, #108]	; (800426c <HAL_TIM_Base_Start+0xc4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d004      	beq.n	800420e <HAL_TIM_Base_Start+0x66>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a19      	ldr	r2, [pc, #100]	; (8004270 <HAL_TIM_Base_Start+0xc8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d115      	bne.n	800423a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	4b17      	ldr	r3, [pc, #92]	; (8004274 <HAL_TIM_Base_Start+0xcc>)
 8004216:	4013      	ands	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b06      	cmp	r3, #6
 800421e:	d015      	beq.n	800424c <HAL_TIM_Base_Start+0xa4>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004226:	d011      	beq.n	800424c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004238:	e008      	b.n	800424c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0201 	orr.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	e000      	b.n	800424e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	40012c00 	.word	0x40012c00
 8004260:	40000400 	.word	0x40000400
 8004264:	40000800 	.word	0x40000800
 8004268:	40000c00 	.word	0x40000c00
 800426c:	40013400 	.word	0x40013400
 8004270:	40014000 	.word	0x40014000
 8004274:	00010007 	.word	0x00010007

08004278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a40      	ldr	r2, [pc, #256]	; (800438c <TIM_Base_SetConfig+0x114>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d013      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004296:	d00f      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a3d      	ldr	r2, [pc, #244]	; (8004390 <TIM_Base_SetConfig+0x118>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d00b      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a3c      	ldr	r2, [pc, #240]	; (8004394 <TIM_Base_SetConfig+0x11c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d007      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a3b      	ldr	r2, [pc, #236]	; (8004398 <TIM_Base_SetConfig+0x120>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d003      	beq.n	80042b8 <TIM_Base_SetConfig+0x40>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a3a      	ldr	r2, [pc, #232]	; (800439c <TIM_Base_SetConfig+0x124>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d108      	bne.n	80042ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a2f      	ldr	r2, [pc, #188]	; (800438c <TIM_Base_SetConfig+0x114>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d01f      	beq.n	8004312 <TIM_Base_SetConfig+0x9a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d8:	d01b      	beq.n	8004312 <TIM_Base_SetConfig+0x9a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a2c      	ldr	r2, [pc, #176]	; (8004390 <TIM_Base_SetConfig+0x118>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d017      	beq.n	8004312 <TIM_Base_SetConfig+0x9a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a2b      	ldr	r2, [pc, #172]	; (8004394 <TIM_Base_SetConfig+0x11c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d013      	beq.n	8004312 <TIM_Base_SetConfig+0x9a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a2a      	ldr	r2, [pc, #168]	; (8004398 <TIM_Base_SetConfig+0x120>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00f      	beq.n	8004312 <TIM_Base_SetConfig+0x9a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a29      	ldr	r2, [pc, #164]	; (800439c <TIM_Base_SetConfig+0x124>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00b      	beq.n	8004312 <TIM_Base_SetConfig+0x9a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a28      	ldr	r2, [pc, #160]	; (80043a0 <TIM_Base_SetConfig+0x128>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d007      	beq.n	8004312 <TIM_Base_SetConfig+0x9a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a27      	ldr	r2, [pc, #156]	; (80043a4 <TIM_Base_SetConfig+0x12c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d003      	beq.n	8004312 <TIM_Base_SetConfig+0x9a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a26      	ldr	r2, [pc, #152]	; (80043a8 <TIM_Base_SetConfig+0x130>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d108      	bne.n	8004324 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a10      	ldr	r2, [pc, #64]	; (800438c <TIM_Base_SetConfig+0x114>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00f      	beq.n	8004370 <TIM_Base_SetConfig+0xf8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a12      	ldr	r2, [pc, #72]	; (800439c <TIM_Base_SetConfig+0x124>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d00b      	beq.n	8004370 <TIM_Base_SetConfig+0xf8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a11      	ldr	r2, [pc, #68]	; (80043a0 <TIM_Base_SetConfig+0x128>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d007      	beq.n	8004370 <TIM_Base_SetConfig+0xf8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a10      	ldr	r2, [pc, #64]	; (80043a4 <TIM_Base_SetConfig+0x12c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d003      	beq.n	8004370 <TIM_Base_SetConfig+0xf8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a0f      	ldr	r2, [pc, #60]	; (80043a8 <TIM_Base_SetConfig+0x130>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d103      	bne.n	8004378 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	691a      	ldr	r2, [r3, #16]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	615a      	str	r2, [r3, #20]
}
 800437e:	bf00      	nop
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40012c00 	.word	0x40012c00
 8004390:	40000400 	.word	0x40000400
 8004394:	40000800 	.word	0x40000800
 8004398:	40000c00 	.word	0x40000c00
 800439c:	40013400 	.word	0x40013400
 80043a0:	40014000 	.word	0x40014000
 80043a4:	40014400 	.word	0x40014400
 80043a8:	40014800 	.word	0x40014800

080043ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e040      	b.n	8004440 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7fc fc6e 	bl	8000cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2224      	movs	r2, #36	; 0x24
 80043d8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0201 	bic.w	r2, r2, #1
 80043e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f82c 	bl	8004448 <UART_SetConfig>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e022      	b.n	8004440 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 faaa 	bl	800495c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004416:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004426:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 fb31 	bl	8004aa0 <UART_CheckIdleState>
 800443e:	4603      	mov	r3, r0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004448:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800444c:	b088      	sub	sp, #32
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	4313      	orrs	r3, r2
 800446c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	4bac      	ldr	r3, [pc, #688]	; (8004728 <UART_SetConfig+0x2e0>)
 8004476:	4013      	ands	r3, r2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	69f9      	ldr	r1, [r7, #28]
 800447e:	430b      	orrs	r3, r1
 8004480:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4aa2      	ldr	r2, [pc, #648]	; (800472c <UART_SetConfig+0x2e4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d004      	beq.n	80044b2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	69fa      	ldr	r2, [r7, #28]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a99      	ldr	r2, [pc, #612]	; (8004730 <UART_SetConfig+0x2e8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d121      	bne.n	8004514 <UART_SetConfig+0xcc>
 80044d0:	4b98      	ldr	r3, [pc, #608]	; (8004734 <UART_SetConfig+0x2ec>)
 80044d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d816      	bhi.n	800450c <UART_SetConfig+0xc4>
 80044de:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <UART_SetConfig+0x9c>)
 80044e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e4:	080044f5 	.word	0x080044f5
 80044e8:	08004501 	.word	0x08004501
 80044ec:	080044fb 	.word	0x080044fb
 80044f0:	08004507 	.word	0x08004507
 80044f4:	2301      	movs	r3, #1
 80044f6:	76fb      	strb	r3, [r7, #27]
 80044f8:	e0e8      	b.n	80046cc <UART_SetConfig+0x284>
 80044fa:	2302      	movs	r3, #2
 80044fc:	76fb      	strb	r3, [r7, #27]
 80044fe:	e0e5      	b.n	80046cc <UART_SetConfig+0x284>
 8004500:	2304      	movs	r3, #4
 8004502:	76fb      	strb	r3, [r7, #27]
 8004504:	e0e2      	b.n	80046cc <UART_SetConfig+0x284>
 8004506:	2308      	movs	r3, #8
 8004508:	76fb      	strb	r3, [r7, #27]
 800450a:	e0df      	b.n	80046cc <UART_SetConfig+0x284>
 800450c:	2310      	movs	r3, #16
 800450e:	76fb      	strb	r3, [r7, #27]
 8004510:	bf00      	nop
 8004512:	e0db      	b.n	80046cc <UART_SetConfig+0x284>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a87      	ldr	r2, [pc, #540]	; (8004738 <UART_SetConfig+0x2f0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d134      	bne.n	8004588 <UART_SetConfig+0x140>
 800451e:	4b85      	ldr	r3, [pc, #532]	; (8004734 <UART_SetConfig+0x2ec>)
 8004520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004524:	f003 030c 	and.w	r3, r3, #12
 8004528:	2b0c      	cmp	r3, #12
 800452a:	d829      	bhi.n	8004580 <UART_SetConfig+0x138>
 800452c:	a201      	add	r2, pc, #4	; (adr r2, 8004534 <UART_SetConfig+0xec>)
 800452e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004532:	bf00      	nop
 8004534:	08004569 	.word	0x08004569
 8004538:	08004581 	.word	0x08004581
 800453c:	08004581 	.word	0x08004581
 8004540:	08004581 	.word	0x08004581
 8004544:	08004575 	.word	0x08004575
 8004548:	08004581 	.word	0x08004581
 800454c:	08004581 	.word	0x08004581
 8004550:	08004581 	.word	0x08004581
 8004554:	0800456f 	.word	0x0800456f
 8004558:	08004581 	.word	0x08004581
 800455c:	08004581 	.word	0x08004581
 8004560:	08004581 	.word	0x08004581
 8004564:	0800457b 	.word	0x0800457b
 8004568:	2300      	movs	r3, #0
 800456a:	76fb      	strb	r3, [r7, #27]
 800456c:	e0ae      	b.n	80046cc <UART_SetConfig+0x284>
 800456e:	2302      	movs	r3, #2
 8004570:	76fb      	strb	r3, [r7, #27]
 8004572:	e0ab      	b.n	80046cc <UART_SetConfig+0x284>
 8004574:	2304      	movs	r3, #4
 8004576:	76fb      	strb	r3, [r7, #27]
 8004578:	e0a8      	b.n	80046cc <UART_SetConfig+0x284>
 800457a:	2308      	movs	r3, #8
 800457c:	76fb      	strb	r3, [r7, #27]
 800457e:	e0a5      	b.n	80046cc <UART_SetConfig+0x284>
 8004580:	2310      	movs	r3, #16
 8004582:	76fb      	strb	r3, [r7, #27]
 8004584:	bf00      	nop
 8004586:	e0a1      	b.n	80046cc <UART_SetConfig+0x284>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a6b      	ldr	r2, [pc, #428]	; (800473c <UART_SetConfig+0x2f4>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d120      	bne.n	80045d4 <UART_SetConfig+0x18c>
 8004592:	4b68      	ldr	r3, [pc, #416]	; (8004734 <UART_SetConfig+0x2ec>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004598:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800459c:	2b10      	cmp	r3, #16
 800459e:	d00f      	beq.n	80045c0 <UART_SetConfig+0x178>
 80045a0:	2b10      	cmp	r3, #16
 80045a2:	d802      	bhi.n	80045aa <UART_SetConfig+0x162>
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <UART_SetConfig+0x16c>
 80045a8:	e010      	b.n	80045cc <UART_SetConfig+0x184>
 80045aa:	2b20      	cmp	r3, #32
 80045ac:	d005      	beq.n	80045ba <UART_SetConfig+0x172>
 80045ae:	2b30      	cmp	r3, #48	; 0x30
 80045b0:	d009      	beq.n	80045c6 <UART_SetConfig+0x17e>
 80045b2:	e00b      	b.n	80045cc <UART_SetConfig+0x184>
 80045b4:	2300      	movs	r3, #0
 80045b6:	76fb      	strb	r3, [r7, #27]
 80045b8:	e088      	b.n	80046cc <UART_SetConfig+0x284>
 80045ba:	2302      	movs	r3, #2
 80045bc:	76fb      	strb	r3, [r7, #27]
 80045be:	e085      	b.n	80046cc <UART_SetConfig+0x284>
 80045c0:	2304      	movs	r3, #4
 80045c2:	76fb      	strb	r3, [r7, #27]
 80045c4:	e082      	b.n	80046cc <UART_SetConfig+0x284>
 80045c6:	2308      	movs	r3, #8
 80045c8:	76fb      	strb	r3, [r7, #27]
 80045ca:	e07f      	b.n	80046cc <UART_SetConfig+0x284>
 80045cc:	2310      	movs	r3, #16
 80045ce:	76fb      	strb	r3, [r7, #27]
 80045d0:	bf00      	nop
 80045d2:	e07b      	b.n	80046cc <UART_SetConfig+0x284>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a59      	ldr	r2, [pc, #356]	; (8004740 <UART_SetConfig+0x2f8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d120      	bne.n	8004620 <UART_SetConfig+0x1d8>
 80045de:	4b55      	ldr	r3, [pc, #340]	; (8004734 <UART_SetConfig+0x2ec>)
 80045e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045e8:	2b40      	cmp	r3, #64	; 0x40
 80045ea:	d00f      	beq.n	800460c <UART_SetConfig+0x1c4>
 80045ec:	2b40      	cmp	r3, #64	; 0x40
 80045ee:	d802      	bhi.n	80045f6 <UART_SetConfig+0x1ae>
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <UART_SetConfig+0x1b8>
 80045f4:	e010      	b.n	8004618 <UART_SetConfig+0x1d0>
 80045f6:	2b80      	cmp	r3, #128	; 0x80
 80045f8:	d005      	beq.n	8004606 <UART_SetConfig+0x1be>
 80045fa:	2bc0      	cmp	r3, #192	; 0xc0
 80045fc:	d009      	beq.n	8004612 <UART_SetConfig+0x1ca>
 80045fe:	e00b      	b.n	8004618 <UART_SetConfig+0x1d0>
 8004600:	2300      	movs	r3, #0
 8004602:	76fb      	strb	r3, [r7, #27]
 8004604:	e062      	b.n	80046cc <UART_SetConfig+0x284>
 8004606:	2302      	movs	r3, #2
 8004608:	76fb      	strb	r3, [r7, #27]
 800460a:	e05f      	b.n	80046cc <UART_SetConfig+0x284>
 800460c:	2304      	movs	r3, #4
 800460e:	76fb      	strb	r3, [r7, #27]
 8004610:	e05c      	b.n	80046cc <UART_SetConfig+0x284>
 8004612:	2308      	movs	r3, #8
 8004614:	76fb      	strb	r3, [r7, #27]
 8004616:	e059      	b.n	80046cc <UART_SetConfig+0x284>
 8004618:	2310      	movs	r3, #16
 800461a:	76fb      	strb	r3, [r7, #27]
 800461c:	bf00      	nop
 800461e:	e055      	b.n	80046cc <UART_SetConfig+0x284>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a47      	ldr	r2, [pc, #284]	; (8004744 <UART_SetConfig+0x2fc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d124      	bne.n	8004674 <UART_SetConfig+0x22c>
 800462a:	4b42      	ldr	r3, [pc, #264]	; (8004734 <UART_SetConfig+0x2ec>)
 800462c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004638:	d012      	beq.n	8004660 <UART_SetConfig+0x218>
 800463a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800463e:	d802      	bhi.n	8004646 <UART_SetConfig+0x1fe>
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <UART_SetConfig+0x20c>
 8004644:	e012      	b.n	800466c <UART_SetConfig+0x224>
 8004646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800464a:	d006      	beq.n	800465a <UART_SetConfig+0x212>
 800464c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004650:	d009      	beq.n	8004666 <UART_SetConfig+0x21e>
 8004652:	e00b      	b.n	800466c <UART_SetConfig+0x224>
 8004654:	2300      	movs	r3, #0
 8004656:	76fb      	strb	r3, [r7, #27]
 8004658:	e038      	b.n	80046cc <UART_SetConfig+0x284>
 800465a:	2302      	movs	r3, #2
 800465c:	76fb      	strb	r3, [r7, #27]
 800465e:	e035      	b.n	80046cc <UART_SetConfig+0x284>
 8004660:	2304      	movs	r3, #4
 8004662:	76fb      	strb	r3, [r7, #27]
 8004664:	e032      	b.n	80046cc <UART_SetConfig+0x284>
 8004666:	2308      	movs	r3, #8
 8004668:	76fb      	strb	r3, [r7, #27]
 800466a:	e02f      	b.n	80046cc <UART_SetConfig+0x284>
 800466c:	2310      	movs	r3, #16
 800466e:	76fb      	strb	r3, [r7, #27]
 8004670:	bf00      	nop
 8004672:	e02b      	b.n	80046cc <UART_SetConfig+0x284>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a2c      	ldr	r2, [pc, #176]	; (800472c <UART_SetConfig+0x2e4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d124      	bne.n	80046c8 <UART_SetConfig+0x280>
 800467e:	4b2d      	ldr	r3, [pc, #180]	; (8004734 <UART_SetConfig+0x2ec>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800468c:	d012      	beq.n	80046b4 <UART_SetConfig+0x26c>
 800468e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004692:	d802      	bhi.n	800469a <UART_SetConfig+0x252>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d007      	beq.n	80046a8 <UART_SetConfig+0x260>
 8004698:	e012      	b.n	80046c0 <UART_SetConfig+0x278>
 800469a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800469e:	d006      	beq.n	80046ae <UART_SetConfig+0x266>
 80046a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046a4:	d009      	beq.n	80046ba <UART_SetConfig+0x272>
 80046a6:	e00b      	b.n	80046c0 <UART_SetConfig+0x278>
 80046a8:	2300      	movs	r3, #0
 80046aa:	76fb      	strb	r3, [r7, #27]
 80046ac:	e00e      	b.n	80046cc <UART_SetConfig+0x284>
 80046ae:	2302      	movs	r3, #2
 80046b0:	76fb      	strb	r3, [r7, #27]
 80046b2:	e00b      	b.n	80046cc <UART_SetConfig+0x284>
 80046b4:	2304      	movs	r3, #4
 80046b6:	76fb      	strb	r3, [r7, #27]
 80046b8:	e008      	b.n	80046cc <UART_SetConfig+0x284>
 80046ba:	2308      	movs	r3, #8
 80046bc:	76fb      	strb	r3, [r7, #27]
 80046be:	e005      	b.n	80046cc <UART_SetConfig+0x284>
 80046c0:	2310      	movs	r3, #16
 80046c2:	76fb      	strb	r3, [r7, #27]
 80046c4:	bf00      	nop
 80046c6:	e001      	b.n	80046cc <UART_SetConfig+0x284>
 80046c8:	2310      	movs	r3, #16
 80046ca:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a16      	ldr	r2, [pc, #88]	; (800472c <UART_SetConfig+0x2e4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	f040 8087 	bne.w	80047e6 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046d8:	7efb      	ldrb	r3, [r7, #27]
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d836      	bhi.n	800474c <UART_SetConfig+0x304>
 80046de:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <UART_SetConfig+0x29c>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	08004709 	.word	0x08004709
 80046e8:	0800474d 	.word	0x0800474d
 80046ec:	08004711 	.word	0x08004711
 80046f0:	0800474d 	.word	0x0800474d
 80046f4:	08004717 	.word	0x08004717
 80046f8:	0800474d 	.word	0x0800474d
 80046fc:	0800474d 	.word	0x0800474d
 8004700:	0800474d 	.word	0x0800474d
 8004704:	0800471f 	.word	0x0800471f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004708:	f7fe ffba 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 800470c:	6178      	str	r0, [r7, #20]
        break;
 800470e:	e022      	b.n	8004756 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004710:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <UART_SetConfig+0x300>)
 8004712:	617b      	str	r3, [r7, #20]
        break;
 8004714:	e01f      	b.n	8004756 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004716:	f7fe ff1d 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 800471a:	6178      	str	r0, [r7, #20]
        break;
 800471c:	e01b      	b.n	8004756 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800471e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004722:	617b      	str	r3, [r7, #20]
        break;
 8004724:	e017      	b.n	8004756 <UART_SetConfig+0x30e>
 8004726:	bf00      	nop
 8004728:	efff69f3 	.word	0xefff69f3
 800472c:	40008000 	.word	0x40008000
 8004730:	40013800 	.word	0x40013800
 8004734:	40021000 	.word	0x40021000
 8004738:	40004400 	.word	0x40004400
 800473c:	40004800 	.word	0x40004800
 8004740:	40004c00 	.word	0x40004c00
 8004744:	40005000 	.word	0x40005000
 8004748:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	76bb      	strb	r3, [r7, #26]
        break;
 8004754:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 80f1 	beq.w	8004940 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	4613      	mov	r3, r2
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	4413      	add	r3, r2
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	429a      	cmp	r2, r3
 800476c:	d305      	bcc.n	800477a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	429a      	cmp	r2, r3
 8004778:	d902      	bls.n	8004780 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	76bb      	strb	r3, [r7, #26]
 800477e:	e0df      	b.n	8004940 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	4619      	mov	r1, r3
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	f04f 0400 	mov.w	r4, #0
 8004790:	0214      	lsls	r4, r2, #8
 8004792:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004796:	020b      	lsls	r3, r1, #8
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6852      	ldr	r2, [r2, #4]
 800479c:	0852      	lsrs	r2, r2, #1
 800479e:	4611      	mov	r1, r2
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	eb13 0b01 	adds.w	fp, r3, r1
 80047a8:	eb44 0c02 	adc.w	ip, r4, r2
 80047ac:	4658      	mov	r0, fp
 80047ae:	4661      	mov	r1, ip
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f04f 0400 	mov.w	r4, #0
 80047b8:	461a      	mov	r2, r3
 80047ba:	4623      	mov	r3, r4
 80047bc:	f7fb fd04 	bl	80001c8 <__aeabi_uldivmod>
 80047c0:	4603      	mov	r3, r0
 80047c2:	460c      	mov	r4, r1
 80047c4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047cc:	d308      	bcc.n	80047e0 <UART_SetConfig+0x398>
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047d4:	d204      	bcs.n	80047e0 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	60da      	str	r2, [r3, #12]
 80047de:	e0af      	b.n	8004940 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	76bb      	strb	r3, [r7, #26]
 80047e4:	e0ac      	b.n	8004940 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ee:	d15b      	bne.n	80048a8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80047f0:	7efb      	ldrb	r3, [r7, #27]
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d827      	bhi.n	8004846 <UART_SetConfig+0x3fe>
 80047f6:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <UART_SetConfig+0x3b4>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	08004821 	.word	0x08004821
 8004800:	08004829 	.word	0x08004829
 8004804:	08004831 	.word	0x08004831
 8004808:	08004847 	.word	0x08004847
 800480c:	08004837 	.word	0x08004837
 8004810:	08004847 	.word	0x08004847
 8004814:	08004847 	.word	0x08004847
 8004818:	08004847 	.word	0x08004847
 800481c:	0800483f 	.word	0x0800483f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004820:	f7fe ff2e 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 8004824:	6178      	str	r0, [r7, #20]
        break;
 8004826:	e013      	b.n	8004850 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004828:	f7fe ff40 	bl	80036ac <HAL_RCC_GetPCLK2Freq>
 800482c:	6178      	str	r0, [r7, #20]
        break;
 800482e:	e00f      	b.n	8004850 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004830:	4b49      	ldr	r3, [pc, #292]	; (8004958 <UART_SetConfig+0x510>)
 8004832:	617b      	str	r3, [r7, #20]
        break;
 8004834:	e00c      	b.n	8004850 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004836:	f7fe fe8d 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 800483a:	6178      	str	r0, [r7, #20]
        break;
 800483c:	e008      	b.n	8004850 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800483e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004842:	617b      	str	r3, [r7, #20]
        break;
 8004844:	e004      	b.n	8004850 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	76bb      	strb	r3, [r7, #26]
        break;
 800484e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d074      	beq.n	8004940 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	005a      	lsls	r2, r3, #1
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	085b      	lsrs	r3, r3, #1
 8004860:	441a      	add	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	fbb2 f3f3 	udiv	r3, r2, r3
 800486a:	b29b      	uxth	r3, r3
 800486c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	2b0f      	cmp	r3, #15
 8004872:	d916      	bls.n	80048a2 <UART_SetConfig+0x45a>
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800487a:	d212      	bcs.n	80048a2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	b29b      	uxth	r3, r3
 8004880:	f023 030f 	bic.w	r3, r3, #15
 8004884:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	085b      	lsrs	r3, r3, #1
 800488a:	b29b      	uxth	r3, r3
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	b29a      	uxth	r2, r3
 8004892:	89fb      	ldrh	r3, [r7, #14]
 8004894:	4313      	orrs	r3, r2
 8004896:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	89fa      	ldrh	r2, [r7, #14]
 800489e:	60da      	str	r2, [r3, #12]
 80048a0:	e04e      	b.n	8004940 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	76bb      	strb	r3, [r7, #26]
 80048a6:	e04b      	b.n	8004940 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048a8:	7efb      	ldrb	r3, [r7, #27]
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d827      	bhi.n	80048fe <UART_SetConfig+0x4b6>
 80048ae:	a201      	add	r2, pc, #4	; (adr r2, 80048b4 <UART_SetConfig+0x46c>)
 80048b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b4:	080048d9 	.word	0x080048d9
 80048b8:	080048e1 	.word	0x080048e1
 80048bc:	080048e9 	.word	0x080048e9
 80048c0:	080048ff 	.word	0x080048ff
 80048c4:	080048ef 	.word	0x080048ef
 80048c8:	080048ff 	.word	0x080048ff
 80048cc:	080048ff 	.word	0x080048ff
 80048d0:	080048ff 	.word	0x080048ff
 80048d4:	080048f7 	.word	0x080048f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d8:	f7fe fed2 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 80048dc:	6178      	str	r0, [r7, #20]
        break;
 80048de:	e013      	b.n	8004908 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048e0:	f7fe fee4 	bl	80036ac <HAL_RCC_GetPCLK2Freq>
 80048e4:	6178      	str	r0, [r7, #20]
        break;
 80048e6:	e00f      	b.n	8004908 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048e8:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <UART_SetConfig+0x510>)
 80048ea:	617b      	str	r3, [r7, #20]
        break;
 80048ec:	e00c      	b.n	8004908 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ee:	f7fe fe31 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 80048f2:	6178      	str	r0, [r7, #20]
        break;
 80048f4:	e008      	b.n	8004908 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048fa:	617b      	str	r3, [r7, #20]
        break;
 80048fc:	e004      	b.n	8004908 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	76bb      	strb	r3, [r7, #26]
        break;
 8004906:	bf00      	nop
    }

    if (pclk != 0U)
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d018      	beq.n	8004940 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	085a      	lsrs	r2, r3, #1
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	441a      	add	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004920:	b29b      	uxth	r3, r3
 8004922:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	2b0f      	cmp	r3, #15
 8004928:	d908      	bls.n	800493c <UART_SetConfig+0x4f4>
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004930:	d204      	bcs.n	800493c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	60da      	str	r2, [r3, #12]
 800493a:	e001      	b.n	8004940 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800494c:	7ebb      	ldrb	r3, [r7, #26]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3720      	adds	r7, #32
 8004952:	46bd      	mov	sp, r7
 8004954:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004958:	00f42400 	.word	0x00f42400

0800495c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01a      	beq.n	8004a72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a5a:	d10a      	bne.n	8004a72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	605a      	str	r2, [r3, #4]
  }
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004aae:	f7fc fa93 	bl	8000fd8 <HAL_GetTick>
 8004ab2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d10e      	bne.n	8004ae0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f82a 	bl	8004b2a <UART_WaitOnFlagUntilTimeout>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e020      	b.n	8004b22 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0304 	and.w	r3, r3, #4
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d10e      	bne.n	8004b0c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f814 	bl	8004b2a <UART_WaitOnFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e00a      	b.n	8004b22 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	603b      	str	r3, [r7, #0]
 8004b36:	4613      	mov	r3, r2
 8004b38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b3a:	e05d      	b.n	8004bf8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b42:	d059      	beq.n	8004bf8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b44:	f7fc fa48 	bl	8000fd8 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d302      	bcc.n	8004b5a <UART_WaitOnFlagUntilTimeout+0x30>
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d11b      	bne.n	8004b92 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b68:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0201 	bic.w	r2, r2, #1
 8004b78:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2220      	movs	r2, #32
 8004b84:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e042      	b.n	8004c18 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d02b      	beq.n	8004bf8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bae:	d123      	bne.n	8004bf8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bb8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bc8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0201 	bic.w	r2, r2, #1
 8004bd8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2220      	movs	r2, #32
 8004bea:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e00f      	b.n	8004c18 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	69da      	ldr	r2, [r3, #28]
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4013      	ands	r3, r2
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	bf0c      	ite	eq
 8004c08:	2301      	moveq	r3, #1
 8004c0a:	2300      	movne	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d092      	beq.n	8004b3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <_Znaj>:
 8004c20:	f000 b802 	b.w	8004c28 <_Znwj>

08004c24 <_ZdlPvj>:
 8004c24:	f000 b81a 	b.w	8004c5c <_ZdlPv>

08004c28 <_Znwj>:
 8004c28:	b510      	push	{r4, lr}
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	bf14      	ite	ne
 8004c2e:	4604      	movne	r4, r0
 8004c30:	2401      	moveq	r4, #1
 8004c32:	4620      	mov	r0, r4
 8004c34:	f000 f846 	bl	8004cc4 <malloc>
 8004c38:	b930      	cbnz	r0, 8004c48 <_Znwj+0x20>
 8004c3a:	f000 f807 	bl	8004c4c <_ZSt15get_new_handlerv>
 8004c3e:	b908      	cbnz	r0, 8004c44 <_Znwj+0x1c>
 8004c40:	f000 f80e 	bl	8004c60 <abort>
 8004c44:	4780      	blx	r0
 8004c46:	e7f4      	b.n	8004c32 <_Znwj+0xa>
 8004c48:	bd10      	pop	{r4, pc}
	...

08004c4c <_ZSt15get_new_handlerv>:
 8004c4c:	4b02      	ldr	r3, [pc, #8]	; (8004c58 <_ZSt15get_new_handlerv+0xc>)
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	f3bf 8f5b 	dmb	ish
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	200001d4 	.word	0x200001d4

08004c5c <_ZdlPv>:
 8004c5c:	f000 b83a 	b.w	8004cd4 <free>

08004c60 <abort>:
 8004c60:	b508      	push	{r3, lr}
 8004c62:	2006      	movs	r0, #6
 8004c64:	f000 f926 	bl	8004eb4 <raise>
 8004c68:	2001      	movs	r0, #1
 8004c6a:	f7fc f8a5 	bl	8000db8 <_exit>
	...

08004c70 <__errno>:
 8004c70:	4b01      	ldr	r3, [pc, #4]	; (8004c78 <__errno+0x8>)
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	2000000c 	.word	0x2000000c

08004c7c <__libc_init_array>:
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	4e0d      	ldr	r6, [pc, #52]	; (8004cb4 <__libc_init_array+0x38>)
 8004c80:	4c0d      	ldr	r4, [pc, #52]	; (8004cb8 <__libc_init_array+0x3c>)
 8004c82:	1ba4      	subs	r4, r4, r6
 8004c84:	10a4      	asrs	r4, r4, #2
 8004c86:	2500      	movs	r5, #0
 8004c88:	42a5      	cmp	r5, r4
 8004c8a:	d109      	bne.n	8004ca0 <__libc_init_array+0x24>
 8004c8c:	4e0b      	ldr	r6, [pc, #44]	; (8004cbc <__libc_init_array+0x40>)
 8004c8e:	4c0c      	ldr	r4, [pc, #48]	; (8004cc0 <__libc_init_array+0x44>)
 8004c90:	f000 f92e 	bl	8004ef0 <_init>
 8004c94:	1ba4      	subs	r4, r4, r6
 8004c96:	10a4      	asrs	r4, r4, #2
 8004c98:	2500      	movs	r5, #0
 8004c9a:	42a5      	cmp	r5, r4
 8004c9c:	d105      	bne.n	8004caa <__libc_init_array+0x2e>
 8004c9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ca0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ca4:	4798      	blx	r3
 8004ca6:	3501      	adds	r5, #1
 8004ca8:	e7ee      	b.n	8004c88 <__libc_init_array+0xc>
 8004caa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cae:	4798      	blx	r3
 8004cb0:	3501      	adds	r5, #1
 8004cb2:	e7f2      	b.n	8004c9a <__libc_init_array+0x1e>
 8004cb4:	08004f68 	.word	0x08004f68
 8004cb8:	08004f68 	.word	0x08004f68
 8004cbc:	08004f68 	.word	0x08004f68
 8004cc0:	08004f6c 	.word	0x08004f6c

08004cc4 <malloc>:
 8004cc4:	4b02      	ldr	r3, [pc, #8]	; (8004cd0 <malloc+0xc>)
 8004cc6:	4601      	mov	r1, r0
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	f000 b861 	b.w	8004d90 <_malloc_r>
 8004cce:	bf00      	nop
 8004cd0:	2000000c 	.word	0x2000000c

08004cd4 <free>:
 8004cd4:	4b02      	ldr	r3, [pc, #8]	; (8004ce0 <free+0xc>)
 8004cd6:	4601      	mov	r1, r0
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	f000 b80b 	b.w	8004cf4 <_free_r>
 8004cde:	bf00      	nop
 8004ce0:	2000000c 	.word	0x2000000c

08004ce4 <memset>:
 8004ce4:	4402      	add	r2, r0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d100      	bne.n	8004cee <memset+0xa>
 8004cec:	4770      	bx	lr
 8004cee:	f803 1b01 	strb.w	r1, [r3], #1
 8004cf2:	e7f9      	b.n	8004ce8 <memset+0x4>

08004cf4 <_free_r>:
 8004cf4:	b538      	push	{r3, r4, r5, lr}
 8004cf6:	4605      	mov	r5, r0
 8004cf8:	2900      	cmp	r1, #0
 8004cfa:	d045      	beq.n	8004d88 <_free_r+0x94>
 8004cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d00:	1f0c      	subs	r4, r1, #4
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	bfb8      	it	lt
 8004d06:	18e4      	addlt	r4, r4, r3
 8004d08:	f000 f8f0 	bl	8004eec <__malloc_lock>
 8004d0c:	4a1f      	ldr	r2, [pc, #124]	; (8004d8c <_free_r+0x98>)
 8004d0e:	6813      	ldr	r3, [r2, #0]
 8004d10:	4610      	mov	r0, r2
 8004d12:	b933      	cbnz	r3, 8004d22 <_free_r+0x2e>
 8004d14:	6063      	str	r3, [r4, #4]
 8004d16:	6014      	str	r4, [r2, #0]
 8004d18:	4628      	mov	r0, r5
 8004d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d1e:	f000 b8e6 	b.w	8004eee <__malloc_unlock>
 8004d22:	42a3      	cmp	r3, r4
 8004d24:	d90c      	bls.n	8004d40 <_free_r+0x4c>
 8004d26:	6821      	ldr	r1, [r4, #0]
 8004d28:	1862      	adds	r2, r4, r1
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	bf04      	itt	eq
 8004d2e:	681a      	ldreq	r2, [r3, #0]
 8004d30:	685b      	ldreq	r3, [r3, #4]
 8004d32:	6063      	str	r3, [r4, #4]
 8004d34:	bf04      	itt	eq
 8004d36:	1852      	addeq	r2, r2, r1
 8004d38:	6022      	streq	r2, [r4, #0]
 8004d3a:	6004      	str	r4, [r0, #0]
 8004d3c:	e7ec      	b.n	8004d18 <_free_r+0x24>
 8004d3e:	4613      	mov	r3, r2
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	b10a      	cbz	r2, 8004d48 <_free_r+0x54>
 8004d44:	42a2      	cmp	r2, r4
 8004d46:	d9fa      	bls.n	8004d3e <_free_r+0x4a>
 8004d48:	6819      	ldr	r1, [r3, #0]
 8004d4a:	1858      	adds	r0, r3, r1
 8004d4c:	42a0      	cmp	r0, r4
 8004d4e:	d10b      	bne.n	8004d68 <_free_r+0x74>
 8004d50:	6820      	ldr	r0, [r4, #0]
 8004d52:	4401      	add	r1, r0
 8004d54:	1858      	adds	r0, r3, r1
 8004d56:	4282      	cmp	r2, r0
 8004d58:	6019      	str	r1, [r3, #0]
 8004d5a:	d1dd      	bne.n	8004d18 <_free_r+0x24>
 8004d5c:	6810      	ldr	r0, [r2, #0]
 8004d5e:	6852      	ldr	r2, [r2, #4]
 8004d60:	605a      	str	r2, [r3, #4]
 8004d62:	4401      	add	r1, r0
 8004d64:	6019      	str	r1, [r3, #0]
 8004d66:	e7d7      	b.n	8004d18 <_free_r+0x24>
 8004d68:	d902      	bls.n	8004d70 <_free_r+0x7c>
 8004d6a:	230c      	movs	r3, #12
 8004d6c:	602b      	str	r3, [r5, #0]
 8004d6e:	e7d3      	b.n	8004d18 <_free_r+0x24>
 8004d70:	6820      	ldr	r0, [r4, #0]
 8004d72:	1821      	adds	r1, r4, r0
 8004d74:	428a      	cmp	r2, r1
 8004d76:	bf04      	itt	eq
 8004d78:	6811      	ldreq	r1, [r2, #0]
 8004d7a:	6852      	ldreq	r2, [r2, #4]
 8004d7c:	6062      	str	r2, [r4, #4]
 8004d7e:	bf04      	itt	eq
 8004d80:	1809      	addeq	r1, r1, r0
 8004d82:	6021      	streq	r1, [r4, #0]
 8004d84:	605c      	str	r4, [r3, #4]
 8004d86:	e7c7      	b.n	8004d18 <_free_r+0x24>
 8004d88:	bd38      	pop	{r3, r4, r5, pc}
 8004d8a:	bf00      	nop
 8004d8c:	200001d8 	.word	0x200001d8

08004d90 <_malloc_r>:
 8004d90:	b570      	push	{r4, r5, r6, lr}
 8004d92:	1ccd      	adds	r5, r1, #3
 8004d94:	f025 0503 	bic.w	r5, r5, #3
 8004d98:	3508      	adds	r5, #8
 8004d9a:	2d0c      	cmp	r5, #12
 8004d9c:	bf38      	it	cc
 8004d9e:	250c      	movcc	r5, #12
 8004da0:	2d00      	cmp	r5, #0
 8004da2:	4606      	mov	r6, r0
 8004da4:	db01      	blt.n	8004daa <_malloc_r+0x1a>
 8004da6:	42a9      	cmp	r1, r5
 8004da8:	d903      	bls.n	8004db2 <_malloc_r+0x22>
 8004daa:	230c      	movs	r3, #12
 8004dac:	6033      	str	r3, [r6, #0]
 8004dae:	2000      	movs	r0, #0
 8004db0:	bd70      	pop	{r4, r5, r6, pc}
 8004db2:	f000 f89b 	bl	8004eec <__malloc_lock>
 8004db6:	4a21      	ldr	r2, [pc, #132]	; (8004e3c <_malloc_r+0xac>)
 8004db8:	6814      	ldr	r4, [r2, #0]
 8004dba:	4621      	mov	r1, r4
 8004dbc:	b991      	cbnz	r1, 8004de4 <_malloc_r+0x54>
 8004dbe:	4c20      	ldr	r4, [pc, #128]	; (8004e40 <_malloc_r+0xb0>)
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	b91b      	cbnz	r3, 8004dcc <_malloc_r+0x3c>
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	f000 f83d 	bl	8004e44 <_sbrk_r>
 8004dca:	6020      	str	r0, [r4, #0]
 8004dcc:	4629      	mov	r1, r5
 8004dce:	4630      	mov	r0, r6
 8004dd0:	f000 f838 	bl	8004e44 <_sbrk_r>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	d124      	bne.n	8004e22 <_malloc_r+0x92>
 8004dd8:	230c      	movs	r3, #12
 8004dda:	6033      	str	r3, [r6, #0]
 8004ddc:	4630      	mov	r0, r6
 8004dde:	f000 f886 	bl	8004eee <__malloc_unlock>
 8004de2:	e7e4      	b.n	8004dae <_malloc_r+0x1e>
 8004de4:	680b      	ldr	r3, [r1, #0]
 8004de6:	1b5b      	subs	r3, r3, r5
 8004de8:	d418      	bmi.n	8004e1c <_malloc_r+0x8c>
 8004dea:	2b0b      	cmp	r3, #11
 8004dec:	d90f      	bls.n	8004e0e <_malloc_r+0x7e>
 8004dee:	600b      	str	r3, [r1, #0]
 8004df0:	50cd      	str	r5, [r1, r3]
 8004df2:	18cc      	adds	r4, r1, r3
 8004df4:	4630      	mov	r0, r6
 8004df6:	f000 f87a 	bl	8004eee <__malloc_unlock>
 8004dfa:	f104 000b 	add.w	r0, r4, #11
 8004dfe:	1d23      	adds	r3, r4, #4
 8004e00:	f020 0007 	bic.w	r0, r0, #7
 8004e04:	1ac3      	subs	r3, r0, r3
 8004e06:	d0d3      	beq.n	8004db0 <_malloc_r+0x20>
 8004e08:	425a      	negs	r2, r3
 8004e0a:	50e2      	str	r2, [r4, r3]
 8004e0c:	e7d0      	b.n	8004db0 <_malloc_r+0x20>
 8004e0e:	428c      	cmp	r4, r1
 8004e10:	684b      	ldr	r3, [r1, #4]
 8004e12:	bf16      	itet	ne
 8004e14:	6063      	strne	r3, [r4, #4]
 8004e16:	6013      	streq	r3, [r2, #0]
 8004e18:	460c      	movne	r4, r1
 8004e1a:	e7eb      	b.n	8004df4 <_malloc_r+0x64>
 8004e1c:	460c      	mov	r4, r1
 8004e1e:	6849      	ldr	r1, [r1, #4]
 8004e20:	e7cc      	b.n	8004dbc <_malloc_r+0x2c>
 8004e22:	1cc4      	adds	r4, r0, #3
 8004e24:	f024 0403 	bic.w	r4, r4, #3
 8004e28:	42a0      	cmp	r0, r4
 8004e2a:	d005      	beq.n	8004e38 <_malloc_r+0xa8>
 8004e2c:	1a21      	subs	r1, r4, r0
 8004e2e:	4630      	mov	r0, r6
 8004e30:	f000 f808 	bl	8004e44 <_sbrk_r>
 8004e34:	3001      	adds	r0, #1
 8004e36:	d0cf      	beq.n	8004dd8 <_malloc_r+0x48>
 8004e38:	6025      	str	r5, [r4, #0]
 8004e3a:	e7db      	b.n	8004df4 <_malloc_r+0x64>
 8004e3c:	200001d8 	.word	0x200001d8
 8004e40:	200001dc 	.word	0x200001dc

08004e44 <_sbrk_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	4c06      	ldr	r4, [pc, #24]	; (8004e60 <_sbrk_r+0x1c>)
 8004e48:	2300      	movs	r3, #0
 8004e4a:	4605      	mov	r5, r0
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	6023      	str	r3, [r4, #0]
 8004e50:	f7fb ffbc 	bl	8000dcc <_sbrk>
 8004e54:	1c43      	adds	r3, r0, #1
 8004e56:	d102      	bne.n	8004e5e <_sbrk_r+0x1a>
 8004e58:	6823      	ldr	r3, [r4, #0]
 8004e5a:	b103      	cbz	r3, 8004e5e <_sbrk_r+0x1a>
 8004e5c:	602b      	str	r3, [r5, #0]
 8004e5e:	bd38      	pop	{r3, r4, r5, pc}
 8004e60:	200001e4 	.word	0x200001e4

08004e64 <_raise_r>:
 8004e64:	291f      	cmp	r1, #31
 8004e66:	b538      	push	{r3, r4, r5, lr}
 8004e68:	4604      	mov	r4, r0
 8004e6a:	460d      	mov	r5, r1
 8004e6c:	d904      	bls.n	8004e78 <_raise_r+0x14>
 8004e6e:	2316      	movs	r3, #22
 8004e70:	6003      	str	r3, [r0, #0]
 8004e72:	f04f 30ff 	mov.w	r0, #4294967295
 8004e76:	bd38      	pop	{r3, r4, r5, pc}
 8004e78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004e7a:	b112      	cbz	r2, 8004e82 <_raise_r+0x1e>
 8004e7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004e80:	b94b      	cbnz	r3, 8004e96 <_raise_r+0x32>
 8004e82:	4620      	mov	r0, r4
 8004e84:	f000 f830 	bl	8004ee8 <_getpid_r>
 8004e88:	462a      	mov	r2, r5
 8004e8a:	4601      	mov	r1, r0
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e92:	f000 b817 	b.w	8004ec4 <_kill_r>
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d00a      	beq.n	8004eb0 <_raise_r+0x4c>
 8004e9a:	1c59      	adds	r1, r3, #1
 8004e9c:	d103      	bne.n	8004ea6 <_raise_r+0x42>
 8004e9e:	2316      	movs	r3, #22
 8004ea0:	6003      	str	r3, [r0, #0]
 8004ea2:	2001      	movs	r0, #1
 8004ea4:	e7e7      	b.n	8004e76 <_raise_r+0x12>
 8004ea6:	2400      	movs	r4, #0
 8004ea8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004eac:	4628      	mov	r0, r5
 8004eae:	4798      	blx	r3
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	e7e0      	b.n	8004e76 <_raise_r+0x12>

08004eb4 <raise>:
 8004eb4:	4b02      	ldr	r3, [pc, #8]	; (8004ec0 <raise+0xc>)
 8004eb6:	4601      	mov	r1, r0
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	f7ff bfd3 	b.w	8004e64 <_raise_r>
 8004ebe:	bf00      	nop
 8004ec0:	2000000c 	.word	0x2000000c

08004ec4 <_kill_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	4c07      	ldr	r4, [pc, #28]	; (8004ee4 <_kill_r+0x20>)
 8004ec8:	2300      	movs	r3, #0
 8004eca:	4605      	mov	r5, r0
 8004ecc:	4608      	mov	r0, r1
 8004ece:	4611      	mov	r1, r2
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	f7fb ff61 	bl	8000d98 <_kill>
 8004ed6:	1c43      	adds	r3, r0, #1
 8004ed8:	d102      	bne.n	8004ee0 <_kill_r+0x1c>
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	b103      	cbz	r3, 8004ee0 <_kill_r+0x1c>
 8004ede:	602b      	str	r3, [r5, #0]
 8004ee0:	bd38      	pop	{r3, r4, r5, pc}
 8004ee2:	bf00      	nop
 8004ee4:	200001e4 	.word	0x200001e4

08004ee8 <_getpid_r>:
 8004ee8:	f7fb bf4e 	b.w	8000d88 <_getpid>

08004eec <__malloc_lock>:
 8004eec:	4770      	bx	lr

08004eee <__malloc_unlock>:
 8004eee:	4770      	bx	lr

08004ef0 <_init>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	bf00      	nop
 8004ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef6:	bc08      	pop	{r3}
 8004ef8:	469e      	mov	lr, r3
 8004efa:	4770      	bx	lr

08004efc <_fini>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	bf00      	nop
 8004f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f02:	bc08      	pop	{r3}
 8004f04:	469e      	mov	lr, r3
 8004f06:	4770      	bx	lr
