
sender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005310  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080054a0  080054a0  000154a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005584  08005584  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005584  08005584  00015584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800558c  0800558c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800558c  0800558c  0001558c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005590  08005590  00015590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000070  08005604  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08005604  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b95  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000236c  00000000  00000000  00033c35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011c8  00000000  00000000  00035fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010b0  00000000  00000000  00037170  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b1df  00000000  00000000  00038220  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dfeb  00000000  00000000  000633ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00109181  00000000  00000000  000713ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017a56b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005000  00000000  00000000  0017a5e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005488 	.word	0x08005488

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005488 	.word	0x08005488

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <_ZN16ESP8266Interface4IsOKEv>:
 *      Author: BCAMPAGN
 */

#include "ESP8266Interface.hpp"

bool ESP8266Interface::IsOK(){
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	char ok[] = "OK";
 8000578:	4a11      	ldr	r2, [pc, #68]	; (80005c0 <_ZN16ESP8266Interface4IsOKEv+0x50>)
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	6812      	ldr	r2, [r2, #0]
 8000580:	4611      	mov	r1, r2
 8000582:	8019      	strh	r1, [r3, #0]
 8000584:	3302      	adds	r3, #2
 8000586:	0c12      	lsrs	r2, r2, #16
 8000588:	701a      	strb	r2, [r3, #0]
	char response[20];
	HAL_UART_Receive(ESP8266_, (uint8_t *)response, sizeof(response), 1000);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6858      	ldr	r0, [r3, #4]
 800058e:	f107 0108 	add.w	r1, r7, #8
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	2214      	movs	r2, #20
 8000598:	f003 fe5f 	bl	800425a <HAL_UART_Receive>
	if(strstr(response, ok) != NULL){
 800059c:	f107 021c 	add.w	r2, r7, #28
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f004 fc26 	bl	8004df8 <strstr>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <_ZN16ESP8266Interface4IsOKEv+0x46>
		return 1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	e000      	b.n	80005b8 <_ZN16ESP8266Interface4IsOKEv+0x48>
	}
	return 0;
 80005b6:	2300      	movs	r3, #0
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3720      	adds	r7, #32
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	080054a0 	.word	0x080054a0

080005c4 <_ZN16ESP8266InterfaceC1EP20__UART_HandleTypeDef>:


ESP8266Interface::ESP8266Interface(UART_HandleTypeDef *ESP8266) {
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
 80005ce:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <_ZN16ESP8266InterfaceC1EP20__UART_HandleTypeDef+0x24>)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	ESP8266_ = ESP8266;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	683a      	ldr	r2, [r7, #0]
 80005d8:	605a      	str	r2, [r3, #4]

}
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4618      	mov	r0, r3
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	08005500 	.word	0x08005500

080005ec <_ZN16ESP8266InterfaceD1Ev>:

ESP8266Interface::~ESP8266Interface() {
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <_ZN16ESP8266InterfaceD1Ev+0x1c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4618      	mov	r0, r3
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	08005500 	.word	0x08005500

0800060c <_ZN16ESP8266InterfaceD0Ev>:
ESP8266Interface::~ESP8266Interface() {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
}
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f7ff ffe9 	bl	80005ec <_ZN16ESP8266InterfaceD1Ev>
 800061a:	2108      	movs	r1, #8
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f004 fad5 	bl	8004bcc <_ZdlPvj>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <_ZN16ESP8266Interface7StartUpEi>:

bool ESP8266Interface::StartUp(int mode){
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b08b      	sub	sp, #44	; 0x2c
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
	char command[] = "AT+CWMODE=%d\r\n";
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <_ZN16ESP8266Interface7StartUpEi+0x50>)
 8000638:	f107 0418 	add.w	r4, r7, #24
 800063c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800063e:	c407      	stmia	r4!, {r0, r1, r2}
 8000640:	8023      	strh	r3, [r4, #0]
 8000642:	3402      	adds	r4, #2
 8000644:	0c1b      	lsrs	r3, r3, #16
 8000646:	7023      	strb	r3, [r4, #0]
	char c[sizeof(command)];
	sprintf(c, command, mode);
 8000648:	f107 0118 	add.w	r1, r7, #24
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	4618      	mov	r0, r3
 8000654:	f004 fbb0 	bl	8004db8 <siprintf>
	HAL_UART_Transmit(ESP8266_,  (uint8_t *)c, sizeof(c), HAL_MAX_DELAY);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	6858      	ldr	r0, [r3, #4]
 800065c:	f107 0108 	add.w	r1, r7, #8
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
 8000664:	220f      	movs	r2, #15
 8000666:	f003 fd65 	bl	8004134 <HAL_UART_Transmit>
	return IsOK();
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f7ff ff80 	bl	8000570 <_ZN16ESP8266Interface4IsOKEv>
 8000670:	4603      	mov	r3, r0
}
 8000672:	4618      	mov	r0, r3
 8000674:	372c      	adds	r7, #44	; 0x2c
 8000676:	46bd      	mov	sp, r7
 8000678:	bd90      	pop	{r4, r7, pc}
 800067a:	bf00      	nop
 800067c:	080054a4 	.word	0x080054a4

08000680 <_ZN16ESP8266Interface5ResetEv>:


bool ESP8266Interface::Reset(){
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	char c[] = "AT+RST\r\n";
 8000688:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <_ZN16ESP8266Interface5ResetEv+0x38>)
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000690:	c303      	stmia	r3!, {r0, r1}
 8000692:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(ESP8266_,  (uint8_t *)c, sizeof(c), HAL_MAX_DELAY);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6858      	ldr	r0, [r3, #4]
 8000698:	f107 010c 	add.w	r1, r7, #12
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
 80006a0:	2209      	movs	r2, #9
 80006a2:	f003 fd47 	bl	8004134 <HAL_UART_Transmit>
	return IsOK();
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f7ff ff62 	bl	8000570 <_ZN16ESP8266Interface4IsOKEv>
 80006ac:	4603      	mov	r3, r0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	080054b4 	.word	0x080054b4

080006bc <_ZN16ESP8266Interface7ConnectEPKcS1_>:
bool ESP8266Interface::DHCP(bool enable, int mode){
	return 0;
}


bool ESP8266Interface::Connect(const char *wifiname, const char *password){
 80006bc:	b5b0      	push	{r4, r5, r7, lr}
 80006be:	b092      	sub	sp, #72	; 0x48
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
	char command[] = "AT+CWJAP=\"%s\",\"%s\"\r\n";
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <_ZN16ESP8266Interface7ConnectEPKcS1_+0x54>)
 80006ca:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80006ce:	461d      	mov	r5, r3
 80006d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006d8:	6020      	str	r0, [r4, #0]
 80006da:	3404      	adds	r4, #4
 80006dc:	7021      	strb	r1, [r4, #0]
	char c[sizeof(wifiname) + sizeof(password) + sizeof(command)];
	sprintf(c, command, wifiname, password);
 80006de:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80006e2:	f107 0010 	add.w	r0, r7, #16
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	68ba      	ldr	r2, [r7, #8]
 80006ea:	f004 fb65 	bl	8004db8 <siprintf>
	HAL_UART_Transmit(ESP8266_,  (uint8_t *)c, sizeof(c), HAL_MAX_DELAY);
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	6858      	ldr	r0, [r3, #4]
 80006f2:	f107 0110 	add.w	r1, r7, #16
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	221d      	movs	r2, #29
 80006fc:	f003 fd1a 	bl	8004134 <HAL_UART_Transmit>
	return IsOK();
 8000700:	68f8      	ldr	r0, [r7, #12]
 8000702:	f7ff ff35 	bl	8000570 <_ZN16ESP8266Interface4IsOKEv>
 8000706:	4603      	mov	r3, r0
}
 8000708:	4618      	mov	r0, r3
 800070a:	3748      	adds	r7, #72	; 0x48
 800070c:	46bd      	mov	sp, r7
 800070e:	bdb0      	pop	{r4, r5, r7, pc}
 8000710:	080054c0 	.word	0x080054c0

08000714 <_ZN16ESP8266Interface10DisconnectEv>:


bool ESP8266Interface::Disconnect(){
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	char command[] = "AT+CWQAP\r\n";
 800071c:	4a0c      	ldr	r2, [pc, #48]	; (8000750 <_ZN16ESP8266Interface10DisconnectEv+0x3c>)
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	ca07      	ldmia	r2, {r0, r1, r2}
 8000724:	c303      	stmia	r3!, {r0, r1}
 8000726:	801a      	strh	r2, [r3, #0]
 8000728:	3302      	adds	r3, #2
 800072a:	0c12      	lsrs	r2, r2, #16
 800072c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(ESP8266_,  (uint8_t *)command, sizeof(command), HAL_MAX_DELAY);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6858      	ldr	r0, [r3, #4]
 8000732:	f107 010c 	add.w	r1, r7, #12
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	220b      	movs	r2, #11
 800073c:	f003 fcfa 	bl	8004134 <HAL_UART_Transmit>
	return IsOK();
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff ff15 	bl	8000570 <_ZN16ESP8266Interface4IsOKEv>
 8000746:	4603      	mov	r3, r0
}
 8000748:	4618      	mov	r0, r3
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	080054d8 	.word	0x080054d8

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f000 fc8d 	bl	8001078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f837 	bl	80007d0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000762:	f000 f9fb 	bl	8000b5c <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8000766:	f000 f991 	bl	8000a8c <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 800076a:	f000 f9c3 	bl	8000af4 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 800076e:	f000 f8cb 	bl	8000908 <_ZL12MX_ADC1_Initv>
  MX_DAC1_Init();
 8000772:	f000 f94f 	bl	8000a14 <_ZL12MX_DAC1_Initv>
  MX_TIM16_Init();
 8000776:	f000 fa59 	bl	8000c2c <_ZL13MX_TIM16_Initv>
  //Recorder r(&htim16, &hadc1 ,&hdac1);
  //r.main();

  /* USER CODE END 2 */

  ESP8266Interface i(&huart1);
 800077a:	463b      	mov	r3, r7
 800077c:	4911      	ldr	r1, [pc, #68]	; (80007c4 <main+0x70>)
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ff20 	bl	80005c4 <_ZN16ESP8266InterfaceC1EP20__UART_HandleTypeDef>
  i.Reset();
 8000784:	463b      	mov	r3, r7
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff7a 	bl	8000680 <_ZN16ESP8266Interface5ResetEv>
  HAL_Delay(1000);
 800078c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000790:	f000 fcee 	bl	8001170 <HAL_Delay>
  i.StartUp(1);
 8000794:	463b      	mov	r3, r7
 8000796:	2101      	movs	r1, #1
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff47 	bl	800062c <_ZN16ESP8266Interface7StartUpEi>
  HAL_Delay(1000);
 800079e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a2:	f000 fce5 	bl	8001170 <HAL_Delay>
  i.Connect("Joepie", "Joepie123");
 80007a6:	463b      	mov	r3, r7
 80007a8:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <main+0x74>)
 80007aa:	4908      	ldr	r1, [pc, #32]	; (80007cc <main+0x78>)
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff85 	bl	80006bc <_ZN16ESP8266Interface7ConnectEPKcS1_>
  HAL_Delay(10000);
 80007b2:	f242 7010 	movw	r0, #10000	; 0x2710
 80007b6:	f000 fcdb 	bl	8001170 <HAL_Delay>
  i.Disconnect();
 80007ba:	463b      	mov	r3, r7
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ffa9 	bl	8000714 <_ZN16ESP8266Interface10DisconnectEv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <main+0x6e>
 80007c4:	200001d0 	.word	0x200001d0
 80007c8:	080054e4 	.word	0x080054e4
 80007cc:	080054f0 	.word	0x080054f0

080007d0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b0b8      	sub	sp, #224	; 0xe0
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007da:	2244      	movs	r2, #68	; 0x44
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f004 fa2a 	bl	8004c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f4:	463b      	mov	r3, r7
 80007f6:	2288      	movs	r2, #136	; 0x88
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f004 fa1c 	bl	8004c38 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000800:	2302      	movs	r3, #2
 8000802:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080e:	2310      	movs	r3, #16
 8000810:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000814:	2302      	movs	r3, #2
 8000816:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081a:	2302      	movs	r3, #2
 800081c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000826:	230a      	movs	r3, #10
 8000828:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800082c:	2307      	movs	r3, #7
 800082e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000832:	2302      	movs	r3, #2
 8000834:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000838:	2302      	movs	r3, #2
 800083a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000842:	4618      	mov	r0, r3
 8000844:	f002 f89c 	bl	8002980 <HAL_RCC_OscConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	bf14      	ite	ne
 800084e:	2301      	movne	r3, #1
 8000850:	2300      	moveq	r3, #0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8000858:	f000 fa14 	bl	8000c84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	230f      	movs	r3, #15
 800085e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000862:	2303      	movs	r3, #3
 8000864:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800087a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800087e:	2104      	movs	r1, #4
 8000880:	4618      	mov	r0, r3
 8000882:	f002 fc63 	bl	800314c <HAL_RCC_ClockConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	bf14      	ite	ne
 800088c:	2301      	movne	r3, #1
 800088e:	2300      	moveq	r3, #0
 8000890:	b2db      	uxtb	r3, r3
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 8000896:	f000 f9f5 	bl	8000c84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800089a:	f244 0302 	movw	r3, #16386	; 0x4002
 800089e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80008a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008a8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80008aa:	2302      	movs	r3, #2
 80008ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80008b2:	2308      	movs	r3, #8
 80008b4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80008b6:	2307      	movs	r3, #7
 80008b8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80008be:	2302      	movs	r3, #2
 80008c0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80008c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008c6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c8:	463b      	mov	r3, r7
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 fe42 	bl	8003554 <HAL_RCCEx_PeriphCLKConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	bf14      	ite	ne
 80008d6:	2301      	movne	r3, #1
 80008d8:	2300      	moveq	r3, #0
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <_Z18SystemClock_Configv+0x114>
  {
    Error_Handler();
 80008e0:	f000 f9d0 	bl	8000c84 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008e8:	f001 fff4 	bl	80028d4 <HAL_PWREx_ControlVoltageScaling>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	bf14      	ite	ne
 80008f2:	2301      	movne	r3, #1
 80008f4:	2300      	moveq	r3, #0
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <_Z18SystemClock_Configv+0x130>
  {
    Error_Handler();
 80008fc:	f000 f9c2 	bl	8000c84 <Error_Handler>
  }
}
 8000900:	bf00      	nop
 8000902:	37e0      	adds	r7, #224	; 0xe0
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
 8000928:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800092a:	4b37      	ldr	r3, [pc, #220]	; (8000a08 <_ZL12MX_ADC1_Initv+0x100>)
 800092c:	4a37      	ldr	r2, [pc, #220]	; (8000a0c <_ZL12MX_ADC1_Initv+0x104>)
 800092e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000930:	4b35      	ldr	r3, [pc, #212]	; (8000a08 <_ZL12MX_ADC1_Initv+0x100>)
 8000932:	2200      	movs	r2, #0
 8000934:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B; // 8 bit resolution
 8000936:	4b34      	ldr	r3, [pc, #208]	; (8000a08 <_ZL12MX_ADC1_Initv+0x100>)
 8000938:	2210      	movs	r2, #16
 800093a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800093c:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <_ZL12MX_ADC1_Initv+0x100>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000942:	4b31      	ldr	r3, [pc, #196]	; (8000a08 <_ZL12MX_ADC1_Initv+0x100>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000948:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <_ZL12MX_ADC1_Initv+0x100>)
 800094a:	2204      	movs	r2, #4
 800094c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800094e:	4b2e      	ldr	r3, [pc, #184]	; (8000a08 <_ZL12MX_ADC1_Initv+0x100>)
 8000950:	2200      	movs	r2, #0
 8000952:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000954:	4b2c      	ldr	r3, [pc, #176]	; (8000a08 <_ZL12MX_ADC1_Initv+0x100>)
 8000956:	2200      	movs	r2, #0
 8000958:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800095a:	4b2b      	ldr	r3, [pc, #172]	; (8000a08 <_ZL12MX_ADC1_Initv+0x100>)
 800095c:	2201      	movs	r2, #1
 800095e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000960:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <_ZL12MX_ADC1_Initv+0x100>)
 8000962:	2200      	movs	r2, #0
 8000964:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000968:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <_ZL12MX_ADC1_Initv+0x100>)
 800096a:	2200      	movs	r2, #0
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <_ZL12MX_ADC1_Initv+0x100>)
 8000970:	2200      	movs	r2, #0
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000974:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <_ZL12MX_ADC1_Initv+0x100>)
 8000976:	2200      	movs	r2, #0
 8000978:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <_ZL12MX_ADC1_Initv+0x100>)
 800097e:	2200      	movs	r2, #0
 8000980:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <_ZL12MX_ADC1_Initv+0x100>)
 8000984:	2200      	movs	r2, #0
 8000986:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800098a:	481f      	ldr	r0, [pc, #124]	; (8000a08 <_ZL12MX_ADC1_Initv+0x100>)
 800098c:	f000 fd9e 	bl	80014cc <HAL_ADC_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	bf14      	ite	ne
 8000996:	2301      	movne	r3, #1
 8000998:	2300      	moveq	r3, #0
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 80009a0:	f000 f970 	bl	8000c84 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4816      	ldr	r0, [pc, #88]	; (8000a08 <_ZL12MX_ADC1_Initv+0x100>)
 80009b0:	f001 faf4 	bl	8001f9c <HAL_ADCEx_MultiModeConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	bf14      	ite	ne
 80009ba:	2301      	movne	r3, #1
 80009bc:	2300      	moveq	r3, #0
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 80009c4:	f000 f95e 	bl	8000c84 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <_ZL12MX_ADC1_Initv+0x108>)
 80009ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009cc:	2306      	movs	r3, #6
 80009ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009d4:	237f      	movs	r3, #127	; 0x7f
 80009d6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009d8:	2304      	movs	r3, #4
 80009da:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	4619      	mov	r1, r3
 80009e4:	4808      	ldr	r0, [pc, #32]	; (8000a08 <_ZL12MX_ADC1_Initv+0x100>)
 80009e6:	f000 fec5 	bl	8001774 <HAL_ADC_ConfigChannel>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bf14      	ite	ne
 80009f0:	2301      	movne	r3, #1
 80009f2:	2300      	moveq	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 80009fa:	f000 f943 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	2000008c 	.word	0x2000008c
 8000a0c:	50040000 	.word	0x50040000
 8000a10:	04300002 	.word	0x04300002

08000a14 <_ZL12MX_DAC1_Initv>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2224      	movs	r2, #36	; 0x24
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f004 f909 	bl	8004c38 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <_ZL12MX_DAC1_Initv+0x70>)
 8000a28:	4a17      	ldr	r2, [pc, #92]	; (8000a88 <_ZL12MX_DAC1_Initv+0x74>)
 8000a2a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a2c:	4815      	ldr	r0, [pc, #84]	; (8000a84 <_ZL12MX_DAC1_Initv+0x70>)
 8000a2e:	f001 fc46 	bl	80022be <HAL_DAC_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	bf14      	ite	ne
 8000a38:	2301      	movne	r3, #1
 8000a3a:	2300      	moveq	r3, #0
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <_ZL12MX_DAC1_Initv+0x32>
  {
    Error_Handler();
 8000a42:	f000 f91f 	bl	8000c84 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4808      	ldr	r0, [pc, #32]	; (8000a84 <_ZL12MX_DAC1_Initv+0x70>)
 8000a62:	f001 fc4e 	bl	8002302 <HAL_DAC_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	bf14      	ite	ne
 8000a6c:	2301      	movne	r3, #1
 8000a6e:	2300      	moveq	r3, #0
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <_ZL12MX_DAC1_Initv+0x66>
  {
    Error_Handler();
 8000a76:	f000 f905 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	3728      	adds	r7, #40	; 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200000f0 	.word	0x200000f0
 8000a88:	40007400 	.word	0x40007400

08000a8c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a92:	4a17      	ldr	r2, [pc, #92]	; (8000af0 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <_ZL19MX_USART1_UART_Initv+0x60>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <_ZL19MX_USART1_UART_Initv+0x60>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <_ZL19MX_USART1_UART_Initv+0x60>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <_ZL19MX_USART1_UART_Initv+0x60>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <_ZL19MX_USART1_UART_Initv+0x60>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <_ZL19MX_USART1_UART_Initv+0x60>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ace:	4807      	ldr	r0, [pc, #28]	; (8000aec <_ZL19MX_USART1_UART_Initv+0x60>)
 8000ad0:	f003 fae2 	bl	8004098 <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	bf14      	ite	ne
 8000ada:	2301      	movne	r3, #1
 8000adc:	2300      	moveq	r3, #0
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8000ae4:	f000 f8ce 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200001d0 	.word	0x200001d0
 8000af0:	40013800 	.word	0x40013800

08000af4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000afa:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b36:	4807      	ldr	r0, [pc, #28]	; (8000b54 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000b38:	f003 faae 	bl	8004098 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	bf14      	ite	ne
 8000b42:	2301      	movne	r3, #1
 8000b44:	2300      	moveq	r3, #0
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000b4c:	f000 f89a 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000104 	.word	0x20000104
 8000b58:	40004400 	.word	0x40004400

08000b5c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <_ZL12MX_GPIO_Initv+0xc4>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	4a2a      	ldr	r2, [pc, #168]	; (8000c20 <_ZL12MX_GPIO_Initv+0xc4>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7e:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <_ZL12MX_GPIO_Initv+0xc4>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <_ZL12MX_GPIO_Initv+0xc4>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a24      	ldr	r2, [pc, #144]	; (8000c20 <_ZL12MX_GPIO_Initv+0xc4>)
 8000b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <_ZL12MX_GPIO_Initv+0xc4>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <_ZL12MX_GPIO_Initv+0xc4>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <_ZL12MX_GPIO_Initv+0xc4>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <_ZL12MX_GPIO_Initv+0xc4>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <_ZL12MX_GPIO_Initv+0xc4>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a18      	ldr	r2, [pc, #96]	; (8000c20 <_ZL12MX_GPIO_Initv+0xc4>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <_ZL12MX_GPIO_Initv+0xc4>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2120      	movs	r1, #32
 8000bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bda:	f001 fe55 	bl	8002888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <_ZL12MX_GPIO_Initv+0xc8>)
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480d      	ldr	r0, [pc, #52]	; (8000c28 <_ZL12MX_GPIO_Initv+0xcc>)
 8000bf4:	f001 fca0 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bf8:	2320      	movs	r3, #32
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c12:	f001 fc91 	bl	8002538 <HAL_GPIO_Init>

}
 8000c16:	bf00      	nop
 8000c18:	3728      	adds	r7, #40	; 0x28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000
 8000c24:	10210000 	.word	0x10210000
 8000c28:	48000800 	.word	0x48000800

08000c2c <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <_ZL13MX_TIM16_Initv+0x50>)
 8000c32:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <_ZL13MX_TIM16_Initv+0x54>)
 8000c34:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 500 -1;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <_ZL13MX_TIM16_Initv+0x50>)
 8000c38:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000c3c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <_ZL13MX_TIM16_Initv+0x50>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000c44:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <_ZL13MX_TIM16_Initv+0x50>)
 8000c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c4a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <_ZL13MX_TIM16_Initv+0x50>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <_ZL13MX_TIM16_Initv+0x50>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <_ZL13MX_TIM16_Initv+0x50>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c5e:	4807      	ldr	r0, [pc, #28]	; (8000c7c <_ZL13MX_TIM16_Initv+0x50>)
 8000c60:	f003 f928 	bl	8003eb4 <HAL_TIM_Base_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	bf14      	ite	ne
 8000c6a:	2301      	movne	r3, #1
 8000c6c:	2300      	moveq	r3, #0
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <_ZL13MX_TIM16_Initv+0x4c>
  {
    Error_Handler();
 8000c74:	f000 f806 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000184 	.word	0x20000184
 8000c80:	40014400 	.word	0x40014400

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <Error_Handler+0x6>

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <HAL_MspInit+0x44>)
 8000c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c96:	4a0e      	ldr	r2, [pc, #56]	; (8000cd0 <HAL_MspInit+0x44>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_MspInit+0x44>)
 8000ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_MspInit+0x44>)
 8000cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cae:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <HAL_MspInit+0x44>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_MspInit+0x44>)
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	; 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <HAL_ADC_MspInit+0x74>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d123      	bne.n	8000d3e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <HAL_ADC_MspInit+0x78>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <HAL_ADC_MspInit+0x78>)
 8000cfc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d02:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_ADC_MspInit+0x78>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_ADC_MspInit+0x78>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_ADC_MspInit+0x78>)
 8000d14:	f043 0304 	orr.w	r3, r3, #4
 8000d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_ADC_MspInit+0x78>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d26:	2301      	movs	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d2a:	230b      	movs	r3, #11
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <HAL_ADC_MspInit+0x7c>)
 8000d3a:	f001 fbfd 	bl	8002538 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	; 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	50040000 	.word	0x50040000
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	48000800 	.word	0x48000800

08000d54 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a15      	ldr	r2, [pc, #84]	; (8000dc8 <HAL_DAC_MspInit+0x74>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d124      	bne.n	8000dc0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_DAC_MspInit+0x78>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7a:	4a14      	ldr	r2, [pc, #80]	; (8000dcc <HAL_DAC_MspInit+0x78>)
 8000d7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d80:	6593      	str	r3, [r2, #88]	; 0x58
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_DAC_MspInit+0x78>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_DAC_MspInit+0x78>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <HAL_DAC_MspInit+0x78>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_DAC_MspInit+0x78>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000da6:	2310      	movs	r3, #16
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000daa:	2303      	movs	r3, #3
 8000dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f001 fbbc 	bl	8002538 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40007400 	.word	0x40007400
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_TIM_Base_MspInit+0x38>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d10b      	bne.n	8000dfa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_TIM_Base_MspInit+0x3c>)
 8000de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de6:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <HAL_TIM_Base_MspInit+0x3c>)
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	6613      	str	r3, [r2, #96]	; 0x60
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <HAL_TIM_Base_MspInit+0x3c>)
 8000df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40014400 	.word	0x40014400
 8000e0c:	40021000 	.word	0x40021000

08000e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08c      	sub	sp, #48	; 0x30
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a2f      	ldr	r2, [pc, #188]	; (8000eec <HAL_UART_MspInit+0xdc>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d12a      	bne.n	8000e88 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e32:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <HAL_UART_MspInit+0xe0>)
 8000e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e36:	4a2e      	ldr	r2, [pc, #184]	; (8000ef0 <HAL_UART_MspInit+0xe0>)
 8000e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e3e:	4b2c      	ldr	r3, [pc, #176]	; (8000ef0 <HAL_UART_MspInit+0xe0>)
 8000e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <HAL_UART_MspInit+0xe0>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	4a28      	ldr	r2, [pc, #160]	; (8000ef0 <HAL_UART_MspInit+0xe0>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e56:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <HAL_UART_MspInit+0xe0>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e74:	2307      	movs	r3, #7
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e82:	f001 fb59 	bl	8002538 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e86:	e02d      	b.n	8000ee4 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a19      	ldr	r2, [pc, #100]	; (8000ef4 <HAL_UART_MspInit+0xe4>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d128      	bne.n	8000ee4 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_UART_MspInit+0xe0>)
 8000e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e96:	4a16      	ldr	r2, [pc, #88]	; (8000ef0 <HAL_UART_MspInit+0xe0>)
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <HAL_UART_MspInit+0xe0>)
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <HAL_UART_MspInit+0xe0>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <HAL_UART_MspInit+0xe0>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_UART_MspInit+0xe0>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ec2:	230c      	movs	r3, #12
 8000ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee0:	f001 fb2a 	bl	8002538 <HAL_GPIO_Init>
}
 8000ee4:	bf00      	nop
 8000ee6:	3730      	adds	r7, #48	; 0x30
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40013800 	.word	0x40013800
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40004400 	.word	0x40004400

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <NMI_Handler+0x4>

08000efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <BusFault_Handler+0x4>

08000f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <UsageFault_Handler+0x4>

08000f16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f44:	f000 f8f4 	bl	8001130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f54:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <_sbrk+0x5c>)
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <_sbrk+0x60>)
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <_sbrk+0x64>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d102      	bne.n	8000f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <_sbrk+0x64>)
 8000f6a:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <_sbrk+0x68>)
 8000f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d207      	bcs.n	8000f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f7c:	f003 fe2a 	bl	8004bd4 <__errno>
 8000f80:	4602      	mov	r2, r0
 8000f82:	230c      	movs	r3, #12
 8000f84:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8a:	e009      	b.n	8000fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <_sbrk+0x64>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <_sbrk+0x64>)
 8000f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20018000 	.word	0x20018000
 8000fac:	00000400 	.word	0x00000400
 8000fb0:	20000250 	.word	0x20000250
 8000fb4:	20000268 	.word	0x20000268

08000fb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <SystemInit+0x64>)
 8000fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc2:	4a16      	ldr	r2, [pc, #88]	; (800101c <SystemInit+0x64>)
 8000fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <SystemInit+0x68>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a13      	ldr	r2, [pc, #76]	; (8001020 <SystemInit+0x68>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <SystemInit+0x68>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <SystemInit+0x68>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <SystemInit+0x68>)
 8000fe4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000fe8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000fec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <SystemInit+0x68>)
 8000ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ff4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <SystemInit+0x68>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a09      	ldr	r2, [pc, #36]	; (8001020 <SystemInit+0x68>)
 8000ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001000:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <SystemInit+0x68>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <SystemInit+0x64>)
 800100a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800100e:	609a      	str	r2, [r3, #8]
#endif
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00
 8001020:	40021000 	.word	0x40021000

08001024 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001028:	f7ff ffc6 	bl	8000fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800102c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800102e:	e003      	b.n	8001038 <LoopCopyDataInit>

08001030 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001030:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001032:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001034:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001036:	3104      	adds	r1, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001038:	480a      	ldr	r0, [pc, #40]	; (8001064 <LoopForever+0xa>)
	ldr	r3, =_edata
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <LoopForever+0xe>)
	adds	r2, r0, r1
 800103c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800103e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001040:	d3f6      	bcc.n	8001030 <CopyDataInit>
	ldr	r2, =_sbss
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001044:	e002      	b.n	800104c <LoopFillZerobss>

08001046 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001046:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001048:	f842 3b04 	str.w	r3, [r2], #4

0800104c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <LoopForever+0x16>)
	cmp	r2, r3
 800104e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001050:	d3f9      	bcc.n	8001046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001052:	f003 fdc5 	bl	8004be0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001056:	f7ff fb7d 	bl	8000754 <main>

0800105a <LoopForever>:

LoopForever:
    b LoopForever
 800105a:	e7fe      	b.n	800105a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800105c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001060:	08005594 	.word	0x08005594
	ldr	r0, =_sdata
 8001064:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001068:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800106c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001070:	20000264 	.word	0x20000264

08001074 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC1_2_IRQHandler>
	...

08001078 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <HAL_Init+0x3c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <HAL_Init+0x3c>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108e:	2003      	movs	r0, #3
 8001090:	f001 f8e2 	bl	8002258 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001094:	2000      	movs	r0, #0
 8001096:	f000 f80f 	bl	80010b8 <HAL_InitTick>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	71fb      	strb	r3, [r7, #7]
 80010a4:	e001      	b.n	80010aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010a6:	f7ff fdf1 	bl	8000c8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010aa:	79fb      	ldrb	r3, [r7, #7]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40022000 	.word	0x40022000

080010b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HAL_InitTick+0x6c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d023      	beq.n	8001114 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_InitTick+0x70>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <HAL_InitTick+0x6c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010da:	fbb3 f3f1 	udiv	r3, r3, r1
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 f8df 	bl	80022a6 <HAL_SYSTICK_Config>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10f      	bne.n	800110e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d809      	bhi.n	8001108 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f4:	2200      	movs	r2, #0
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f001 f8b7 	bl	800226e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001100:	4a0a      	ldr	r2, [pc, #40]	; (800112c <HAL_InitTick+0x74>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e007      	b.n	8001118 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	e004      	b.n	8001118 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	73fb      	strb	r3, [r7, #15]
 8001112:	e001      	b.n	8001118 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001118:	7bfb      	ldrb	r3, [r7, #15]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000008 	.word	0x20000008
 8001128:	20000000 	.word	0x20000000
 800112c:	20000004 	.word	0x20000004

08001130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_IncTick+0x20>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_IncTick+0x24>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_IncTick+0x24>)
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000008 	.word	0x20000008
 8001154:	2000025c 	.word	0x2000025c

08001158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <HAL_GetTick+0x14>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	2000025c 	.word	0x2000025c

08001170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001178:	f7ff ffee 	bl	8001158 <HAL_GetTick>
 800117c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001188:	d005      	beq.n	8001196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_Delay+0x40>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4413      	add	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001196:	bf00      	nop
 8001198:	f7ff ffde 	bl	8001158 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d8f7      	bhi.n	8001198 <HAL_Delay+0x28>
  {
  }
}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000008 	.word	0x20000008

080011b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	431a      	orrs	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	609a      	str	r2, [r3, #8]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	609a      	str	r2, [r3, #8]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800121c:	b480      	push	{r7}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3360      	adds	r3, #96	; 0x60
 800122e:	461a      	mov	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <LL_ADC_SetOffset+0x44>)
 800123e:	4013      	ands	r3, r2
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	4313      	orrs	r3, r2
 800124c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001254:	bf00      	nop
 8001256:	371c      	adds	r7, #28
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	03fff000 	.word	0x03fff000

08001264 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3360      	adds	r3, #96	; 0x60
 8001272:	461a      	mov	r2, r3
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	3360      	adds	r3, #96	; 0x60
 80012a0:	461a      	mov	r2, r3
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	431a      	orrs	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012ba:	bf00      	nop
 80012bc:	371c      	adds	r7, #28
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b087      	sub	sp, #28
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	60f8      	str	r0, [r7, #12]
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	3330      	adds	r3, #48	; 0x30
 80012d6:	461a      	mov	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	0a1b      	lsrs	r3, r3, #8
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	4413      	add	r3, r2
 80012e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	f003 031f 	and.w	r3, r3, #31
 80012f0:	211f      	movs	r1, #31
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	401a      	ands	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	0e9b      	lsrs	r3, r3, #26
 80012fe:	f003 011f 	and.w	r1, r3, #31
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f003 031f 	and.w	r3, r3, #31
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	431a      	orrs	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001312:	bf00      	nop
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800131e:	b480      	push	{r7}
 8001320:	b087      	sub	sp, #28
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3314      	adds	r3, #20
 800132e:	461a      	mov	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	0e5b      	lsrs	r3, r3, #25
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	4413      	add	r3, r2
 800133c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	0d1b      	lsrs	r3, r3, #20
 8001346:	f003 031f 	and.w	r3, r3, #31
 800134a:	2107      	movs	r1, #7
 800134c:	fa01 f303 	lsl.w	r3, r1, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	401a      	ands	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	0d1b      	lsrs	r3, r3, #20
 8001358:	f003 031f 	and.w	r3, r3, #31
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	431a      	orrs	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001368:	bf00      	nop
 800136a:	371c      	adds	r7, #28
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800138c:	43db      	mvns	r3, r3
 800138e:	401a      	ands	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0318 	and.w	r3, r3, #24
 8001396:	4908      	ldr	r1, [pc, #32]	; (80013b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001398:	40d9      	lsrs	r1, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	400b      	ands	r3, r1
 800139e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013a2:	431a      	orrs	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	0007ffff 	.word	0x0007ffff

080013bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6093      	str	r3, [r2, #8]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013f4:	d101      	bne.n	80013fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001418:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800141c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001440:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001444:	d101      	bne.n	800144a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b01      	cmp	r3, #1
 800146a:	d101      	bne.n	8001470 <LL_ADC_IsEnabled+0x18>
 800146c:	2301      	movs	r3, #1
 800146e:	e000      	b.n	8001472 <LL_ADC_IsEnabled+0x1a>
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b04      	cmp	r3, #4
 8001490:	d101      	bne.n	8001496 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	2b08      	cmp	r3, #8
 80014b6:	d101      	bne.n	80014bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b089      	sub	sp, #36	; 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e134      	b.n	8001750 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d109      	bne.n	8001508 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff fbed 	bl	8000cd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff67 	bl	80013e0 <LL_ADC_IsDeepPowerDownEnabled>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d004      	beq.n	8001522 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff4d 	bl	80013bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ff82 	bl	8001430 <LL_ADC_IsInternalRegulatorEnabled>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d113      	bne.n	800155a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff66 	bl	8001408 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800153c:	4b86      	ldr	r3, [pc, #536]	; (8001758 <HAL_ADC_Init+0x28c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	099b      	lsrs	r3, r3, #6
 8001542:	4a86      	ldr	r2, [pc, #536]	; (800175c <HAL_ADC_Init+0x290>)
 8001544:	fba2 2303 	umull	r2, r3, r2, r3
 8001548:	099b      	lsrs	r3, r3, #6
 800154a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800154c:	e002      	b.n	8001554 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	3b01      	subs	r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f9      	bne.n	800154e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff66 	bl	8001430 <LL_ADC_IsInternalRegulatorEnabled>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10d      	bne.n	8001586 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156e:	f043 0210 	orr.w	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157a:	f043 0201 	orr.w	r2, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff77 	bl	800147e <LL_ADC_REG_IsConversionOngoing>
 8001590:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	2b00      	cmp	r3, #0
 800159c:	f040 80cf 	bne.w	800173e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f040 80cb 	bne.w	800173e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015b0:	f043 0202 	orr.w	r2, r3, #2
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff4b 	bl	8001458 <LL_ADC_IsEnabled>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d115      	bne.n	80015f4 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015c8:	4865      	ldr	r0, [pc, #404]	; (8001760 <HAL_ADC_Init+0x294>)
 80015ca:	f7ff ff45 	bl	8001458 <LL_ADC_IsEnabled>
 80015ce:	4604      	mov	r4, r0
 80015d0:	4864      	ldr	r0, [pc, #400]	; (8001764 <HAL_ADC_Init+0x298>)
 80015d2:	f7ff ff41 	bl	8001458 <LL_ADC_IsEnabled>
 80015d6:	4603      	mov	r3, r0
 80015d8:	431c      	orrs	r4, r3
 80015da:	4863      	ldr	r0, [pc, #396]	; (8001768 <HAL_ADC_Init+0x29c>)
 80015dc:	f7ff ff3c 	bl	8001458 <LL_ADC_IsEnabled>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4323      	orrs	r3, r4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d105      	bne.n	80015f4 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	4619      	mov	r1, r3
 80015ee:	485f      	ldr	r0, [pc, #380]	; (800176c <HAL_ADC_Init+0x2a0>)
 80015f0:	f7ff fde0 	bl	80011b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7e5b      	ldrb	r3, [r3, #25]
 80015f8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015fe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001604:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800160a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001612:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d106      	bne.n	8001630 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	3b01      	subs	r3, #1
 8001628:	045b      	lsls	r3, r3, #17
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001634:	2b00      	cmp	r3, #0
 8001636:	d009      	beq.n	800164c <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	4b47      	ldr	r3, [pc, #284]	; (8001770 <HAL_ADC_Init+0x2a4>)
 8001654:	4013      	ands	r3, r2
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	69b9      	ldr	r1, [r7, #24]
 800165c:	430b      	orrs	r3, r1
 800165e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff0a 	bl	800147e <LL_ADC_REG_IsConversionOngoing>
 800166a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff17 	bl	80014a4 <LL_ADC_INJ_IsConversionOngoing>
 8001676:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d13d      	bne.n	80016fa <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d13a      	bne.n	80016fa <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001688:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001690:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016a0:	f023 0302 	bic.w	r3, r3, #2
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	69b9      	ldr	r1, [r7, #24]
 80016aa:	430b      	orrs	r3, r1
 80016ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d118      	bne.n	80016ea <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016c2:	f023 0304 	bic.w	r3, r3, #4
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016ce:	4311      	orrs	r1, r2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016d4:	4311      	orrs	r1, r2
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016da:	430a      	orrs	r2, r1
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0201 	orr.w	r2, r2, #1
 80016e6:	611a      	str	r2, [r3, #16]
 80016e8:	e007      	b.n	80016fa <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0201 	bic.w	r2, r2, #1
 80016f8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d10c      	bne.n	800171c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	f023 010f 	bic.w	r1, r3, #15
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	1e5a      	subs	r2, r3, #1
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	631a      	str	r2, [r3, #48]	; 0x30
 800171a:	e007      	b.n	800172c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 020f 	bic.w	r2, r2, #15
 800172a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001730:	f023 0303 	bic.w	r3, r3, #3
 8001734:	f043 0201 	orr.w	r2, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	655a      	str	r2, [r3, #84]	; 0x54
 800173c:	e007      	b.n	800174e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001742:	f043 0210 	orr.w	r2, r3, #16
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800174e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3724      	adds	r7, #36	; 0x24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd90      	pop	{r4, r7, pc}
 8001758:	20000000 	.word	0x20000000
 800175c:	053e2d63 	.word	0x053e2d63
 8001760:	50040000 	.word	0x50040000
 8001764:	50040100 	.word	0x50040100
 8001768:	50040200 	.word	0x50040200
 800176c:	50040300 	.word	0x50040300
 8001770:	fff0c007 	.word	0xfff0c007

08001774 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b0b6      	sub	sp, #216	; 0xd8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <HAL_ADC_ConfigChannel+0x22>
 8001792:	2302      	movs	r3, #2
 8001794:	e3c6      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x7b0>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fe6b 	bl	800147e <LL_ADC_REG_IsConversionOngoing>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f040 83a7 	bne.w	8001efe <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b05      	cmp	r3, #5
 80017b6:	d824      	bhi.n	8001802 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	3b02      	subs	r3, #2
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d81b      	bhi.n	80017fa <HAL_ADC_ConfigChannel+0x86>
 80017c2:	a201      	add	r2, pc, #4	; (adr r2, 80017c8 <HAL_ADC_ConfigChannel+0x54>)
 80017c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c8:	080017d9 	.word	0x080017d9
 80017cc:	080017e1 	.word	0x080017e1
 80017d0:	080017e9 	.word	0x080017e9
 80017d4:	080017f1 	.word	0x080017f1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	220c      	movs	r2, #12
 80017dc:	605a      	str	r2, [r3, #4]
          break;
 80017de:	e011      	b.n	8001804 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	2212      	movs	r2, #18
 80017e4:	605a      	str	r2, [r3, #4]
          break;
 80017e6:	e00d      	b.n	8001804 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	2218      	movs	r2, #24
 80017ec:	605a      	str	r2, [r3, #4]
          break;
 80017ee:	e009      	b.n	8001804 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017f6:	605a      	str	r2, [r3, #4]
          break;
 80017f8:	e004      	b.n	8001804 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	2206      	movs	r2, #6
 80017fe:	605a      	str	r2, [r3, #4]
          break;
 8001800:	e000      	b.n	8001804 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001802:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6818      	ldr	r0, [r3, #0]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	6859      	ldr	r1, [r3, #4]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	f7ff fd58 	bl	80012c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fe2f 	bl	800147e <LL_ADC_REG_IsConversionOngoing>
 8001820:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fe3b 	bl	80014a4 <LL_ADC_INJ_IsConversionOngoing>
 800182e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001832:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001836:	2b00      	cmp	r3, #0
 8001838:	f040 81a6 	bne.w	8001b88 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800183c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001840:	2b00      	cmp	r3, #0
 8001842:	f040 81a1 	bne.w	8001b88 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	6819      	ldr	r1, [r3, #0]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	461a      	mov	r2, r3
 8001854:	f7ff fd63 	bl	800131e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	695a      	ldr	r2, [r3, #20]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	08db      	lsrs	r3, r3, #3
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	2b04      	cmp	r3, #4
 8001878:	d00a      	beq.n	8001890 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6818      	ldr	r0, [r3, #0]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	6919      	ldr	r1, [r3, #16]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800188a:	f7ff fcc7 	bl	800121c <LL_ADC_SetOffset>
 800188e:	e17b      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fce4 	bl	8001264 <LL_ADC_GetOffsetChannel>
 800189c:	4603      	mov	r3, r0
 800189e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10a      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x148>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fcd9 	bl	8001264 <LL_ADC_GetOffsetChannel>
 80018b2:	4603      	mov	r3, r0
 80018b4:	0e9b      	lsrs	r3, r3, #26
 80018b6:	f003 021f 	and.w	r2, r3, #31
 80018ba:	e01e      	b.n	80018fa <HAL_ADC_ConfigChannel+0x186>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fcce 	bl	8001264 <LL_ADC_GetOffsetChannel>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018d2:	fa93 f3a3 	rbit	r3, r3
 80018d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80018ea:	2320      	movs	r3, #32
 80018ec:	e004      	b.n	80018f8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80018ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018f2:	fab3 f383 	clz	r3, r3
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001902:	2b00      	cmp	r3, #0
 8001904:	d105      	bne.n	8001912 <HAL_ADC_ConfigChannel+0x19e>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	0e9b      	lsrs	r3, r3, #26
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	e018      	b.n	8001944 <HAL_ADC_ConfigChannel+0x1d0>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800191e:	fa93 f3a3 	rbit	r3, r3
 8001922:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001926:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800192a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800192e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001936:	2320      	movs	r3, #32
 8001938:	e004      	b.n	8001944 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800193a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001944:	429a      	cmp	r2, r3
 8001946:	d106      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2200      	movs	r2, #0
 800194e:	2100      	movs	r1, #0
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fc9d 	bl	8001290 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2101      	movs	r1, #1
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fc81 	bl	8001264 <LL_ADC_GetOffsetChannel>
 8001962:	4603      	mov	r3, r0
 8001964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10a      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x20e>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2101      	movs	r1, #1
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fc76 	bl	8001264 <LL_ADC_GetOffsetChannel>
 8001978:	4603      	mov	r3, r0
 800197a:	0e9b      	lsrs	r3, r3, #26
 800197c:	f003 021f 	and.w	r2, r3, #31
 8001980:	e01e      	b.n	80019c0 <HAL_ADC_ConfigChannel+0x24c>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2101      	movs	r1, #1
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fc6b 	bl	8001264 <LL_ADC_GetOffsetChannel>
 800198e:	4603      	mov	r3, r0
 8001990:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001994:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001998:	fa93 f3a3 	rbit	r3, r3
 800199c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80019a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80019a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80019b0:	2320      	movs	r3, #32
 80019b2:	e004      	b.n	80019be <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80019b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019b8:	fab3 f383 	clz	r3, r3
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d105      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x264>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	0e9b      	lsrs	r3, r3, #26
 80019d2:	f003 031f 	and.w	r3, r3, #31
 80019d6:	e018      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x296>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80019ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80019f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80019fc:	2320      	movs	r3, #32
 80019fe:	e004      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a04:	fab3 f383 	clz	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d106      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2200      	movs	r2, #0
 8001a14:	2101      	movs	r1, #1
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fc3a 	bl	8001290 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2102      	movs	r1, #2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fc1e 	bl	8001264 <LL_ADC_GetOffsetChannel>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10a      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x2d4>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2102      	movs	r1, #2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fc13 	bl	8001264 <LL_ADC_GetOffsetChannel>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	0e9b      	lsrs	r3, r3, #26
 8001a42:	f003 021f 	and.w	r2, r3, #31
 8001a46:	e01e      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x312>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fc08 	bl	8001264 <LL_ADC_GetOffsetChannel>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a5e:	fa93 f3a3 	rbit	r3, r3
 8001a62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001a66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001a6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001a76:	2320      	movs	r3, #32
 8001a78:	e004      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001a7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d105      	bne.n	8001a9e <HAL_ADC_ConfigChannel+0x32a>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	0e9b      	lsrs	r3, r3, #26
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	e016      	b.n	8001acc <HAL_ADC_ConfigChannel+0x358>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001aaa:	fa93 f3a3 	rbit	r3, r3
 8001aae:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001ab0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ab2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001ab6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001abe:	2320      	movs	r3, #32
 8001ac0:	e004      	b.n	8001acc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001ac2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ac6:	fab3 f383 	clz	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d106      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fbd9 	bl	8001290 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2103      	movs	r1, #3
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fbbd 	bl	8001264 <LL_ADC_GetOffsetChannel>
 8001aea:	4603      	mov	r3, r0
 8001aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10a      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x396>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2103      	movs	r1, #3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fbb2 	bl	8001264 <LL_ADC_GetOffsetChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	0e9b      	lsrs	r3, r3, #26
 8001b04:	f003 021f 	and.w	r2, r3, #31
 8001b08:	e017      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x3c6>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2103      	movs	r1, #3
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fba7 	bl	8001264 <LL_ADC_GetOffsetChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b1c:	fa93 f3a3 	rbit	r3, r3
 8001b20:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b24:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001b26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001b2c:	2320      	movs	r3, #32
 8001b2e:	e003      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d105      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x3de>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	0e9b      	lsrs	r3, r3, #26
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	e011      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x402>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b5a:	fa93 f3a3 	rbit	r3, r3
 8001b5e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b62:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001b6a:	2320      	movs	r3, #32
 8001b6c:	e003      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b70:	fab3 f383 	clz	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d106      	bne.n	8001b88 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2103      	movs	r1, #3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fb84 	bl	8001290 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fc63 	bl	8001458 <LL_ADC_IsEnabled>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f040 813f 	bne.w	8001e18 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	6819      	ldr	r1, [r3, #0]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	f7ff fbe4 	bl	8001374 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	4a8e      	ldr	r2, [pc, #568]	; (8001dec <HAL_ADC_ConfigChannel+0x678>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	f040 8130 	bne.w	8001e18 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10b      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x46c>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	0e9b      	lsrs	r3, r3, #26
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	2b09      	cmp	r3, #9
 8001bd6:	bf94      	ite	ls
 8001bd8:	2301      	movls	r3, #1
 8001bda:	2300      	movhi	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	e019      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x4a0>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be8:	fa93 f3a3 	rbit	r3, r3
 8001bec:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bf0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001bf8:	2320      	movs	r3, #32
 8001bfa:	e003      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	3301      	adds	r3, #1
 8001c06:	f003 031f 	and.w	r3, r3, #31
 8001c0a:	2b09      	cmp	r3, #9
 8001c0c:	bf94      	ite	ls
 8001c0e:	2301      	movls	r3, #1
 8001c10:	2300      	movhi	r3, #0
 8001c12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d079      	beq.n	8001d0c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d107      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x4c0>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	0e9b      	lsrs	r3, r3, #26
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	069b      	lsls	r3, r3, #26
 8001c2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c32:	e015      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x4ec>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c3c:	fa93 f3a3 	rbit	r3, r3
 8001c40:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c44:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001c4c:	2320      	movs	r3, #32
 8001c4e:	e003      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c52:	fab3 f383 	clz	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	3301      	adds	r3, #1
 8001c5a:	069b      	lsls	r3, r3, #26
 8001c5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x50c>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	0e9b      	lsrs	r3, r3, #26
 8001c72:	3301      	adds	r3, #1
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	2101      	movs	r1, #1
 8001c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7e:	e017      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x53c>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c90:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001c98:	2320      	movs	r3, #32
 8001c9a:	e003      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	2101      	movs	r1, #1
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	ea42 0103 	orr.w	r1, r2, r3
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10a      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x562>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0e9b      	lsrs	r3, r3, #26
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4613      	mov	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	051b      	lsls	r3, r3, #20
 8001cd4:	e018      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x594>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001cee:	2320      	movs	r3, #32
 8001cf0:	e003      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf4:	fab3 f383 	clz	r3, r3
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	f003 021f 	and.w	r2, r3, #31
 8001d00:	4613      	mov	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4413      	add	r3, r2
 8001d06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	e080      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d107      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x5b4>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	0e9b      	lsrs	r3, r3, #26
 8001d1e:	3301      	adds	r3, #1
 8001d20:	069b      	lsls	r3, r3, #26
 8001d22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d26:	e015      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x5e0>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001d40:	2320      	movs	r3, #32
 8001d42:	e003      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	069b      	lsls	r3, r3, #26
 8001d50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d109      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x600>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	0e9b      	lsrs	r3, r3, #26
 8001d66:	3301      	adds	r3, #1
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	e017      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x630>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	61fb      	str	r3, [r7, #28]
  return result;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001d8c:	2320      	movs	r3, #32
 8001d8e:	e003      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	2101      	movs	r1, #1
 8001da0:	fa01 f303 	lsl.w	r3, r1, r3
 8001da4:	ea42 0103 	orr.w	r1, r2, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10d      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x65c>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	0e9b      	lsrs	r3, r3, #26
 8001dba:	3301      	adds	r3, #1
 8001dbc:	f003 021f 	and.w	r2, r3, #31
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3b1e      	subs	r3, #30
 8001dc8:	051b      	lsls	r3, r3, #20
 8001dca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dce:	e01d      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x698>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	613b      	str	r3, [r7, #16]
  return result;
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d103      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001de8:	2320      	movs	r3, #32
 8001dea:	e005      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x684>
 8001dec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f003 021f 	and.w	r2, r3, #31
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	3b1e      	subs	r3, #30
 8001e06:	051b      	lsls	r3, r3, #20
 8001e08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	6892      	ldr	r2, [r2, #8]
 8001e12:	4619      	mov	r1, r3
 8001e14:	f7ff fa83 	bl	800131e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b43      	ldr	r3, [pc, #268]	; (8001f2c <HAL_ADC_ConfigChannel+0x7b8>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d079      	beq.n	8001f18 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e24:	4842      	ldr	r0, [pc, #264]	; (8001f30 <HAL_ADC_ConfigChannel+0x7bc>)
 8001e26:	f7ff f9eb 	bl	8001200 <LL_ADC_GetCommonPathInternalCh>
 8001e2a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a40      	ldr	r2, [pc, #256]	; (8001f34 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d12b      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d125      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a3b      	ldr	r2, [pc, #236]	; (8001f38 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d004      	beq.n	8001e58 <HAL_ADC_ConfigChannel+0x6e4>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a3a      	ldr	r2, [pc, #232]	; (8001f3c <HAL_ADC_ConfigChannel+0x7c8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d15c      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e60:	4619      	mov	r1, r3
 8001e62:	4833      	ldr	r0, [pc, #204]	; (8001f30 <HAL_ADC_ConfigChannel+0x7bc>)
 8001e64:	f7ff f9b9 	bl	80011da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001e68:	4b35      	ldr	r3, [pc, #212]	; (8001f40 <HAL_ADC_ConfigChannel+0x7cc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	099b      	lsrs	r3, r3, #6
 8001e6e:	4a35      	ldr	r2, [pc, #212]	; (8001f44 <HAL_ADC_ConfigChannel+0x7d0>)
 8001e70:	fba2 2303 	umull	r2, r3, r2, r3
 8001e74:	099a      	lsrs	r2, r3, #6
 8001e76:	4613      	mov	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e80:	e002      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f9      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e8e:	e040      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a2c      	ldr	r2, [pc, #176]	; (8001f48 <HAL_ADC_ConfigChannel+0x7d4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d118      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x758>
 8001e9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d112      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a23      	ldr	r2, [pc, #140]	; (8001f38 <HAL_ADC_ConfigChannel+0x7c4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d004      	beq.n	8001eba <HAL_ADC_ConfigChannel+0x746>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a21      	ldr	r2, [pc, #132]	; (8001f3c <HAL_ADC_ConfigChannel+0x7c8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d12d      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	481a      	ldr	r0, [pc, #104]	; (8001f30 <HAL_ADC_ConfigChannel+0x7bc>)
 8001ec6:	f7ff f988 	bl	80011da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eca:	e024      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1e      	ldr	r2, [pc, #120]	; (8001f4c <HAL_ADC_ConfigChannel+0x7d8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d120      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ed6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d11a      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <HAL_ADC_ConfigChannel+0x7c4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d115      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ef0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	480e      	ldr	r0, [pc, #56]	; (8001f30 <HAL_ADC_ConfigChannel+0x7bc>)
 8001ef8:	f7ff f96f 	bl	80011da <LL_ADC_SetCommonPathInternalCh>
 8001efc:	e00c      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f02:	f043 0220 	orr.w	r2, r3, #32
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001f10:	e002      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f12:	bf00      	nop
 8001f14:	e000      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f16:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f20:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	37d8      	adds	r7, #216	; 0xd8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	80080000 	.word	0x80080000
 8001f30:	50040300 	.word	0x50040300
 8001f34:	c7520000 	.word	0xc7520000
 8001f38:	50040000 	.word	0x50040000
 8001f3c:	50040200 	.word	0x50040200
 8001f40:	20000000 	.word	0x20000000
 8001f44:	053e2d63 	.word	0x053e2d63
 8001f48:	cb840000 	.word	0xcb840000
 8001f4c:	80000001 	.word	0x80000001

08001f50 <LL_ADC_IsEnabled>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <LL_ADC_IsEnabled+0x18>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <LL_ADC_IsEnabled+0x1a>
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <LL_ADC_REG_IsConversionOngoing>:
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d101      	bne.n	8001f8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b09f      	sub	sp, #124	; 0x7c
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e08f      	b.n	80020da <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a47      	ldr	r2, [pc, #284]	; (80020e4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d102      	bne.n	8001fd2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001fcc:	4b46      	ldr	r3, [pc, #280]	; (80020e8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	e001      	b.n	8001fd6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10b      	bne.n	8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe0:	f043 0220 	orr.w	r2, r3, #32
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e072      	b.n	80020da <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff ffbd 	bl	8001f76 <LL_ADC_REG_IsConversionOngoing>
 8001ffc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ffb7 	bl	8001f76 <LL_ADC_REG_IsConversionOngoing>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d154      	bne.n	80020b8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800200e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002010:	2b00      	cmp	r3, #0
 8002012:	d151      	bne.n	80020b8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002014:	4b35      	ldr	r3, [pc, #212]	; (80020ec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002016:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d02c      	beq.n	800207a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002032:	035b      	lsls	r3, r3, #13
 8002034:	430b      	orrs	r3, r1
 8002036:	431a      	orrs	r2, r3
 8002038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800203a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800203c:	4829      	ldr	r0, [pc, #164]	; (80020e4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800203e:	f7ff ff87 	bl	8001f50 <LL_ADC_IsEnabled>
 8002042:	4604      	mov	r4, r0
 8002044:	4828      	ldr	r0, [pc, #160]	; (80020e8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002046:	f7ff ff83 	bl	8001f50 <LL_ADC_IsEnabled>
 800204a:	4603      	mov	r3, r0
 800204c:	431c      	orrs	r4, r3
 800204e:	4828      	ldr	r0, [pc, #160]	; (80020f0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002050:	f7ff ff7e 	bl	8001f50 <LL_ADC_IsEnabled>
 8002054:	4603      	mov	r3, r0
 8002056:	4323      	orrs	r3, r4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d137      	bne.n	80020cc <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800205c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002064:	f023 030f 	bic.w	r3, r3, #15
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	6811      	ldr	r1, [r2, #0]
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	6892      	ldr	r2, [r2, #8]
 8002070:	430a      	orrs	r2, r1
 8002072:	431a      	orrs	r2, r3
 8002074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002076:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002078:	e028      	b.n	80020cc <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800207a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002084:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002086:	4817      	ldr	r0, [pc, #92]	; (80020e4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002088:	f7ff ff62 	bl	8001f50 <LL_ADC_IsEnabled>
 800208c:	4604      	mov	r4, r0
 800208e:	4816      	ldr	r0, [pc, #88]	; (80020e8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002090:	f7ff ff5e 	bl	8001f50 <LL_ADC_IsEnabled>
 8002094:	4603      	mov	r3, r0
 8002096:	431c      	orrs	r4, r3
 8002098:	4815      	ldr	r0, [pc, #84]	; (80020f0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800209a:	f7ff ff59 	bl	8001f50 <LL_ADC_IsEnabled>
 800209e:	4603      	mov	r3, r0
 80020a0:	4323      	orrs	r3, r4
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d112      	bne.n	80020cc <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80020a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020ae:	f023 030f 	bic.w	r3, r3, #15
 80020b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80020b4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020b6:	e009      	b.n	80020cc <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020bc:	f043 0220 	orr.w	r2, r3, #32
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80020ca:	e000      	b.n	80020ce <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80020d6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80020da:	4618      	mov	r0, r3
 80020dc:	377c      	adds	r7, #124	; 0x7c
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd90      	pop	{r4, r7, pc}
 80020e2:	bf00      	nop
 80020e4:	50040000 	.word	0x50040000
 80020e8:	50040100 	.word	0x50040100
 80020ec:	50040300 	.word	0x50040300
 80020f0:	50040200 	.word	0x50040200

080020f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002110:	4013      	ands	r3, r2
 8002112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800211c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002126:	4a04      	ldr	r2, [pc, #16]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	60d3      	str	r3, [r2, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <__NVIC_GetPriorityGrouping+0x18>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	f003 0307 	and.w	r3, r3, #7
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	6039      	str	r1, [r7, #0]
 8002162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	2b00      	cmp	r3, #0
 800216a:	db0a      	blt.n	8002182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	b2da      	uxtb	r2, r3
 8002170:	490c      	ldr	r1, [pc, #48]	; (80021a4 <__NVIC_SetPriority+0x4c>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	0112      	lsls	r2, r2, #4
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	440b      	add	r3, r1
 800217c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002180:	e00a      	b.n	8002198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4908      	ldr	r1, [pc, #32]	; (80021a8 <__NVIC_SetPriority+0x50>)
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	3b04      	subs	r3, #4
 8002190:	0112      	lsls	r2, r2, #4
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	440b      	add	r3, r1
 8002196:	761a      	strb	r2, [r3, #24]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000e100 	.word	0xe000e100
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	; 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f1c3 0307 	rsb	r3, r3, #7
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	bf28      	it	cs
 80021ca:	2304      	movcs	r3, #4
 80021cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3304      	adds	r3, #4
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d902      	bls.n	80021dc <NVIC_EncodePriority+0x30>
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3b03      	subs	r3, #3
 80021da:	e000      	b.n	80021de <NVIC_EncodePriority+0x32>
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	f04f 32ff 	mov.w	r2, #4294967295
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43da      	mvns	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	401a      	ands	r2, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f4:	f04f 31ff 	mov.w	r1, #4294967295
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	43d9      	mvns	r1, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	4313      	orrs	r3, r2
         );
}
 8002206:	4618      	mov	r0, r3
 8002208:	3724      	adds	r7, #36	; 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002224:	d301      	bcc.n	800222a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002226:	2301      	movs	r3, #1
 8002228:	e00f      	b.n	800224a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <SysTick_Config+0x40>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002232:	210f      	movs	r1, #15
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f7ff ff8e 	bl	8002158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <SysTick_Config+0x40>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002242:	4b04      	ldr	r3, [pc, #16]	; (8002254 <SysTick_Config+0x40>)
 8002244:	2207      	movs	r2, #7
 8002246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	e000e010 	.word	0xe000e010

08002258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ff47 	bl	80020f4 <__NVIC_SetPriorityGrouping>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	4603      	mov	r3, r0
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002280:	f7ff ff5c 	bl	800213c <__NVIC_GetPriorityGrouping>
 8002284:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	6978      	ldr	r0, [r7, #20]
 800228c:	f7ff ff8e 	bl	80021ac <NVIC_EncodePriority>
 8002290:	4602      	mov	r2, r0
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff5d 	bl	8002158 <__NVIC_SetPriority>
}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ffb0 	bl	8002214 <SysTick_Config>
 80022b4:	4603      	mov	r3, r0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e014      	b.n	80022fa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	791b      	ldrb	r3, [r3, #4]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7fe fd37 	bl	8000d54 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2202      	movs	r2, #2
 80022ea:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b088      	sub	sp, #32
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	795b      	ldrb	r3, [r3, #5]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_DAC_ConfigChannel+0x1c>
 800231a:	2302      	movs	r3, #2
 800231c:	e107      	b.n	800252e <HAL_DAC_ConfigChannel+0x22c>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2202      	movs	r2, #2
 8002328:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b04      	cmp	r3, #4
 8002330:	d174      	bne.n	800241c <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002332:	f7fe ff11 	bl	8001158 <HAL_GetTick>
 8002336:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d134      	bne.n	80023a8 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800233e:	e011      	b.n	8002364 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002340:	f7fe ff0a 	bl	8001158 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b01      	cmp	r3, #1
 800234c:	d90a      	bls.n	8002364 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f043 0208 	orr.w	r2, r3, #8
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2203      	movs	r2, #3
 800235e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e0e4      	b.n	800252e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1e6      	bne.n	8002340 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002372:	2001      	movs	r0, #1
 8002374:	f7fe fefc 	bl	8001170 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	6992      	ldr	r2, [r2, #24]
 8002380:	641a      	str	r2, [r3, #64]	; 0x40
 8002382:	e01e      	b.n	80023c2 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002384:	f7fe fee8 	bl	8001158 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b01      	cmp	r3, #1
 8002390:	d90a      	bls.n	80023a8 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f043 0208 	orr.w	r2, r3, #8
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2203      	movs	r2, #3
 80023a2:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e0c2      	b.n	800252e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	dbe8      	blt.n	8002384 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80023b2:	2001      	movs	r0, #1
 80023b4:	f7fe fedc 	bl	8001170 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	6992      	ldr	r2, [r2, #24]
 80023c0:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	ea02 0103 	and.w	r1, r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	69da      	ldr	r2, [r3, #28]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	409a      	lsls	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	21ff      	movs	r1, #255	; 0xff
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	ea02 0103 	and.w	r1, r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	6a1a      	ldr	r2, [r3, #32]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	409a      	lsls	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d11d      	bne.n	8002460 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	221f      	movs	r2, #31
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002466:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	2207      	movs	r2, #7
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	431a      	orrs	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6819      	ldr	r1, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43da      	mvns	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	400a      	ands	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	f640 72fc 	movw	r2, #4092	; 0xffc
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6819      	ldr	r1, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	22c0      	movs	r2, #192	; 0xc0
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43da      	mvns	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	400a      	ands	r2, r1
 800251e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2201      	movs	r2, #1
 8002524:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3720      	adds	r7, #32
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002546:	e17f      	b.n	8002848 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	2101      	movs	r1, #1
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	fa01 f303 	lsl.w	r3, r1, r3
 8002554:	4013      	ands	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8171 	beq.w	8002842 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d00b      	beq.n	8002580 <HAL_GPIO_Init+0x48>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d007      	beq.n	8002580 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002574:	2b11      	cmp	r3, #17
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b12      	cmp	r3, #18
 800257e:	d130      	bne.n	80025e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	2203      	movs	r2, #3
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025b6:	2201      	movs	r2, #1
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	f003 0201 	and.w	r2, r3, #1
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d118      	bne.n	8002620 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025f4:	2201      	movs	r2, #1
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4013      	ands	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	08db      	lsrs	r3, r3, #3
 800260a:	f003 0201 	and.w	r2, r3, #1
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	2203      	movs	r2, #3
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x128>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b12      	cmp	r3, #18
 800265e:	d123      	bne.n	80026a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	08da      	lsrs	r2, r3, #3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3208      	adds	r2, #8
 8002668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800266c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	220f      	movs	r2, #15
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	08da      	lsrs	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3208      	adds	r2, #8
 80026a2:	6939      	ldr	r1, [r7, #16]
 80026a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	2203      	movs	r2, #3
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0203 	and.w	r2, r3, #3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80ac 	beq.w	8002842 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ea:	4b5e      	ldr	r3, [pc, #376]	; (8002864 <HAL_GPIO_Init+0x32c>)
 80026ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ee:	4a5d      	ldr	r2, [pc, #372]	; (8002864 <HAL_GPIO_Init+0x32c>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6613      	str	r3, [r2, #96]	; 0x60
 80026f6:	4b5b      	ldr	r3, [pc, #364]	; (8002864 <HAL_GPIO_Init+0x32c>)
 80026f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002702:	4a59      	ldr	r2, [pc, #356]	; (8002868 <HAL_GPIO_Init+0x330>)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	089b      	lsrs	r3, r3, #2
 8002708:	3302      	adds	r3, #2
 800270a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	220f      	movs	r2, #15
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800272c:	d025      	beq.n	800277a <HAL_GPIO_Init+0x242>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a4e      	ldr	r2, [pc, #312]	; (800286c <HAL_GPIO_Init+0x334>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d01f      	beq.n	8002776 <HAL_GPIO_Init+0x23e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a4d      	ldr	r2, [pc, #308]	; (8002870 <HAL_GPIO_Init+0x338>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d019      	beq.n	8002772 <HAL_GPIO_Init+0x23a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a4c      	ldr	r2, [pc, #304]	; (8002874 <HAL_GPIO_Init+0x33c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d013      	beq.n	800276e <HAL_GPIO_Init+0x236>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a4b      	ldr	r2, [pc, #300]	; (8002878 <HAL_GPIO_Init+0x340>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00d      	beq.n	800276a <HAL_GPIO_Init+0x232>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4a      	ldr	r2, [pc, #296]	; (800287c <HAL_GPIO_Init+0x344>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d007      	beq.n	8002766 <HAL_GPIO_Init+0x22e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a49      	ldr	r2, [pc, #292]	; (8002880 <HAL_GPIO_Init+0x348>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d101      	bne.n	8002762 <HAL_GPIO_Init+0x22a>
 800275e:	2306      	movs	r3, #6
 8002760:	e00c      	b.n	800277c <HAL_GPIO_Init+0x244>
 8002762:	2307      	movs	r3, #7
 8002764:	e00a      	b.n	800277c <HAL_GPIO_Init+0x244>
 8002766:	2305      	movs	r3, #5
 8002768:	e008      	b.n	800277c <HAL_GPIO_Init+0x244>
 800276a:	2304      	movs	r3, #4
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x244>
 800276e:	2303      	movs	r3, #3
 8002770:	e004      	b.n	800277c <HAL_GPIO_Init+0x244>
 8002772:	2302      	movs	r3, #2
 8002774:	e002      	b.n	800277c <HAL_GPIO_Init+0x244>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <HAL_GPIO_Init+0x244>
 800277a:	2300      	movs	r3, #0
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	f002 0203 	and.w	r2, r2, #3
 8002782:	0092      	lsls	r2, r2, #2
 8002784:	4093      	lsls	r3, r2
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800278c:	4936      	ldr	r1, [pc, #216]	; (8002868 <HAL_GPIO_Init+0x330>)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	3302      	adds	r3, #2
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800279a:	4b3a      	ldr	r3, [pc, #232]	; (8002884 <HAL_GPIO_Init+0x34c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027be:	4a31      	ldr	r2, [pc, #196]	; (8002884 <HAL_GPIO_Init+0x34c>)
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80027c4:	4b2f      	ldr	r3, [pc, #188]	; (8002884 <HAL_GPIO_Init+0x34c>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027e8:	4a26      	ldr	r2, [pc, #152]	; (8002884 <HAL_GPIO_Init+0x34c>)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027ee:	4b25      	ldr	r3, [pc, #148]	; (8002884 <HAL_GPIO_Init+0x34c>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002812:	4a1c      	ldr	r2, [pc, #112]	; (8002884 <HAL_GPIO_Init+0x34c>)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002818:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <HAL_GPIO_Init+0x34c>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	43db      	mvns	r3, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4013      	ands	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800283c:	4a11      	ldr	r2, [pc, #68]	; (8002884 <HAL_GPIO_Init+0x34c>)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	3301      	adds	r3, #1
 8002846:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa22 f303 	lsr.w	r3, r2, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	f47f ae78 	bne.w	8002548 <HAL_GPIO_Init+0x10>
  }
}
 8002858:	bf00      	nop
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	40021000 	.word	0x40021000
 8002868:	40010000 	.word	0x40010000
 800286c:	48000400 	.word	0x48000400
 8002870:	48000800 	.word	0x48000800
 8002874:	48000c00 	.word	0x48000c00
 8002878:	48001000 	.word	0x48001000
 800287c:	48001400 	.word	0x48001400
 8002880:	48001800 	.word	0x48001800
 8002884:	40010400 	.word	0x40010400

08002888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	807b      	strh	r3, [r7, #2]
 8002894:	4613      	mov	r3, r2
 8002896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002898:	787b      	ldrb	r3, [r7, #1]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800289e:	887a      	ldrh	r2, [r7, #2]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028a4:	e002      	b.n	80028ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028a6:	887a      	ldrh	r2, [r7, #2]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40007000 	.word	0x40007000

080028d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e2:	d130      	bne.n	8002946 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028e4:	4b23      	ldr	r3, [pc, #140]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f0:	d038      	beq.n	8002964 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028f2:	4b20      	ldr	r3, [pc, #128]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028fa:	4a1e      	ldr	r2, [pc, #120]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002900:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002902:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2232      	movs	r2, #50	; 0x32
 8002908:	fb02 f303 	mul.w	r3, r2, r3
 800290c:	4a1b      	ldr	r2, [pc, #108]	; (800297c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	0c9b      	lsrs	r3, r3, #18
 8002914:	3301      	adds	r3, #1
 8002916:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002918:	e002      	b.n	8002920 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	3b01      	subs	r3, #1
 800291e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002920:	4b14      	ldr	r3, [pc, #80]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800292c:	d102      	bne.n	8002934 <HAL_PWREx_ControlVoltageScaling+0x60>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f2      	bne.n	800291a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002934:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002940:	d110      	bne.n	8002964 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e00f      	b.n	8002966 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002946:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800294e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002952:	d007      	beq.n	8002964 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002954:	4b07      	ldr	r3, [pc, #28]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800295c:	4a05      	ldr	r2, [pc, #20]	; (8002974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800295e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002962:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40007000 	.word	0x40007000
 8002978:	20000000 	.word	0x20000000
 800297c:	431bde83 	.word	0x431bde83

08002980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e3d4      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002992:	4ba1      	ldr	r3, [pc, #644]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800299c:	4b9e      	ldr	r3, [pc, #632]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 80e4 	beq.w	8002b7c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_RCC_OscConfig+0x4a>
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2b0c      	cmp	r3, #12
 80029be:	f040 808b 	bne.w	8002ad8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	f040 8087 	bne.w	8002ad8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029ca:	4b93      	ldr	r3, [pc, #588]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_RCC_OscConfig+0x62>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e3ac      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1a      	ldr	r2, [r3, #32]
 80029e6:	4b8c      	ldr	r3, [pc, #560]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d004      	beq.n	80029fc <HAL_RCC_OscConfig+0x7c>
 80029f2:	4b89      	ldr	r3, [pc, #548]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029fa:	e005      	b.n	8002a08 <HAL_RCC_OscConfig+0x88>
 80029fc:	4b86      	ldr	r3, [pc, #536]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 80029fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a02:	091b      	lsrs	r3, r3, #4
 8002a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d223      	bcs.n	8002a54 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fd3f 	bl	8003494 <RCC_SetFlashLatencyFromMSIRange>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e38d      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a20:	4b7d      	ldr	r3, [pc, #500]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a7c      	ldr	r2, [pc, #496]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002a26:	f043 0308 	orr.w	r3, r3, #8
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	4b7a      	ldr	r3, [pc, #488]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	4977      	ldr	r1, [pc, #476]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a3e:	4b76      	ldr	r3, [pc, #472]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	021b      	lsls	r3, r3, #8
 8002a4c:	4972      	ldr	r1, [pc, #456]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
 8002a52:	e025      	b.n	8002aa0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a54:	4b70      	ldr	r3, [pc, #448]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a6f      	ldr	r2, [pc, #444]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002a5a:	f043 0308 	orr.w	r3, r3, #8
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b6d      	ldr	r3, [pc, #436]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	496a      	ldr	r1, [pc, #424]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a72:	4b69      	ldr	r3, [pc, #420]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	021b      	lsls	r3, r3, #8
 8002a80:	4965      	ldr	r1, [pc, #404]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d109      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fcff 	bl	8003494 <RCC_SetFlashLatencyFromMSIRange>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e34d      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aa0:	f000 fc36 	bl	8003310 <HAL_RCC_GetSysClockFreq>
 8002aa4:	4601      	mov	r1, r0
 8002aa6:	4b5c      	ldr	r3, [pc, #368]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	4a5a      	ldr	r2, [pc, #360]	; (8002c1c <HAL_RCC_OscConfig+0x29c>)
 8002ab2:	5cd3      	ldrb	r3, [r2, r3]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	fa21 f303 	lsr.w	r3, r1, r3
 8002abc:	4a58      	ldr	r2, [pc, #352]	; (8002c20 <HAL_RCC_OscConfig+0x2a0>)
 8002abe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ac0:	4b58      	ldr	r3, [pc, #352]	; (8002c24 <HAL_RCC_OscConfig+0x2a4>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe faf7 	bl	80010b8 <HAL_InitTick>
 8002aca:	4603      	mov	r3, r0
 8002acc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d052      	beq.n	8002b7a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	e331      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d032      	beq.n	8002b46 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ae0:	4b4d      	ldr	r3, [pc, #308]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a4c      	ldr	r2, [pc, #304]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aec:	f7fe fb34 	bl	8001158 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002af4:	f7fe fb30 	bl	8001158 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e31a      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b06:	4b44      	ldr	r3, [pc, #272]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b12:	4b41      	ldr	r3, [pc, #260]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a40      	ldr	r2, [pc, #256]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002b18:	f043 0308 	orr.w	r3, r3, #8
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	4b3e      	ldr	r3, [pc, #248]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	493b      	ldr	r1, [pc, #236]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b30:	4b39      	ldr	r3, [pc, #228]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	4936      	ldr	r1, [pc, #216]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]
 8002b44:	e01a      	b.n	8002b7c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b46:	4b34      	ldr	r3, [pc, #208]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a33      	ldr	r2, [pc, #204]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002b4c:	f023 0301 	bic.w	r3, r3, #1
 8002b50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b52:	f7fe fb01 	bl	8001158 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b5a:	f7fe fafd 	bl	8001158 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e2e7      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b6c:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f0      	bne.n	8002b5a <HAL_RCC_OscConfig+0x1da>
 8002b78:	e000      	b.n	8002b7c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b7a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d074      	beq.n	8002c72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d005      	beq.n	8002b9a <HAL_RCC_OscConfig+0x21a>
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b0c      	cmp	r3, #12
 8002b92:	d10e      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d10b      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9a:	4b1f      	ldr	r3, [pc, #124]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d064      	beq.n	8002c70 <HAL_RCC_OscConfig+0x2f0>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d160      	bne.n	8002c70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e2c4      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bba:	d106      	bne.n	8002bca <HAL_RCC_OscConfig+0x24a>
 8002bbc:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a15      	ldr	r2, [pc, #84]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	e01d      	b.n	8002c06 <HAL_RCC_OscConfig+0x286>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd2:	d10c      	bne.n	8002bee <HAL_RCC_OscConfig+0x26e>
 8002bd4:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a0f      	ldr	r2, [pc, #60]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002bda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b0d      	ldr	r3, [pc, #52]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0c      	ldr	r2, [pc, #48]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	e00b      	b.n	8002c06 <HAL_RCC_OscConfig+0x286>
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a09      	ldr	r2, [pc, #36]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a06      	ldr	r2, [pc, #24]	; (8002c18 <HAL_RCC_OscConfig+0x298>)
 8002c00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d01c      	beq.n	8002c48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0e:	f7fe faa3 	bl	8001158 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c14:	e011      	b.n	8002c3a <HAL_RCC_OscConfig+0x2ba>
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	08005508 	.word	0x08005508
 8002c20:	20000000 	.word	0x20000000
 8002c24:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c28:	f7fe fa96 	bl	8001158 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	; 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e280      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c3a:	4baf      	ldr	r3, [pc, #700]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x2a8>
 8002c46:	e014      	b.n	8002c72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fe fa86 	bl	8001158 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c50:	f7fe fa82 	bl	8001158 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	; 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e26c      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c62:	4ba5      	ldr	r3, [pc, #660]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x2d0>
 8002c6e:	e000      	b.n	8002c72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d060      	beq.n	8002d40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_OscConfig+0x310>
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	d119      	bne.n	8002cbe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d116      	bne.n	8002cbe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c90:	4b99      	ldr	r3, [pc, #612]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x328>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e249      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca8:	4b93      	ldr	r3, [pc, #588]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	061b      	lsls	r3, r3, #24
 8002cb6:	4990      	ldr	r1, [pc, #576]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cbc:	e040      	b.n	8002d40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d023      	beq.n	8002d0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cc6:	4b8c      	ldr	r3, [pc, #560]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a8b      	ldr	r2, [pc, #556]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd2:	f7fe fa41 	bl	8001158 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cda:	f7fe fa3d 	bl	8001158 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e227      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cec:	4b82      	ldr	r3, [pc, #520]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf8:	4b7f      	ldr	r3, [pc, #508]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	061b      	lsls	r3, r3, #24
 8002d06:	497c      	ldr	r1, [pc, #496]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	604b      	str	r3, [r1, #4]
 8002d0c:	e018      	b.n	8002d40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0e:	4b7a      	ldr	r3, [pc, #488]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a79      	ldr	r2, [pc, #484]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1a:	f7fe fa1d 	bl	8001158 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d22:	f7fe fa19 	bl	8001158 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e203      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d34:	4b70      	ldr	r3, [pc, #448]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1f0      	bne.n	8002d22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d03c      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01c      	beq.n	8002d8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d54:	4b68      	ldr	r3, [pc, #416]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d5a:	4a67      	ldr	r2, [pc, #412]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d64:	f7fe f9f8 	bl	8001158 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d6c:	f7fe f9f4 	bl	8001158 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e1de      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d7e:	4b5e      	ldr	r3, [pc, #376]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0ef      	beq.n	8002d6c <HAL_RCC_OscConfig+0x3ec>
 8002d8c:	e01b      	b.n	8002dc6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d8e:	4b5a      	ldr	r3, [pc, #360]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d94:	4a58      	ldr	r2, [pc, #352]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002d96:	f023 0301 	bic.w	r3, r3, #1
 8002d9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9e:	f7fe f9db 	bl	8001158 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da6:	f7fe f9d7 	bl	8001158 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e1c1      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002db8:	4b4f      	ldr	r3, [pc, #316]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1ef      	bne.n	8002da6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 80a6 	beq.w	8002f20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002dd8:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10d      	bne.n	8002e00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de4:	4b44      	ldr	r3, [pc, #272]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de8:	4a43      	ldr	r2, [pc, #268]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dee:	6593      	str	r3, [r2, #88]	; 0x58
 8002df0:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e00:	4b3e      	ldr	r3, [pc, #248]	; (8002efc <HAL_RCC_OscConfig+0x57c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d118      	bne.n	8002e3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e0c:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <HAL_RCC_OscConfig+0x57c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a3a      	ldr	r2, [pc, #232]	; (8002efc <HAL_RCC_OscConfig+0x57c>)
 8002e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e18:	f7fe f99e 	bl	8001158 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e20:	f7fe f99a 	bl	8001158 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e184      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e32:	4b32      	ldr	r3, [pc, #200]	; (8002efc <HAL_RCC_OscConfig+0x57c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d108      	bne.n	8002e58 <HAL_RCC_OscConfig+0x4d8>
 8002e46:	4b2c      	ldr	r3, [pc, #176]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4c:	4a2a      	ldr	r2, [pc, #168]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e56:	e024      	b.n	8002ea2 <HAL_RCC_OscConfig+0x522>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b05      	cmp	r3, #5
 8002e5e:	d110      	bne.n	8002e82 <HAL_RCC_OscConfig+0x502>
 8002e60:	4b25      	ldr	r3, [pc, #148]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e66:	4a24      	ldr	r2, [pc, #144]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002e68:	f043 0304 	orr.w	r3, r3, #4
 8002e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e70:	4b21      	ldr	r3, [pc, #132]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e76:	4a20      	ldr	r2, [pc, #128]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e80:	e00f      	b.n	8002ea2 <HAL_RCC_OscConfig+0x522>
 8002e82:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e88:	4a1b      	ldr	r2, [pc, #108]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002e8a:	f023 0301 	bic.w	r3, r3, #1
 8002e8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e92:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e98:	4a17      	ldr	r2, [pc, #92]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002e9a:	f023 0304 	bic.w	r3, r3, #4
 8002e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d016      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eaa:	f7fe f955 	bl	8001158 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eb0:	e00a      	b.n	8002ec8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb2:	f7fe f951 	bl	8001158 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e139      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_RCC_OscConfig+0x578>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0ed      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x532>
 8002ed6:	e01a      	b.n	8002f0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed8:	f7fe f93e 	bl	8001158 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ede:	e00f      	b.n	8002f00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f7fe f93a 	bl	8001158 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d906      	bls.n	8002f00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e122      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f00:	4b90      	ldr	r3, [pc, #576]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1e8      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f0e:	7ffb      	ldrb	r3, [r7, #31]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d105      	bne.n	8002f20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f14:	4b8b      	ldr	r3, [pc, #556]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 8002f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f18:	4a8a      	ldr	r2, [pc, #552]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 8002f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8108 	beq.w	800313a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	f040 80d0 	bne.w	80030d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f34:	4b83      	ldr	r3, [pc, #524]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f003 0203 	and.w	r2, r3, #3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d130      	bne.n	8002faa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	3b01      	subs	r3, #1
 8002f54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d127      	bne.n	8002faa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d11f      	bne.n	8002faa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f74:	2a07      	cmp	r2, #7
 8002f76:	bf14      	ite	ne
 8002f78:	2201      	movne	r2, #1
 8002f7a:	2200      	moveq	r2, #0
 8002f7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d113      	bne.n	8002faa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f8c:	085b      	lsrs	r3, r3, #1
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d109      	bne.n	8002faa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	085b      	lsrs	r3, r3, #1
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d06e      	beq.n	8003088 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b0c      	cmp	r3, #12
 8002fae:	d069      	beq.n	8003084 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fb0:	4b64      	ldr	r3, [pc, #400]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d105      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002fbc:	4b61      	ldr	r3, [pc, #388]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0b7      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fcc:	4b5d      	ldr	r3, [pc, #372]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a5c      	ldr	r2, [pc, #368]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 8002fd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fd6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fd8:	f7fe f8be 	bl	8001158 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7fe f8ba 	bl	8001158 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e0a4      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff2:	4b54      	ldr	r3, [pc, #336]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ffe:	4b51      	ldr	r3, [pc, #324]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	4b51      	ldr	r3, [pc, #324]	; (8003148 <HAL_RCC_OscConfig+0x7c8>)
 8003004:	4013      	ands	r3, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800300e:	3a01      	subs	r2, #1
 8003010:	0112      	lsls	r2, r2, #4
 8003012:	4311      	orrs	r1, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003018:	0212      	lsls	r2, r2, #8
 800301a:	4311      	orrs	r1, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003020:	0852      	lsrs	r2, r2, #1
 8003022:	3a01      	subs	r2, #1
 8003024:	0552      	lsls	r2, r2, #21
 8003026:	4311      	orrs	r1, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800302c:	0852      	lsrs	r2, r2, #1
 800302e:	3a01      	subs	r2, #1
 8003030:	0652      	lsls	r2, r2, #25
 8003032:	4311      	orrs	r1, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003038:	0912      	lsrs	r2, r2, #4
 800303a:	0452      	lsls	r2, r2, #17
 800303c:	430a      	orrs	r2, r1
 800303e:	4941      	ldr	r1, [pc, #260]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 8003040:	4313      	orrs	r3, r2
 8003042:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003044:	4b3f      	ldr	r3, [pc, #252]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a3e      	ldr	r2, [pc, #248]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 800304a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800304e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003050:	4b3c      	ldr	r3, [pc, #240]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4a3b      	ldr	r2, [pc, #236]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 8003056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800305c:	f7fe f87c 	bl	8001158 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003064:	f7fe f878 	bl	8001158 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e062      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003076:	4b33      	ldr	r3, [pc, #204]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003082:	e05a      	b.n	800313a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e059      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003088:	4b2e      	ldr	r3, [pc, #184]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d152      	bne.n	800313a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003094:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a2a      	ldr	r2, [pc, #168]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 800309a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030a0:	4b28      	ldr	r3, [pc, #160]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	4a27      	ldr	r2, [pc, #156]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 80030a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030ac:	f7fe f854 	bl	8001158 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b4:	f7fe f850 	bl	8001158 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e03a      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c6:	4b1f      	ldr	r3, [pc, #124]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x734>
 80030d2:	e032      	b.n	800313a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b0c      	cmp	r3, #12
 80030d8:	d02d      	beq.n	8003136 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030da:	4b1a      	ldr	r3, [pc, #104]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a19      	ldr	r2, [pc, #100]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 80030e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030e4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80030e6:	4b17      	ldr	r3, [pc, #92]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d105      	bne.n	80030fe <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030f2:	4b14      	ldr	r3, [pc, #80]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	4a13      	ldr	r2, [pc, #76]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 80030f8:	f023 0303 	bic.w	r3, r3, #3
 80030fc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030fe:	4b11      	ldr	r3, [pc, #68]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	4a10      	ldr	r2, [pc, #64]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 8003104:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310e:	f7fe f823 	bl	8001158 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003116:	f7fe f81f 	bl	8001158 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e009      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003128:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_RCC_OscConfig+0x7c4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f0      	bne.n	8003116 <HAL_RCC_OscConfig+0x796>
 8003134:	e001      	b.n	800313a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3720      	adds	r7, #32
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40021000 	.word	0x40021000
 8003148:	f99d808c 	.word	0xf99d808c

0800314c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0c8      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003160:	4b66      	ldr	r3, [pc, #408]	; (80032fc <HAL_RCC_ClockConfig+0x1b0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d910      	bls.n	8003190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316e:	4b63      	ldr	r3, [pc, #396]	; (80032fc <HAL_RCC_ClockConfig+0x1b0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 0207 	bic.w	r2, r3, #7
 8003176:	4961      	ldr	r1, [pc, #388]	; (80032fc <HAL_RCC_ClockConfig+0x1b0>)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317e:	4b5f      	ldr	r3, [pc, #380]	; (80032fc <HAL_RCC_ClockConfig+0x1b0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d001      	beq.n	8003190 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0b0      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	d04c      	beq.n	8003236 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d107      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a4:	4b56      	ldr	r3, [pc, #344]	; (8003300 <HAL_RCC_ClockConfig+0x1b4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d121      	bne.n	80031f4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e09e      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d107      	bne.n	80031cc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031bc:	4b50      	ldr	r3, [pc, #320]	; (8003300 <HAL_RCC_ClockConfig+0x1b4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d115      	bne.n	80031f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e092      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031d4:	4b4a      	ldr	r3, [pc, #296]	; (8003300 <HAL_RCC_ClockConfig+0x1b4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d109      	bne.n	80031f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e086      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031e4:	4b46      	ldr	r3, [pc, #280]	; (8003300 <HAL_RCC_ClockConfig+0x1b4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e07e      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031f4:	4b42      	ldr	r3, [pc, #264]	; (8003300 <HAL_RCC_ClockConfig+0x1b4>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f023 0203 	bic.w	r2, r3, #3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	493f      	ldr	r1, [pc, #252]	; (8003300 <HAL_RCC_ClockConfig+0x1b4>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003206:	f7fd ffa7 	bl	8001158 <HAL_GetTick>
 800320a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320c:	e00a      	b.n	8003224 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800320e:	f7fd ffa3 	bl	8001158 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f241 3288 	movw	r2, #5000	; 0x1388
 800321c:	4293      	cmp	r3, r2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e066      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003224:	4b36      	ldr	r3, [pc, #216]	; (8003300 <HAL_RCC_ClockConfig+0x1b4>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 020c 	and.w	r2, r3, #12
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	429a      	cmp	r2, r3
 8003234:	d1eb      	bne.n	800320e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003242:	4b2f      	ldr	r3, [pc, #188]	; (8003300 <HAL_RCC_ClockConfig+0x1b4>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	492c      	ldr	r1, [pc, #176]	; (8003300 <HAL_RCC_ClockConfig+0x1b4>)
 8003250:	4313      	orrs	r3, r2
 8003252:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003254:	4b29      	ldr	r3, [pc, #164]	; (80032fc <HAL_RCC_ClockConfig+0x1b0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d210      	bcs.n	8003284 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003262:	4b26      	ldr	r3, [pc, #152]	; (80032fc <HAL_RCC_ClockConfig+0x1b0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 0207 	bic.w	r2, r3, #7
 800326a:	4924      	ldr	r1, [pc, #144]	; (80032fc <HAL_RCC_ClockConfig+0x1b0>)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	4313      	orrs	r3, r2
 8003270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003272:	4b22      	ldr	r3, [pc, #136]	; (80032fc <HAL_RCC_ClockConfig+0x1b0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d001      	beq.n	8003284 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e036      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003290:	4b1b      	ldr	r3, [pc, #108]	; (8003300 <HAL_RCC_ClockConfig+0x1b4>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	4918      	ldr	r1, [pc, #96]	; (8003300 <HAL_RCC_ClockConfig+0x1b4>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d009      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ae:	4b14      	ldr	r3, [pc, #80]	; (8003300 <HAL_RCC_ClockConfig+0x1b4>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4910      	ldr	r1, [pc, #64]	; (8003300 <HAL_RCC_ClockConfig+0x1b4>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032c2:	f000 f825 	bl	8003310 <HAL_RCC_GetSysClockFreq>
 80032c6:	4601      	mov	r1, r0
 80032c8:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <HAL_RCC_ClockConfig+0x1b4>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	091b      	lsrs	r3, r3, #4
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	4a0c      	ldr	r2, [pc, #48]	; (8003304 <HAL_RCC_ClockConfig+0x1b8>)
 80032d4:	5cd3      	ldrb	r3, [r2, r3]
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	fa21 f303 	lsr.w	r3, r1, r3
 80032de:	4a0a      	ldr	r2, [pc, #40]	; (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fd fee6 	bl	80010b8 <HAL_InitTick>
 80032ec:	4603      	mov	r3, r0
 80032ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80032f0:	7afb      	ldrb	r3, [r7, #11]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40022000 	.word	0x40022000
 8003300:	40021000 	.word	0x40021000
 8003304:	08005508 	.word	0x08005508
 8003308:	20000000 	.word	0x20000000
 800330c:	20000004 	.word	0x20000004

08003310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003310:	b480      	push	{r7}
 8003312:	b089      	sub	sp, #36	; 0x24
 8003314:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	2300      	movs	r3, #0
 800331c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800331e:	4b3d      	ldr	r3, [pc, #244]	; (8003414 <HAL_RCC_GetSysClockFreq+0x104>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003328:	4b3a      	ldr	r3, [pc, #232]	; (8003414 <HAL_RCC_GetSysClockFreq+0x104>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x34>
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	2b0c      	cmp	r3, #12
 800333c:	d121      	bne.n	8003382 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d11e      	bne.n	8003382 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003344:	4b33      	ldr	r3, [pc, #204]	; (8003414 <HAL_RCC_GetSysClockFreq+0x104>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d107      	bne.n	8003360 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003350:	4b30      	ldr	r3, [pc, #192]	; (8003414 <HAL_RCC_GetSysClockFreq+0x104>)
 8003352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003356:	0a1b      	lsrs	r3, r3, #8
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	e005      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003360:	4b2c      	ldr	r3, [pc, #176]	; (8003414 <HAL_RCC_GetSysClockFreq+0x104>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800336c:	4a2a      	ldr	r2, [pc, #168]	; (8003418 <HAL_RCC_GetSysClockFreq+0x108>)
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003374:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10d      	bne.n	8003398 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b04      	cmp	r3, #4
 8003386:	d102      	bne.n	800338e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003388:	4b24      	ldr	r3, [pc, #144]	; (800341c <HAL_RCC_GetSysClockFreq+0x10c>)
 800338a:	61bb      	str	r3, [r7, #24]
 800338c:	e004      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b08      	cmp	r3, #8
 8003392:	d101      	bne.n	8003398 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003394:	4b22      	ldr	r3, [pc, #136]	; (8003420 <HAL_RCC_GetSysClockFreq+0x110>)
 8003396:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	2b0c      	cmp	r3, #12
 800339c:	d133      	bne.n	8003406 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800339e:	4b1d      	ldr	r3, [pc, #116]	; (8003414 <HAL_RCC_GetSysClockFreq+0x104>)
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d002      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0xa4>
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d003      	beq.n	80033ba <HAL_RCC_GetSysClockFreq+0xaa>
 80033b2:	e005      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033b4:	4b19      	ldr	r3, [pc, #100]	; (800341c <HAL_RCC_GetSysClockFreq+0x10c>)
 80033b6:	617b      	str	r3, [r7, #20]
      break;
 80033b8:	e005      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033ba:	4b19      	ldr	r3, [pc, #100]	; (8003420 <HAL_RCC_GetSysClockFreq+0x110>)
 80033bc:	617b      	str	r3, [r7, #20]
      break;
 80033be:	e002      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	617b      	str	r3, [r7, #20]
      break;
 80033c4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033c6:	4b13      	ldr	r3, [pc, #76]	; (8003414 <HAL_RCC_GetSysClockFreq+0x104>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	091b      	lsrs	r3, r3, #4
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	3301      	adds	r3, #1
 80033d2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033d4:	4b0f      	ldr	r3, [pc, #60]	; (8003414 <HAL_RCC_GetSysClockFreq+0x104>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	0a1b      	lsrs	r3, r3, #8
 80033da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	fb02 f203 	mul.w	r2, r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ea:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033ec:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_RCC_GetSysClockFreq+0x104>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	0e5b      	lsrs	r3, r3, #25
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	3301      	adds	r3, #1
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	fbb2 f3f3 	udiv	r3, r2, r3
 8003404:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003406:	69bb      	ldr	r3, [r7, #24]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3724      	adds	r7, #36	; 0x24
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	40021000 	.word	0x40021000
 8003418:	08005520 	.word	0x08005520
 800341c:	00f42400 	.word	0x00f42400
 8003420:	007a1200 	.word	0x007a1200

08003424 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003428:	4b03      	ldr	r3, [pc, #12]	; (8003438 <HAL_RCC_GetHCLKFreq+0x14>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	20000000 	.word	0x20000000

0800343c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003440:	f7ff fff0 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003444:	4601      	mov	r1, r0
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	0a1b      	lsrs	r3, r3, #8
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	4a04      	ldr	r2, [pc, #16]	; (8003464 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003452:	5cd3      	ldrb	r3, [r2, r3]
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	fa21 f303 	lsr.w	r3, r1, r3
}
 800345c:	4618      	mov	r0, r3
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40021000 	.word	0x40021000
 8003464:	08005518 	.word	0x08005518

08003468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800346c:	f7ff ffda 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003470:	4601      	mov	r1, r0
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	0adb      	lsrs	r3, r3, #11
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4a04      	ldr	r2, [pc, #16]	; (8003490 <HAL_RCC_GetPCLK2Freq+0x28>)
 800347e:	5cd3      	ldrb	r3, [r2, r3]
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003488:	4618      	mov	r0, r3
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40021000 	.word	0x40021000
 8003490:	08005518 	.word	0x08005518

08003494 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800349c:	2300      	movs	r3, #0
 800349e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034a0:	4b2a      	ldr	r3, [pc, #168]	; (800354c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034ac:	f7ff fa04 	bl	80028b8 <HAL_PWREx_GetVoltageRange>
 80034b0:	6178      	str	r0, [r7, #20]
 80034b2:	e014      	b.n	80034de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034b4:	4b25      	ldr	r3, [pc, #148]	; (800354c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	4a24      	ldr	r2, [pc, #144]	; (800354c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034be:	6593      	str	r3, [r2, #88]	; 0x58
 80034c0:	4b22      	ldr	r3, [pc, #136]	; (800354c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034cc:	f7ff f9f4 	bl	80028b8 <HAL_PWREx_GetVoltageRange>
 80034d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034d2:	4b1e      	ldr	r3, [pc, #120]	; (800354c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d6:	4a1d      	ldr	r2, [pc, #116]	; (800354c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e4:	d10b      	bne.n	80034fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b80      	cmp	r3, #128	; 0x80
 80034ea:	d919      	bls.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2ba0      	cmp	r3, #160	; 0xa0
 80034f0:	d902      	bls.n	80034f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034f2:	2302      	movs	r3, #2
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	e013      	b.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034f8:	2301      	movs	r3, #1
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	e010      	b.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b80      	cmp	r3, #128	; 0x80
 8003502:	d902      	bls.n	800350a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003504:	2303      	movs	r3, #3
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	e00a      	b.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b80      	cmp	r3, #128	; 0x80
 800350e:	d102      	bne.n	8003516 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003510:	2302      	movs	r3, #2
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	e004      	b.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b70      	cmp	r3, #112	; 0x70
 800351a:	d101      	bne.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800351c:	2301      	movs	r3, #1
 800351e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f023 0207 	bic.w	r2, r3, #7
 8003528:	4909      	ldr	r1, [pc, #36]	; (8003550 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003530:	4b07      	ldr	r3, [pc, #28]	; (8003550 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	429a      	cmp	r2, r3
 800353c:	d001      	beq.n	8003542 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40021000 	.word	0x40021000
 8003550:	40022000 	.word	0x40022000

08003554 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800355c:	2300      	movs	r3, #0
 800355e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003560:	2300      	movs	r3, #0
 8003562:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800356c:	2b00      	cmp	r3, #0
 800356e:	d03f      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003578:	d01c      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800357a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800357e:	d802      	bhi.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00e      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003584:	e01f      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003586:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800358a:	d003      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800358c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003590:	d01c      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003592:	e018      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003594:	4b85      	ldr	r3, [pc, #532]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4a84      	ldr	r2, [pc, #528]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800359a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035a0:	e015      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3304      	adds	r3, #4
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fab9 	bl	8003b20 <RCCEx_PLLSAI1_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035b2:	e00c      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3320      	adds	r3, #32
 80035b8:	2100      	movs	r1, #0
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fba0 	bl	8003d00 <RCCEx_PLLSAI2_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035c4:	e003      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	74fb      	strb	r3, [r7, #19]
      break;
 80035ca:	e000      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80035cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ce:	7cfb      	ldrb	r3, [r7, #19]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10b      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035d4:	4b75      	ldr	r3, [pc, #468]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035e2:	4972      	ldr	r1, [pc, #456]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035ea:	e001      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ec:	7cfb      	ldrb	r3, [r7, #19]
 80035ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d03f      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003604:	d01c      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003606:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800360a:	d802      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00e      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003610:	e01f      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003612:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003616:	d003      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003618:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800361c:	d01c      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800361e:	e018      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003620:	4b62      	ldr	r3, [pc, #392]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4a61      	ldr	r2, [pc, #388]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800362a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800362c:	e015      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3304      	adds	r3, #4
 8003632:	2100      	movs	r1, #0
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fa73 	bl	8003b20 <RCCEx_PLLSAI1_Config>
 800363a:	4603      	mov	r3, r0
 800363c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800363e:	e00c      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3320      	adds	r3, #32
 8003644:	2100      	movs	r1, #0
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fb5a 	bl	8003d00 <RCCEx_PLLSAI2_Config>
 800364c:	4603      	mov	r3, r0
 800364e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003650:	e003      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	74fb      	strb	r3, [r7, #19]
      break;
 8003656:	e000      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003658:	bf00      	nop
    }

    if(ret == HAL_OK)
 800365a:	7cfb      	ldrb	r3, [r7, #19]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10b      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003660:	4b52      	ldr	r3, [pc, #328]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003666:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800366e:	494f      	ldr	r1, [pc, #316]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003676:	e001      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80a0 	beq.w	80037ca <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800368a:	2300      	movs	r3, #0
 800368c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800368e:	4b47      	ldr	r3, [pc, #284]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800369e:	2300      	movs	r3, #0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00d      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a4:	4b41      	ldr	r3, [pc, #260]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a8:	4a40      	ldr	r2, [pc, #256]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ae:	6593      	str	r3, [r2, #88]	; 0x58
 80036b0:	4b3e      	ldr	r3, [pc, #248]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036bc:	2301      	movs	r3, #1
 80036be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036c0:	4b3b      	ldr	r3, [pc, #236]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a3a      	ldr	r2, [pc, #232]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80036c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036cc:	f7fd fd44 	bl	8001158 <HAL_GetTick>
 80036d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036d2:	e009      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d4:	f7fd fd40 	bl	8001158 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d902      	bls.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	74fb      	strb	r3, [r7, #19]
        break;
 80036e6:	e005      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036e8:	4b31      	ldr	r3, [pc, #196]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ef      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80036f4:	7cfb      	ldrb	r3, [r7, #19]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d15c      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036fa:	4b2c      	ldr	r3, [pc, #176]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003704:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01f      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	429a      	cmp	r2, r3
 8003716:	d019      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003718:	4b24      	ldr	r3, [pc, #144]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003722:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003724:	4b21      	ldr	r3, [pc, #132]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	4a20      	ldr	r2, [pc, #128]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800372c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003734:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373a:	4a1c      	ldr	r2, [pc, #112]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800373c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003744:	4a19      	ldr	r2, [pc, #100]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d016      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003756:	f7fd fcff 	bl	8001158 <HAL_GetTick>
 800375a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800375c:	e00b      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375e:	f7fd fcfb 	bl	8001158 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	f241 3288 	movw	r2, #5000	; 0x1388
 800376c:	4293      	cmp	r3, r2
 800376e:	d902      	bls.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	74fb      	strb	r3, [r7, #19]
            break;
 8003774:	e006      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003776:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0ec      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003784:	7cfb      	ldrb	r3, [r7, #19]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10c      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800378a:	4b08      	ldr	r3, [pc, #32]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003790:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800379a:	4904      	ldr	r1, [pc, #16]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037a2:	e009      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037a4:	7cfb      	ldrb	r3, [r7, #19]
 80037a6:	74bb      	strb	r3, [r7, #18]
 80037a8:	e006      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80037aa:	bf00      	nop
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b4:	7cfb      	ldrb	r3, [r7, #19]
 80037b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037b8:	7c7b      	ldrb	r3, [r7, #17]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d105      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037be:	4b9e      	ldr	r3, [pc, #632]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	4a9d      	ldr	r2, [pc, #628]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037d6:	4b98      	ldr	r3, [pc, #608]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037dc:	f023 0203 	bic.w	r2, r3, #3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e4:	4994      	ldr	r1, [pc, #592]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00a      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037f8:	4b8f      	ldr	r3, [pc, #572]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fe:	f023 020c 	bic.w	r2, r3, #12
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003806:	498c      	ldr	r1, [pc, #560]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800381a:	4b87      	ldr	r3, [pc, #540]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003820:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	4983      	ldr	r1, [pc, #524]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00a      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800383c:	4b7e      	ldr	r3, [pc, #504]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	497b      	ldr	r1, [pc, #492]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0310 	and.w	r3, r3, #16
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800385e:	4b76      	ldr	r3, [pc, #472]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003864:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386c:	4972      	ldr	r1, [pc, #456]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00a      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003880:	4b6d      	ldr	r3, [pc, #436]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388e:	496a      	ldr	r1, [pc, #424]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038a2:	4b65      	ldr	r3, [pc, #404]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b0:	4961      	ldr	r1, [pc, #388]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00a      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038c4:	4b5c      	ldr	r3, [pc, #368]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d2:	4959      	ldr	r1, [pc, #356]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038e6:	4b54      	ldr	r3, [pc, #336]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f4:	4950      	ldr	r1, [pc, #320]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00a      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003908:	4b4b      	ldr	r3, [pc, #300]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800390a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003916:	4948      	ldr	r1, [pc, #288]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800392a:	4b43      	ldr	r3, [pc, #268]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800392c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003930:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003938:	493f      	ldr	r1, [pc, #252]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d028      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800394c:	4b3a      	ldr	r3, [pc, #232]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003952:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800395a:	4937      	ldr	r1, [pc, #220]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800396a:	d106      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800396c:	4b32      	ldr	r3, [pc, #200]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4a31      	ldr	r2, [pc, #196]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003976:	60d3      	str	r3, [r2, #12]
 8003978:	e011      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800397e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003982:	d10c      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3304      	adds	r3, #4
 8003988:	2101      	movs	r1, #1
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f8c8 	bl	8003b20 <RCCEx_PLLSAI1_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003994:	7cfb      	ldrb	r3, [r7, #19]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800399a:	7cfb      	ldrb	r3, [r7, #19]
 800399c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d028      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039aa:	4b23      	ldr	r3, [pc, #140]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b8:	491f      	ldr	r1, [pc, #124]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039c8:	d106      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039ca:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	4a1a      	ldr	r2, [pc, #104]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039d4:	60d3      	str	r3, [r2, #12]
 80039d6:	e011      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039e0:	d10c      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3304      	adds	r3, #4
 80039e6:	2101      	movs	r1, #1
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 f899 	bl	8003b20 <RCCEx_PLLSAI1_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039f2:	7cfb      	ldrb	r3, [r7, #19]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80039f8:	7cfb      	ldrb	r3, [r7, #19]
 80039fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d02b      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a16:	4908      	ldr	r1, [pc, #32]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a26:	d109      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a28:	4b03      	ldr	r3, [pc, #12]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	4a02      	ldr	r2, [pc, #8]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a32:	60d3      	str	r3, [r2, #12]
 8003a34:	e014      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003a36:	bf00      	nop
 8003a38:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a44:	d10c      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 f867 	bl	8003b20 <RCCEx_PLLSAI1_Config>
 8003a52:	4603      	mov	r3, r0
 8003a54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a56:	7cfb      	ldrb	r3, [r7, #19]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d02f      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a6c:	4b2b      	ldr	r3, [pc, #172]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a7a:	4928      	ldr	r1, [pc, #160]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a8a:	d10d      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	2102      	movs	r1, #2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 f844 	bl	8003b20 <RCCEx_PLLSAI1_Config>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a9c:	7cfb      	ldrb	r3, [r7, #19]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d014      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003aa2:	7cfb      	ldrb	r3, [r7, #19]
 8003aa4:	74bb      	strb	r3, [r7, #18]
 8003aa6:	e011      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ab0:	d10c      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3320      	adds	r3, #32
 8003ab6:	2102      	movs	r1, #2
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 f921 	bl	8003d00 <RCCEx_PLLSAI2_Config>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ac2:	7cfb      	ldrb	r3, [r7, #19]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003ac8:	7cfb      	ldrb	r3, [r7, #19]
 8003aca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ad8:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ae6:	490d      	ldr	r1, [pc, #52]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00b      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003afa:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b0a:	4904      	ldr	r1, [pc, #16]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b12:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40021000 	.word	0x40021000

08003b20 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b2e:	4b73      	ldr	r3, [pc, #460]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d018      	beq.n	8003b6c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b3a:	4b70      	ldr	r3, [pc, #448]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f003 0203 	and.w	r2, r3, #3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d10d      	bne.n	8003b66 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b52:	4b6a      	ldr	r3, [pc, #424]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	091b      	lsrs	r3, r3, #4
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
       ||
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d044      	beq.n	8003bf0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	73fb      	strb	r3, [r7, #15]
 8003b6a:	e041      	b.n	8003bf0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d00c      	beq.n	8003b8e <RCCEx_PLLSAI1_Config+0x6e>
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d013      	beq.n	8003ba0 <RCCEx_PLLSAI1_Config+0x80>
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d120      	bne.n	8003bbe <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b7c:	4b5f      	ldr	r3, [pc, #380]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d11d      	bne.n	8003bc4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b8c:	e01a      	b.n	8003bc4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b8e:	4b5b      	ldr	r3, [pc, #364]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d116      	bne.n	8003bc8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b9e:	e013      	b.n	8003bc8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ba0:	4b56      	ldr	r3, [pc, #344]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10f      	bne.n	8003bcc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bac:	4b53      	ldr	r3, [pc, #332]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d109      	bne.n	8003bcc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bbc:	e006      	b.n	8003bcc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc2:	e004      	b.n	8003bce <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003bc4:	bf00      	nop
 8003bc6:	e002      	b.n	8003bce <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003bc8:	bf00      	nop
 8003bca:	e000      	b.n	8003bce <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003bcc:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10d      	bne.n	8003bf0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bd4:	4b49      	ldr	r3, [pc, #292]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6819      	ldr	r1, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	3b01      	subs	r3, #1
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	430b      	orrs	r3, r1
 8003bea:	4944      	ldr	r1, [pc, #272]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d17d      	bne.n	8003cf2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003bf6:	4b41      	ldr	r3, [pc, #260]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a40      	ldr	r2, [pc, #256]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bfc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c02:	f7fd faa9 	bl	8001158 <HAL_GetTick>
 8003c06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c08:	e009      	b.n	8003c1e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c0a:	f7fd faa5 	bl	8001158 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d902      	bls.n	8003c1e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	73fb      	strb	r3, [r7, #15]
        break;
 8003c1c:	e005      	b.n	8003c2a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c1e:	4b37      	ldr	r3, [pc, #220]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1ef      	bne.n	8003c0a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d160      	bne.n	8003cf2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d111      	bne.n	8003c5a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c36:	4b31      	ldr	r3, [pc, #196]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6892      	ldr	r2, [r2, #8]
 8003c46:	0211      	lsls	r1, r2, #8
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	68d2      	ldr	r2, [r2, #12]
 8003c4c:	0912      	lsrs	r2, r2, #4
 8003c4e:	0452      	lsls	r2, r2, #17
 8003c50:	430a      	orrs	r2, r1
 8003c52:	492a      	ldr	r1, [pc, #168]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	610b      	str	r3, [r1, #16]
 8003c58:	e027      	b.n	8003caa <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d112      	bne.n	8003c86 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c60:	4b26      	ldr	r3, [pc, #152]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6892      	ldr	r2, [r2, #8]
 8003c70:	0211      	lsls	r1, r2, #8
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6912      	ldr	r2, [r2, #16]
 8003c76:	0852      	lsrs	r2, r2, #1
 8003c78:	3a01      	subs	r2, #1
 8003c7a:	0552      	lsls	r2, r2, #21
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	491f      	ldr	r1, [pc, #124]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	610b      	str	r3, [r1, #16]
 8003c84:	e011      	b.n	8003caa <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c86:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6892      	ldr	r2, [r2, #8]
 8003c96:	0211      	lsls	r1, r2, #8
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6952      	ldr	r2, [r2, #20]
 8003c9c:	0852      	lsrs	r2, r2, #1
 8003c9e:	3a01      	subs	r2, #1
 8003ca0:	0652      	lsls	r2, r2, #25
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	4915      	ldr	r1, [pc, #84]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003caa:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a13      	ldr	r2, [pc, #76]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cb4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb6:	f7fd fa4f 	bl	8001158 <HAL_GetTick>
 8003cba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cbc:	e009      	b.n	8003cd2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cbe:	f7fd fa4b 	bl	8001158 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d902      	bls.n	8003cd2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	73fb      	strb	r3, [r7, #15]
          break;
 8003cd0:	e005      	b.n	8003cde <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cd2:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0ef      	beq.n	8003cbe <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d106      	bne.n	8003cf2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	4903      	ldr	r1, [pc, #12]	; (8003cfc <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40021000 	.word	0x40021000

08003d00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d0e:	4b68      	ldr	r3, [pc, #416]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d018      	beq.n	8003d4c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d1a:	4b65      	ldr	r3, [pc, #404]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f003 0203 	and.w	r2, r3, #3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d10d      	bne.n	8003d46 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d009      	beq.n	8003d46 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d32:	4b5f      	ldr	r3, [pc, #380]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	091b      	lsrs	r3, r3, #4
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
       ||
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d044      	beq.n	8003dd0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	73fb      	strb	r3, [r7, #15]
 8003d4a:	e041      	b.n	8003dd0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d00c      	beq.n	8003d6e <RCCEx_PLLSAI2_Config+0x6e>
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d013      	beq.n	8003d80 <RCCEx_PLLSAI2_Config+0x80>
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d120      	bne.n	8003d9e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d5c:	4b54      	ldr	r3, [pc, #336]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d11d      	bne.n	8003da4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d6c:	e01a      	b.n	8003da4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d6e:	4b50      	ldr	r3, [pc, #320]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d116      	bne.n	8003da8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d7e:	e013      	b.n	8003da8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d80:	4b4b      	ldr	r3, [pc, #300]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10f      	bne.n	8003dac <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d8c:	4b48      	ldr	r3, [pc, #288]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d109      	bne.n	8003dac <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d9c:	e006      	b.n	8003dac <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
      break;
 8003da2:	e004      	b.n	8003dae <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003da4:	bf00      	nop
 8003da6:	e002      	b.n	8003dae <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003da8:	bf00      	nop
 8003daa:	e000      	b.n	8003dae <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003dac:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10d      	bne.n	8003dd0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003db4:	4b3e      	ldr	r3, [pc, #248]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6819      	ldr	r1, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	4939      	ldr	r1, [pc, #228]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d167      	bne.n	8003ea6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003dd6:	4b36      	ldr	r3, [pc, #216]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a35      	ldr	r2, [pc, #212]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003de2:	f7fd f9b9 	bl	8001158 <HAL_GetTick>
 8003de6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003de8:	e009      	b.n	8003dfe <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dea:	f7fd f9b5 	bl	8001158 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d902      	bls.n	8003dfe <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	73fb      	strb	r3, [r7, #15]
        break;
 8003dfc:	e005      	b.n	8003e0a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dfe:	4b2c      	ldr	r3, [pc, #176]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1ef      	bne.n	8003dea <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d14a      	bne.n	8003ea6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d111      	bne.n	8003e3a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e16:	4b26      	ldr	r3, [pc, #152]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6892      	ldr	r2, [r2, #8]
 8003e26:	0211      	lsls	r1, r2, #8
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	68d2      	ldr	r2, [r2, #12]
 8003e2c:	0912      	lsrs	r2, r2, #4
 8003e2e:	0452      	lsls	r2, r2, #17
 8003e30:	430a      	orrs	r2, r1
 8003e32:	491f      	ldr	r1, [pc, #124]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	614b      	str	r3, [r1, #20]
 8003e38:	e011      	b.n	8003e5e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e3a:	4b1d      	ldr	r3, [pc, #116]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e42:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6892      	ldr	r2, [r2, #8]
 8003e4a:	0211      	lsls	r1, r2, #8
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6912      	ldr	r2, [r2, #16]
 8003e50:	0852      	lsrs	r2, r2, #1
 8003e52:	3a01      	subs	r2, #1
 8003e54:	0652      	lsls	r2, r2, #25
 8003e56:	430a      	orrs	r2, r1
 8003e58:	4915      	ldr	r1, [pc, #84]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e5e:	4b14      	ldr	r3, [pc, #80]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a13      	ldr	r2, [pc, #76]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e68:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6a:	f7fd f975 	bl	8001158 <HAL_GetTick>
 8003e6e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e70:	e009      	b.n	8003e86 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e72:	f7fd f971 	bl	8001158 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d902      	bls.n	8003e86 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	73fb      	strb	r3, [r7, #15]
          break;
 8003e84:	e005      	b.n	8003e92 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e86:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0ef      	beq.n	8003e72 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d106      	bne.n	8003ea6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e98:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e9a:	695a      	ldr	r2, [r3, #20]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	4903      	ldr	r1, [pc, #12]	; (8003eb0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40021000 	.word	0x40021000

08003eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e049      	b.n	8003f5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fc ff78 	bl	8000dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	f000 f836 	bl	8003f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a40      	ldr	r2, [pc, #256]	; (8004078 <TIM_Base_SetConfig+0x114>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d013      	beq.n	8003fa4 <TIM_Base_SetConfig+0x40>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f82:	d00f      	beq.n	8003fa4 <TIM_Base_SetConfig+0x40>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a3d      	ldr	r2, [pc, #244]	; (800407c <TIM_Base_SetConfig+0x118>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00b      	beq.n	8003fa4 <TIM_Base_SetConfig+0x40>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a3c      	ldr	r2, [pc, #240]	; (8004080 <TIM_Base_SetConfig+0x11c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d007      	beq.n	8003fa4 <TIM_Base_SetConfig+0x40>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a3b      	ldr	r2, [pc, #236]	; (8004084 <TIM_Base_SetConfig+0x120>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <TIM_Base_SetConfig+0x40>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a3a      	ldr	r2, [pc, #232]	; (8004088 <TIM_Base_SetConfig+0x124>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d108      	bne.n	8003fb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a2f      	ldr	r2, [pc, #188]	; (8004078 <TIM_Base_SetConfig+0x114>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d01f      	beq.n	8003ffe <TIM_Base_SetConfig+0x9a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc4:	d01b      	beq.n	8003ffe <TIM_Base_SetConfig+0x9a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a2c      	ldr	r2, [pc, #176]	; (800407c <TIM_Base_SetConfig+0x118>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d017      	beq.n	8003ffe <TIM_Base_SetConfig+0x9a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a2b      	ldr	r2, [pc, #172]	; (8004080 <TIM_Base_SetConfig+0x11c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d013      	beq.n	8003ffe <TIM_Base_SetConfig+0x9a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a2a      	ldr	r2, [pc, #168]	; (8004084 <TIM_Base_SetConfig+0x120>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00f      	beq.n	8003ffe <TIM_Base_SetConfig+0x9a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a29      	ldr	r2, [pc, #164]	; (8004088 <TIM_Base_SetConfig+0x124>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00b      	beq.n	8003ffe <TIM_Base_SetConfig+0x9a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a28      	ldr	r2, [pc, #160]	; (800408c <TIM_Base_SetConfig+0x128>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d007      	beq.n	8003ffe <TIM_Base_SetConfig+0x9a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a27      	ldr	r2, [pc, #156]	; (8004090 <TIM_Base_SetConfig+0x12c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d003      	beq.n	8003ffe <TIM_Base_SetConfig+0x9a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a26      	ldr	r2, [pc, #152]	; (8004094 <TIM_Base_SetConfig+0x130>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d108      	bne.n	8004010 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4313      	orrs	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a10      	ldr	r2, [pc, #64]	; (8004078 <TIM_Base_SetConfig+0x114>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d00f      	beq.n	800405c <TIM_Base_SetConfig+0xf8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a12      	ldr	r2, [pc, #72]	; (8004088 <TIM_Base_SetConfig+0x124>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00b      	beq.n	800405c <TIM_Base_SetConfig+0xf8>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a11      	ldr	r2, [pc, #68]	; (800408c <TIM_Base_SetConfig+0x128>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d007      	beq.n	800405c <TIM_Base_SetConfig+0xf8>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a10      	ldr	r2, [pc, #64]	; (8004090 <TIM_Base_SetConfig+0x12c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d003      	beq.n	800405c <TIM_Base_SetConfig+0xf8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a0f      	ldr	r2, [pc, #60]	; (8004094 <TIM_Base_SetConfig+0x130>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d103      	bne.n	8004064 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	615a      	str	r2, [r3, #20]
}
 800406a:	bf00      	nop
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40012c00 	.word	0x40012c00
 800407c:	40000400 	.word	0x40000400
 8004080:	40000800 	.word	0x40000800
 8004084:	40000c00 	.word	0x40000c00
 8004088:	40013400 	.word	0x40013400
 800408c:	40014000 	.word	0x40014000
 8004090:	40014400 	.word	0x40014400
 8004094:	40014800 	.word	0x40014800

08004098 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e040      	b.n	800412c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fc fea8 	bl	8000e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2224      	movs	r2, #36	; 0x24
 80040c4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0201 	bic.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f98c 	bl	80043f4 <UART_SetConfig>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e022      	b.n	800412c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fc0a 	bl	8004908 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fc91 	bl	8004a4c <UART_CheckIdleState>
 800412a:	4603      	mov	r3, r0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08a      	sub	sp, #40	; 0x28
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	4613      	mov	r3, r2
 8004142:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004148:	2b20      	cmp	r3, #32
 800414a:	f040 8081 	bne.w	8004250 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <HAL_UART_Transmit+0x26>
 8004154:	88fb      	ldrh	r3, [r7, #6]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e079      	b.n	8004252 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_UART_Transmit+0x38>
 8004168:	2302      	movs	r3, #2
 800416a:	e072      	b.n	8004252 <HAL_UART_Transmit+0x11e>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2221      	movs	r2, #33	; 0x21
 800417e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004180:	f7fc ffea 	bl	8001158 <HAL_GetTick>
 8004184:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	88fa      	ldrh	r2, [r7, #6]
 800418a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	88fa      	ldrh	r2, [r7, #6]
 8004192:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800419e:	d108      	bne.n	80041b2 <HAL_UART_Transmit+0x7e>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d104      	bne.n	80041b2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	e003      	b.n	80041ba <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80041c2:	e02d      	b.n	8004220 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2200      	movs	r2, #0
 80041cc:	2180      	movs	r1, #128	; 0x80
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 fc81 	bl	8004ad6 <UART_WaitOnFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e039      	b.n	8004252 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10b      	bne.n	80041fc <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	881a      	ldrh	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041f0:	b292      	uxth	r2, r2
 80041f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	3302      	adds	r3, #2
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	e008      	b.n	800420e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	781a      	ldrb	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	b292      	uxth	r2, r2
 8004206:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	3301      	adds	r3, #1
 800420c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1cb      	bne.n	80041c4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2200      	movs	r2, #0
 8004234:	2140      	movs	r1, #64	; 0x40
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 fc4d 	bl	8004ad6 <UART_WaitOnFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e005      	b.n	8004252 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	e000      	b.n	8004252 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004250:	2302      	movs	r3, #2
  }
}
 8004252:	4618      	mov	r0, r3
 8004254:	3720      	adds	r7, #32
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b08a      	sub	sp, #40	; 0x28
 800425e:	af02      	add	r7, sp, #8
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	603b      	str	r3, [r7, #0]
 8004266:	4613      	mov	r3, r2
 8004268:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800426e:	2b20      	cmp	r3, #32
 8004270:	f040 80bb 	bne.w	80043ea <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_UART_Receive+0x26>
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e0b3      	b.n	80043ec <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_UART_Receive+0x38>
 800428e:	2302      	movs	r3, #2
 8004290:	e0ac      	b.n	80043ec <HAL_UART_Receive+0x192>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2222      	movs	r2, #34	; 0x22
 80042a4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80042a6:	f7fc ff57 	bl	8001158 <HAL_GetTick>
 80042aa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	88fa      	ldrh	r2, [r7, #6]
 80042b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	88fa      	ldrh	r2, [r7, #6]
 80042b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c4:	d10e      	bne.n	80042e4 <HAL_UART_Receive+0x8a>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d105      	bne.n	80042da <HAL_UART_Receive+0x80>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80042d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042d8:	e02d      	b.n	8004336 <HAL_UART_Receive+0xdc>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	22ff      	movs	r2, #255	; 0xff
 80042de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042e2:	e028      	b.n	8004336 <HAL_UART_Receive+0xdc>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10d      	bne.n	8004308 <HAL_UART_Receive+0xae>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d104      	bne.n	80042fe <HAL_UART_Receive+0xa4>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	22ff      	movs	r2, #255	; 0xff
 80042f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042fc:	e01b      	b.n	8004336 <HAL_UART_Receive+0xdc>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	227f      	movs	r2, #127	; 0x7f
 8004302:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004306:	e016      	b.n	8004336 <HAL_UART_Receive+0xdc>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004310:	d10d      	bne.n	800432e <HAL_UART_Receive+0xd4>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d104      	bne.n	8004324 <HAL_UART_Receive+0xca>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	227f      	movs	r2, #127	; 0x7f
 800431e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004322:	e008      	b.n	8004336 <HAL_UART_Receive+0xdc>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	223f      	movs	r2, #63	; 0x3f
 8004328:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800432c:	e003      	b.n	8004336 <HAL_UART_Receive+0xdc>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800433c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004346:	d108      	bne.n	800435a <HAL_UART_Receive+0x100>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d104      	bne.n	800435a <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8004350:	2300      	movs	r3, #0
 8004352:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	e003      	b.n	8004362 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800435e:	2300      	movs	r3, #0
 8004360:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800436a:	e033      	b.n	80043d4 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	2200      	movs	r2, #0
 8004374:	2120      	movs	r1, #32
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 fbad 	bl	8004ad6 <UART_WaitOnFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e032      	b.n	80043ec <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10c      	bne.n	80043a6 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004392:	b29a      	uxth	r2, r3
 8004394:	8a7b      	ldrh	r3, [r7, #18]
 8004396:	4013      	ands	r3, r2
 8004398:	b29a      	uxth	r2, r3
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	3302      	adds	r3, #2
 80043a2:	61bb      	str	r3, [r7, #24]
 80043a4:	e00d      	b.n	80043c2 <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	8a7b      	ldrh	r3, [r7, #18]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	4013      	ands	r3, r2
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	3301      	adds	r3, #1
 80043c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1c5      	bne.n	800436c <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	e000      	b.n	80043ec <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 80043ea:	2302      	movs	r3, #2
  }
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3720      	adds	r7, #32
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043f4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80043f8:	b088      	sub	sp, #32
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	4313      	orrs	r3, r2
 8004418:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4bac      	ldr	r3, [pc, #688]	; (80046d4 <UART_SetConfig+0x2e0>)
 8004422:	4013      	ands	r3, r2
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6812      	ldr	r2, [r2, #0]
 8004428:	69f9      	ldr	r1, [r7, #28]
 800442a:	430b      	orrs	r3, r1
 800442c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4aa2      	ldr	r2, [pc, #648]	; (80046d8 <UART_SetConfig+0x2e4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d004      	beq.n	800445e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	69fa      	ldr	r2, [r7, #28]
 800445a:	4313      	orrs	r3, r2
 800445c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	430a      	orrs	r2, r1
 8004470:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a99      	ldr	r2, [pc, #612]	; (80046dc <UART_SetConfig+0x2e8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d121      	bne.n	80044c0 <UART_SetConfig+0xcc>
 800447c:	4b98      	ldr	r3, [pc, #608]	; (80046e0 <UART_SetConfig+0x2ec>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	2b03      	cmp	r3, #3
 8004488:	d816      	bhi.n	80044b8 <UART_SetConfig+0xc4>
 800448a:	a201      	add	r2, pc, #4	; (adr r2, 8004490 <UART_SetConfig+0x9c>)
 800448c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004490:	080044a1 	.word	0x080044a1
 8004494:	080044ad 	.word	0x080044ad
 8004498:	080044a7 	.word	0x080044a7
 800449c:	080044b3 	.word	0x080044b3
 80044a0:	2301      	movs	r3, #1
 80044a2:	76fb      	strb	r3, [r7, #27]
 80044a4:	e0e8      	b.n	8004678 <UART_SetConfig+0x284>
 80044a6:	2302      	movs	r3, #2
 80044a8:	76fb      	strb	r3, [r7, #27]
 80044aa:	e0e5      	b.n	8004678 <UART_SetConfig+0x284>
 80044ac:	2304      	movs	r3, #4
 80044ae:	76fb      	strb	r3, [r7, #27]
 80044b0:	e0e2      	b.n	8004678 <UART_SetConfig+0x284>
 80044b2:	2308      	movs	r3, #8
 80044b4:	76fb      	strb	r3, [r7, #27]
 80044b6:	e0df      	b.n	8004678 <UART_SetConfig+0x284>
 80044b8:	2310      	movs	r3, #16
 80044ba:	76fb      	strb	r3, [r7, #27]
 80044bc:	bf00      	nop
 80044be:	e0db      	b.n	8004678 <UART_SetConfig+0x284>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a87      	ldr	r2, [pc, #540]	; (80046e4 <UART_SetConfig+0x2f0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d134      	bne.n	8004534 <UART_SetConfig+0x140>
 80044ca:	4b85      	ldr	r3, [pc, #532]	; (80046e0 <UART_SetConfig+0x2ec>)
 80044cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d0:	f003 030c 	and.w	r3, r3, #12
 80044d4:	2b0c      	cmp	r3, #12
 80044d6:	d829      	bhi.n	800452c <UART_SetConfig+0x138>
 80044d8:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <UART_SetConfig+0xec>)
 80044da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044de:	bf00      	nop
 80044e0:	08004515 	.word	0x08004515
 80044e4:	0800452d 	.word	0x0800452d
 80044e8:	0800452d 	.word	0x0800452d
 80044ec:	0800452d 	.word	0x0800452d
 80044f0:	08004521 	.word	0x08004521
 80044f4:	0800452d 	.word	0x0800452d
 80044f8:	0800452d 	.word	0x0800452d
 80044fc:	0800452d 	.word	0x0800452d
 8004500:	0800451b 	.word	0x0800451b
 8004504:	0800452d 	.word	0x0800452d
 8004508:	0800452d 	.word	0x0800452d
 800450c:	0800452d 	.word	0x0800452d
 8004510:	08004527 	.word	0x08004527
 8004514:	2300      	movs	r3, #0
 8004516:	76fb      	strb	r3, [r7, #27]
 8004518:	e0ae      	b.n	8004678 <UART_SetConfig+0x284>
 800451a:	2302      	movs	r3, #2
 800451c:	76fb      	strb	r3, [r7, #27]
 800451e:	e0ab      	b.n	8004678 <UART_SetConfig+0x284>
 8004520:	2304      	movs	r3, #4
 8004522:	76fb      	strb	r3, [r7, #27]
 8004524:	e0a8      	b.n	8004678 <UART_SetConfig+0x284>
 8004526:	2308      	movs	r3, #8
 8004528:	76fb      	strb	r3, [r7, #27]
 800452a:	e0a5      	b.n	8004678 <UART_SetConfig+0x284>
 800452c:	2310      	movs	r3, #16
 800452e:	76fb      	strb	r3, [r7, #27]
 8004530:	bf00      	nop
 8004532:	e0a1      	b.n	8004678 <UART_SetConfig+0x284>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a6b      	ldr	r2, [pc, #428]	; (80046e8 <UART_SetConfig+0x2f4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d120      	bne.n	8004580 <UART_SetConfig+0x18c>
 800453e:	4b68      	ldr	r3, [pc, #416]	; (80046e0 <UART_SetConfig+0x2ec>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004544:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004548:	2b10      	cmp	r3, #16
 800454a:	d00f      	beq.n	800456c <UART_SetConfig+0x178>
 800454c:	2b10      	cmp	r3, #16
 800454e:	d802      	bhi.n	8004556 <UART_SetConfig+0x162>
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <UART_SetConfig+0x16c>
 8004554:	e010      	b.n	8004578 <UART_SetConfig+0x184>
 8004556:	2b20      	cmp	r3, #32
 8004558:	d005      	beq.n	8004566 <UART_SetConfig+0x172>
 800455a:	2b30      	cmp	r3, #48	; 0x30
 800455c:	d009      	beq.n	8004572 <UART_SetConfig+0x17e>
 800455e:	e00b      	b.n	8004578 <UART_SetConfig+0x184>
 8004560:	2300      	movs	r3, #0
 8004562:	76fb      	strb	r3, [r7, #27]
 8004564:	e088      	b.n	8004678 <UART_SetConfig+0x284>
 8004566:	2302      	movs	r3, #2
 8004568:	76fb      	strb	r3, [r7, #27]
 800456a:	e085      	b.n	8004678 <UART_SetConfig+0x284>
 800456c:	2304      	movs	r3, #4
 800456e:	76fb      	strb	r3, [r7, #27]
 8004570:	e082      	b.n	8004678 <UART_SetConfig+0x284>
 8004572:	2308      	movs	r3, #8
 8004574:	76fb      	strb	r3, [r7, #27]
 8004576:	e07f      	b.n	8004678 <UART_SetConfig+0x284>
 8004578:	2310      	movs	r3, #16
 800457a:	76fb      	strb	r3, [r7, #27]
 800457c:	bf00      	nop
 800457e:	e07b      	b.n	8004678 <UART_SetConfig+0x284>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a59      	ldr	r2, [pc, #356]	; (80046ec <UART_SetConfig+0x2f8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d120      	bne.n	80045cc <UART_SetConfig+0x1d8>
 800458a:	4b55      	ldr	r3, [pc, #340]	; (80046e0 <UART_SetConfig+0x2ec>)
 800458c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004590:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004594:	2b40      	cmp	r3, #64	; 0x40
 8004596:	d00f      	beq.n	80045b8 <UART_SetConfig+0x1c4>
 8004598:	2b40      	cmp	r3, #64	; 0x40
 800459a:	d802      	bhi.n	80045a2 <UART_SetConfig+0x1ae>
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <UART_SetConfig+0x1b8>
 80045a0:	e010      	b.n	80045c4 <UART_SetConfig+0x1d0>
 80045a2:	2b80      	cmp	r3, #128	; 0x80
 80045a4:	d005      	beq.n	80045b2 <UART_SetConfig+0x1be>
 80045a6:	2bc0      	cmp	r3, #192	; 0xc0
 80045a8:	d009      	beq.n	80045be <UART_SetConfig+0x1ca>
 80045aa:	e00b      	b.n	80045c4 <UART_SetConfig+0x1d0>
 80045ac:	2300      	movs	r3, #0
 80045ae:	76fb      	strb	r3, [r7, #27]
 80045b0:	e062      	b.n	8004678 <UART_SetConfig+0x284>
 80045b2:	2302      	movs	r3, #2
 80045b4:	76fb      	strb	r3, [r7, #27]
 80045b6:	e05f      	b.n	8004678 <UART_SetConfig+0x284>
 80045b8:	2304      	movs	r3, #4
 80045ba:	76fb      	strb	r3, [r7, #27]
 80045bc:	e05c      	b.n	8004678 <UART_SetConfig+0x284>
 80045be:	2308      	movs	r3, #8
 80045c0:	76fb      	strb	r3, [r7, #27]
 80045c2:	e059      	b.n	8004678 <UART_SetConfig+0x284>
 80045c4:	2310      	movs	r3, #16
 80045c6:	76fb      	strb	r3, [r7, #27]
 80045c8:	bf00      	nop
 80045ca:	e055      	b.n	8004678 <UART_SetConfig+0x284>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a47      	ldr	r2, [pc, #284]	; (80046f0 <UART_SetConfig+0x2fc>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d124      	bne.n	8004620 <UART_SetConfig+0x22c>
 80045d6:	4b42      	ldr	r3, [pc, #264]	; (80046e0 <UART_SetConfig+0x2ec>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045e4:	d012      	beq.n	800460c <UART_SetConfig+0x218>
 80045e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ea:	d802      	bhi.n	80045f2 <UART_SetConfig+0x1fe>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d007      	beq.n	8004600 <UART_SetConfig+0x20c>
 80045f0:	e012      	b.n	8004618 <UART_SetConfig+0x224>
 80045f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f6:	d006      	beq.n	8004606 <UART_SetConfig+0x212>
 80045f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045fc:	d009      	beq.n	8004612 <UART_SetConfig+0x21e>
 80045fe:	e00b      	b.n	8004618 <UART_SetConfig+0x224>
 8004600:	2300      	movs	r3, #0
 8004602:	76fb      	strb	r3, [r7, #27]
 8004604:	e038      	b.n	8004678 <UART_SetConfig+0x284>
 8004606:	2302      	movs	r3, #2
 8004608:	76fb      	strb	r3, [r7, #27]
 800460a:	e035      	b.n	8004678 <UART_SetConfig+0x284>
 800460c:	2304      	movs	r3, #4
 800460e:	76fb      	strb	r3, [r7, #27]
 8004610:	e032      	b.n	8004678 <UART_SetConfig+0x284>
 8004612:	2308      	movs	r3, #8
 8004614:	76fb      	strb	r3, [r7, #27]
 8004616:	e02f      	b.n	8004678 <UART_SetConfig+0x284>
 8004618:	2310      	movs	r3, #16
 800461a:	76fb      	strb	r3, [r7, #27]
 800461c:	bf00      	nop
 800461e:	e02b      	b.n	8004678 <UART_SetConfig+0x284>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a2c      	ldr	r2, [pc, #176]	; (80046d8 <UART_SetConfig+0x2e4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d124      	bne.n	8004674 <UART_SetConfig+0x280>
 800462a:	4b2d      	ldr	r3, [pc, #180]	; (80046e0 <UART_SetConfig+0x2ec>)
 800462c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004630:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004638:	d012      	beq.n	8004660 <UART_SetConfig+0x26c>
 800463a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800463e:	d802      	bhi.n	8004646 <UART_SetConfig+0x252>
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <UART_SetConfig+0x260>
 8004644:	e012      	b.n	800466c <UART_SetConfig+0x278>
 8004646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800464a:	d006      	beq.n	800465a <UART_SetConfig+0x266>
 800464c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004650:	d009      	beq.n	8004666 <UART_SetConfig+0x272>
 8004652:	e00b      	b.n	800466c <UART_SetConfig+0x278>
 8004654:	2300      	movs	r3, #0
 8004656:	76fb      	strb	r3, [r7, #27]
 8004658:	e00e      	b.n	8004678 <UART_SetConfig+0x284>
 800465a:	2302      	movs	r3, #2
 800465c:	76fb      	strb	r3, [r7, #27]
 800465e:	e00b      	b.n	8004678 <UART_SetConfig+0x284>
 8004660:	2304      	movs	r3, #4
 8004662:	76fb      	strb	r3, [r7, #27]
 8004664:	e008      	b.n	8004678 <UART_SetConfig+0x284>
 8004666:	2308      	movs	r3, #8
 8004668:	76fb      	strb	r3, [r7, #27]
 800466a:	e005      	b.n	8004678 <UART_SetConfig+0x284>
 800466c:	2310      	movs	r3, #16
 800466e:	76fb      	strb	r3, [r7, #27]
 8004670:	bf00      	nop
 8004672:	e001      	b.n	8004678 <UART_SetConfig+0x284>
 8004674:	2310      	movs	r3, #16
 8004676:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a16      	ldr	r2, [pc, #88]	; (80046d8 <UART_SetConfig+0x2e4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	f040 8087 	bne.w	8004792 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004684:	7efb      	ldrb	r3, [r7, #27]
 8004686:	2b08      	cmp	r3, #8
 8004688:	d836      	bhi.n	80046f8 <UART_SetConfig+0x304>
 800468a:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <UART_SetConfig+0x29c>)
 800468c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004690:	080046b5 	.word	0x080046b5
 8004694:	080046f9 	.word	0x080046f9
 8004698:	080046bd 	.word	0x080046bd
 800469c:	080046f9 	.word	0x080046f9
 80046a0:	080046c3 	.word	0x080046c3
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	080046f9 	.word	0x080046f9
 80046ac:	080046f9 	.word	0x080046f9
 80046b0:	080046cb 	.word	0x080046cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b4:	f7fe fec2 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 80046b8:	6178      	str	r0, [r7, #20]
        break;
 80046ba:	e022      	b.n	8004702 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046bc:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <UART_SetConfig+0x300>)
 80046be:	617b      	str	r3, [r7, #20]
        break;
 80046c0:	e01f      	b.n	8004702 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046c2:	f7fe fe25 	bl	8003310 <HAL_RCC_GetSysClockFreq>
 80046c6:	6178      	str	r0, [r7, #20]
        break;
 80046c8:	e01b      	b.n	8004702 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ce:	617b      	str	r3, [r7, #20]
        break;
 80046d0:	e017      	b.n	8004702 <UART_SetConfig+0x30e>
 80046d2:	bf00      	nop
 80046d4:	efff69f3 	.word	0xefff69f3
 80046d8:	40008000 	.word	0x40008000
 80046dc:	40013800 	.word	0x40013800
 80046e0:	40021000 	.word	0x40021000
 80046e4:	40004400 	.word	0x40004400
 80046e8:	40004800 	.word	0x40004800
 80046ec:	40004c00 	.word	0x40004c00
 80046f0:	40005000 	.word	0x40005000
 80046f4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	76bb      	strb	r3, [r7, #26]
        break;
 8004700:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 80f1 	beq.w	80048ec <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	4413      	add	r3, r2
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	429a      	cmp	r2, r3
 8004718:	d305      	bcc.n	8004726 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	429a      	cmp	r2, r3
 8004724:	d902      	bls.n	800472c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	76bb      	strb	r3, [r7, #26]
 800472a:	e0df      	b.n	80048ec <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	4619      	mov	r1, r3
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	f04f 0400 	mov.w	r4, #0
 800473c:	0214      	lsls	r4, r2, #8
 800473e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004742:	020b      	lsls	r3, r1, #8
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6852      	ldr	r2, [r2, #4]
 8004748:	0852      	lsrs	r2, r2, #1
 800474a:	4611      	mov	r1, r2
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	eb13 0b01 	adds.w	fp, r3, r1
 8004754:	eb44 0c02 	adc.w	ip, r4, r2
 8004758:	4658      	mov	r0, fp
 800475a:	4661      	mov	r1, ip
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f04f 0400 	mov.w	r4, #0
 8004764:	461a      	mov	r2, r3
 8004766:	4623      	mov	r3, r4
 8004768:	f7fb fd82 	bl	8000270 <__aeabi_uldivmod>
 800476c:	4603      	mov	r3, r0
 800476e:	460c      	mov	r4, r1
 8004770:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004778:	d308      	bcc.n	800478c <UART_SetConfig+0x398>
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004780:	d204      	bcs.n	800478c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	60da      	str	r2, [r3, #12]
 800478a:	e0af      	b.n	80048ec <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	76bb      	strb	r3, [r7, #26]
 8004790:	e0ac      	b.n	80048ec <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800479a:	d15b      	bne.n	8004854 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800479c:	7efb      	ldrb	r3, [r7, #27]
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d827      	bhi.n	80047f2 <UART_SetConfig+0x3fe>
 80047a2:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <UART_SetConfig+0x3b4>)
 80047a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	080047d5 	.word	0x080047d5
 80047b0:	080047dd 	.word	0x080047dd
 80047b4:	080047f3 	.word	0x080047f3
 80047b8:	080047e3 	.word	0x080047e3
 80047bc:	080047f3 	.word	0x080047f3
 80047c0:	080047f3 	.word	0x080047f3
 80047c4:	080047f3 	.word	0x080047f3
 80047c8:	080047eb 	.word	0x080047eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047cc:	f7fe fe36 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 80047d0:	6178      	str	r0, [r7, #20]
        break;
 80047d2:	e013      	b.n	80047fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047d4:	f7fe fe48 	bl	8003468 <HAL_RCC_GetPCLK2Freq>
 80047d8:	6178      	str	r0, [r7, #20]
        break;
 80047da:	e00f      	b.n	80047fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047dc:	4b49      	ldr	r3, [pc, #292]	; (8004904 <UART_SetConfig+0x510>)
 80047de:	617b      	str	r3, [r7, #20]
        break;
 80047e0:	e00c      	b.n	80047fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047e2:	f7fe fd95 	bl	8003310 <HAL_RCC_GetSysClockFreq>
 80047e6:	6178      	str	r0, [r7, #20]
        break;
 80047e8:	e008      	b.n	80047fc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ee:	617b      	str	r3, [r7, #20]
        break;
 80047f0:	e004      	b.n	80047fc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	76bb      	strb	r3, [r7, #26]
        break;
 80047fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d074      	beq.n	80048ec <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	005a      	lsls	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	085b      	lsrs	r3, r3, #1
 800480c:	441a      	add	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	fbb2 f3f3 	udiv	r3, r2, r3
 8004816:	b29b      	uxth	r3, r3
 8004818:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	2b0f      	cmp	r3, #15
 800481e:	d916      	bls.n	800484e <UART_SetConfig+0x45a>
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004826:	d212      	bcs.n	800484e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	b29b      	uxth	r3, r3
 800482c:	f023 030f 	bic.w	r3, r3, #15
 8004830:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	085b      	lsrs	r3, r3, #1
 8004836:	b29b      	uxth	r3, r3
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	b29a      	uxth	r2, r3
 800483e:	89fb      	ldrh	r3, [r7, #14]
 8004840:	4313      	orrs	r3, r2
 8004842:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	89fa      	ldrh	r2, [r7, #14]
 800484a:	60da      	str	r2, [r3, #12]
 800484c:	e04e      	b.n	80048ec <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	76bb      	strb	r3, [r7, #26]
 8004852:	e04b      	b.n	80048ec <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004854:	7efb      	ldrb	r3, [r7, #27]
 8004856:	2b08      	cmp	r3, #8
 8004858:	d827      	bhi.n	80048aa <UART_SetConfig+0x4b6>
 800485a:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <UART_SetConfig+0x46c>)
 800485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004860:	08004885 	.word	0x08004885
 8004864:	0800488d 	.word	0x0800488d
 8004868:	08004895 	.word	0x08004895
 800486c:	080048ab 	.word	0x080048ab
 8004870:	0800489b 	.word	0x0800489b
 8004874:	080048ab 	.word	0x080048ab
 8004878:	080048ab 	.word	0x080048ab
 800487c:	080048ab 	.word	0x080048ab
 8004880:	080048a3 	.word	0x080048a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004884:	f7fe fdda 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 8004888:	6178      	str	r0, [r7, #20]
        break;
 800488a:	e013      	b.n	80048b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800488c:	f7fe fdec 	bl	8003468 <HAL_RCC_GetPCLK2Freq>
 8004890:	6178      	str	r0, [r7, #20]
        break;
 8004892:	e00f      	b.n	80048b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004894:	4b1b      	ldr	r3, [pc, #108]	; (8004904 <UART_SetConfig+0x510>)
 8004896:	617b      	str	r3, [r7, #20]
        break;
 8004898:	e00c      	b.n	80048b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800489a:	f7fe fd39 	bl	8003310 <HAL_RCC_GetSysClockFreq>
 800489e:	6178      	str	r0, [r7, #20]
        break;
 80048a0:	e008      	b.n	80048b4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a6:	617b      	str	r3, [r7, #20]
        break;
 80048a8:	e004      	b.n	80048b4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	76bb      	strb	r3, [r7, #26]
        break;
 80048b2:	bf00      	nop
    }

    if (pclk != 0U)
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d018      	beq.n	80048ec <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	085a      	lsrs	r2, r3, #1
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	441a      	add	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	2b0f      	cmp	r3, #15
 80048d4:	d908      	bls.n	80048e8 <UART_SetConfig+0x4f4>
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048dc:	d204      	bcs.n	80048e8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	60da      	str	r2, [r3, #12]
 80048e6:	e001      	b.n	80048ec <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80048f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3720      	adds	r7, #32
 80048fe:	46bd      	mov	sp, r7
 8004900:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004904:	00f42400 	.word	0x00f42400

08004908 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	f003 0310 	and.w	r3, r3, #16
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01a      	beq.n	8004a1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a06:	d10a      	bne.n	8004a1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	605a      	str	r2, [r3, #4]
  }
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af02      	add	r7, sp, #8
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004a5a:	f7fc fb7d 	bl	8001158 <HAL_GetTick>
 8004a5e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0308 	and.w	r3, r3, #8
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d10e      	bne.n	8004a8c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f82a 	bl	8004ad6 <UART_WaitOnFlagUntilTimeout>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e020      	b.n	8004ace <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0304 	and.w	r3, r3, #4
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d10e      	bne.n	8004ab8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f814 	bl	8004ad6 <UART_WaitOnFlagUntilTimeout>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e00a      	b.n	8004ace <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2220      	movs	r2, #32
 8004abc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	60f8      	str	r0, [r7, #12]
 8004ade:	60b9      	str	r1, [r7, #8]
 8004ae0:	603b      	str	r3, [r7, #0]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae6:	e05d      	b.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aee:	d059      	beq.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af0:	f7fc fb32 	bl	8001158 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d302      	bcc.n	8004b06 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d11b      	bne.n	8004b3e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b14:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0201 	bic.w	r2, r2, #1
 8004b24:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e042      	b.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d02b      	beq.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b5a:	d123      	bne.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b74:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0201 	bic.w	r2, r2, #1
 8004b84:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2220      	movs	r2, #32
 8004b96:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e00f      	b.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	69da      	ldr	r2, [r3, #28]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	4013      	ands	r3, r2
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	bf0c      	ite	eq
 8004bb4:	2301      	moveq	r3, #1
 8004bb6:	2300      	movne	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	79fb      	ldrb	r3, [r7, #7]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d092      	beq.n	8004ae8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <_ZdlPvj>:
 8004bcc:	f000 b800 	b.w	8004bd0 <_ZdlPv>

08004bd0 <_ZdlPv>:
 8004bd0:	f000 b82a 	b.w	8004c28 <free>

08004bd4 <__errno>:
 8004bd4:	4b01      	ldr	r3, [pc, #4]	; (8004bdc <__errno+0x8>)
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	2000000c 	.word	0x2000000c

08004be0 <__libc_init_array>:
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	4e0d      	ldr	r6, [pc, #52]	; (8004c18 <__libc_init_array+0x38>)
 8004be4:	4c0d      	ldr	r4, [pc, #52]	; (8004c1c <__libc_init_array+0x3c>)
 8004be6:	1ba4      	subs	r4, r4, r6
 8004be8:	10a4      	asrs	r4, r4, #2
 8004bea:	2500      	movs	r5, #0
 8004bec:	42a5      	cmp	r5, r4
 8004bee:	d109      	bne.n	8004c04 <__libc_init_array+0x24>
 8004bf0:	4e0b      	ldr	r6, [pc, #44]	; (8004c20 <__libc_init_array+0x40>)
 8004bf2:	4c0c      	ldr	r4, [pc, #48]	; (8004c24 <__libc_init_array+0x44>)
 8004bf4:	f000 fc48 	bl	8005488 <_init>
 8004bf8:	1ba4      	subs	r4, r4, r6
 8004bfa:	10a4      	asrs	r4, r4, #2
 8004bfc:	2500      	movs	r5, #0
 8004bfe:	42a5      	cmp	r5, r4
 8004c00:	d105      	bne.n	8004c0e <__libc_init_array+0x2e>
 8004c02:	bd70      	pop	{r4, r5, r6, pc}
 8004c04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c08:	4798      	blx	r3
 8004c0a:	3501      	adds	r5, #1
 8004c0c:	e7ee      	b.n	8004bec <__libc_init_array+0xc>
 8004c0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c12:	4798      	blx	r3
 8004c14:	3501      	adds	r5, #1
 8004c16:	e7f2      	b.n	8004bfe <__libc_init_array+0x1e>
 8004c18:	0800558c 	.word	0x0800558c
 8004c1c:	0800558c 	.word	0x0800558c
 8004c20:	0800558c 	.word	0x0800558c
 8004c24:	08005590 	.word	0x08005590

08004c28 <free>:
 8004c28:	4b02      	ldr	r3, [pc, #8]	; (8004c34 <free+0xc>)
 8004c2a:	4601      	mov	r1, r0
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	f000 b80b 	b.w	8004c48 <_free_r>
 8004c32:	bf00      	nop
 8004c34:	2000000c 	.word	0x2000000c

08004c38 <memset>:
 8004c38:	4402      	add	r2, r0
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d100      	bne.n	8004c42 <memset+0xa>
 8004c40:	4770      	bx	lr
 8004c42:	f803 1b01 	strb.w	r1, [r3], #1
 8004c46:	e7f9      	b.n	8004c3c <memset+0x4>

08004c48 <_free_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4605      	mov	r5, r0
 8004c4c:	2900      	cmp	r1, #0
 8004c4e:	d045      	beq.n	8004cdc <_free_r+0x94>
 8004c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c54:	1f0c      	subs	r4, r1, #4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	bfb8      	it	lt
 8004c5a:	18e4      	addlt	r4, r4, r3
 8004c5c:	f000 f8e6 	bl	8004e2c <__malloc_lock>
 8004c60:	4a1f      	ldr	r2, [pc, #124]	; (8004ce0 <_free_r+0x98>)
 8004c62:	6813      	ldr	r3, [r2, #0]
 8004c64:	4610      	mov	r0, r2
 8004c66:	b933      	cbnz	r3, 8004c76 <_free_r+0x2e>
 8004c68:	6063      	str	r3, [r4, #4]
 8004c6a:	6014      	str	r4, [r2, #0]
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c72:	f000 b8dc 	b.w	8004e2e <__malloc_unlock>
 8004c76:	42a3      	cmp	r3, r4
 8004c78:	d90c      	bls.n	8004c94 <_free_r+0x4c>
 8004c7a:	6821      	ldr	r1, [r4, #0]
 8004c7c:	1862      	adds	r2, r4, r1
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	bf04      	itt	eq
 8004c82:	681a      	ldreq	r2, [r3, #0]
 8004c84:	685b      	ldreq	r3, [r3, #4]
 8004c86:	6063      	str	r3, [r4, #4]
 8004c88:	bf04      	itt	eq
 8004c8a:	1852      	addeq	r2, r2, r1
 8004c8c:	6022      	streq	r2, [r4, #0]
 8004c8e:	6004      	str	r4, [r0, #0]
 8004c90:	e7ec      	b.n	8004c6c <_free_r+0x24>
 8004c92:	4613      	mov	r3, r2
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	b10a      	cbz	r2, 8004c9c <_free_r+0x54>
 8004c98:	42a2      	cmp	r2, r4
 8004c9a:	d9fa      	bls.n	8004c92 <_free_r+0x4a>
 8004c9c:	6819      	ldr	r1, [r3, #0]
 8004c9e:	1858      	adds	r0, r3, r1
 8004ca0:	42a0      	cmp	r0, r4
 8004ca2:	d10b      	bne.n	8004cbc <_free_r+0x74>
 8004ca4:	6820      	ldr	r0, [r4, #0]
 8004ca6:	4401      	add	r1, r0
 8004ca8:	1858      	adds	r0, r3, r1
 8004caa:	4282      	cmp	r2, r0
 8004cac:	6019      	str	r1, [r3, #0]
 8004cae:	d1dd      	bne.n	8004c6c <_free_r+0x24>
 8004cb0:	6810      	ldr	r0, [r2, #0]
 8004cb2:	6852      	ldr	r2, [r2, #4]
 8004cb4:	605a      	str	r2, [r3, #4]
 8004cb6:	4401      	add	r1, r0
 8004cb8:	6019      	str	r1, [r3, #0]
 8004cba:	e7d7      	b.n	8004c6c <_free_r+0x24>
 8004cbc:	d902      	bls.n	8004cc4 <_free_r+0x7c>
 8004cbe:	230c      	movs	r3, #12
 8004cc0:	602b      	str	r3, [r5, #0]
 8004cc2:	e7d3      	b.n	8004c6c <_free_r+0x24>
 8004cc4:	6820      	ldr	r0, [r4, #0]
 8004cc6:	1821      	adds	r1, r4, r0
 8004cc8:	428a      	cmp	r2, r1
 8004cca:	bf04      	itt	eq
 8004ccc:	6811      	ldreq	r1, [r2, #0]
 8004cce:	6852      	ldreq	r2, [r2, #4]
 8004cd0:	6062      	str	r2, [r4, #4]
 8004cd2:	bf04      	itt	eq
 8004cd4:	1809      	addeq	r1, r1, r0
 8004cd6:	6021      	streq	r1, [r4, #0]
 8004cd8:	605c      	str	r4, [r3, #4]
 8004cda:	e7c7      	b.n	8004c6c <_free_r+0x24>
 8004cdc:	bd38      	pop	{r3, r4, r5, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000254 	.word	0x20000254

08004ce4 <_malloc_r>:
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	1ccd      	adds	r5, r1, #3
 8004ce8:	f025 0503 	bic.w	r5, r5, #3
 8004cec:	3508      	adds	r5, #8
 8004cee:	2d0c      	cmp	r5, #12
 8004cf0:	bf38      	it	cc
 8004cf2:	250c      	movcc	r5, #12
 8004cf4:	2d00      	cmp	r5, #0
 8004cf6:	4606      	mov	r6, r0
 8004cf8:	db01      	blt.n	8004cfe <_malloc_r+0x1a>
 8004cfa:	42a9      	cmp	r1, r5
 8004cfc:	d903      	bls.n	8004d06 <_malloc_r+0x22>
 8004cfe:	230c      	movs	r3, #12
 8004d00:	6033      	str	r3, [r6, #0]
 8004d02:	2000      	movs	r0, #0
 8004d04:	bd70      	pop	{r4, r5, r6, pc}
 8004d06:	f000 f891 	bl	8004e2c <__malloc_lock>
 8004d0a:	4a21      	ldr	r2, [pc, #132]	; (8004d90 <_malloc_r+0xac>)
 8004d0c:	6814      	ldr	r4, [r2, #0]
 8004d0e:	4621      	mov	r1, r4
 8004d10:	b991      	cbnz	r1, 8004d38 <_malloc_r+0x54>
 8004d12:	4c20      	ldr	r4, [pc, #128]	; (8004d94 <_malloc_r+0xb0>)
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	b91b      	cbnz	r3, 8004d20 <_malloc_r+0x3c>
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f000 f83d 	bl	8004d98 <_sbrk_r>
 8004d1e:	6020      	str	r0, [r4, #0]
 8004d20:	4629      	mov	r1, r5
 8004d22:	4630      	mov	r0, r6
 8004d24:	f000 f838 	bl	8004d98 <_sbrk_r>
 8004d28:	1c43      	adds	r3, r0, #1
 8004d2a:	d124      	bne.n	8004d76 <_malloc_r+0x92>
 8004d2c:	230c      	movs	r3, #12
 8004d2e:	6033      	str	r3, [r6, #0]
 8004d30:	4630      	mov	r0, r6
 8004d32:	f000 f87c 	bl	8004e2e <__malloc_unlock>
 8004d36:	e7e4      	b.n	8004d02 <_malloc_r+0x1e>
 8004d38:	680b      	ldr	r3, [r1, #0]
 8004d3a:	1b5b      	subs	r3, r3, r5
 8004d3c:	d418      	bmi.n	8004d70 <_malloc_r+0x8c>
 8004d3e:	2b0b      	cmp	r3, #11
 8004d40:	d90f      	bls.n	8004d62 <_malloc_r+0x7e>
 8004d42:	600b      	str	r3, [r1, #0]
 8004d44:	50cd      	str	r5, [r1, r3]
 8004d46:	18cc      	adds	r4, r1, r3
 8004d48:	4630      	mov	r0, r6
 8004d4a:	f000 f870 	bl	8004e2e <__malloc_unlock>
 8004d4e:	f104 000b 	add.w	r0, r4, #11
 8004d52:	1d23      	adds	r3, r4, #4
 8004d54:	f020 0007 	bic.w	r0, r0, #7
 8004d58:	1ac3      	subs	r3, r0, r3
 8004d5a:	d0d3      	beq.n	8004d04 <_malloc_r+0x20>
 8004d5c:	425a      	negs	r2, r3
 8004d5e:	50e2      	str	r2, [r4, r3]
 8004d60:	e7d0      	b.n	8004d04 <_malloc_r+0x20>
 8004d62:	428c      	cmp	r4, r1
 8004d64:	684b      	ldr	r3, [r1, #4]
 8004d66:	bf16      	itet	ne
 8004d68:	6063      	strne	r3, [r4, #4]
 8004d6a:	6013      	streq	r3, [r2, #0]
 8004d6c:	460c      	movne	r4, r1
 8004d6e:	e7eb      	b.n	8004d48 <_malloc_r+0x64>
 8004d70:	460c      	mov	r4, r1
 8004d72:	6849      	ldr	r1, [r1, #4]
 8004d74:	e7cc      	b.n	8004d10 <_malloc_r+0x2c>
 8004d76:	1cc4      	adds	r4, r0, #3
 8004d78:	f024 0403 	bic.w	r4, r4, #3
 8004d7c:	42a0      	cmp	r0, r4
 8004d7e:	d005      	beq.n	8004d8c <_malloc_r+0xa8>
 8004d80:	1a21      	subs	r1, r4, r0
 8004d82:	4630      	mov	r0, r6
 8004d84:	f000 f808 	bl	8004d98 <_sbrk_r>
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d0cf      	beq.n	8004d2c <_malloc_r+0x48>
 8004d8c:	6025      	str	r5, [r4, #0]
 8004d8e:	e7db      	b.n	8004d48 <_malloc_r+0x64>
 8004d90:	20000254 	.word	0x20000254
 8004d94:	20000258 	.word	0x20000258

08004d98 <_sbrk_r>:
 8004d98:	b538      	push	{r3, r4, r5, lr}
 8004d9a:	4c06      	ldr	r4, [pc, #24]	; (8004db4 <_sbrk_r+0x1c>)
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	4605      	mov	r5, r0
 8004da0:	4608      	mov	r0, r1
 8004da2:	6023      	str	r3, [r4, #0]
 8004da4:	f7fc f8d2 	bl	8000f4c <_sbrk>
 8004da8:	1c43      	adds	r3, r0, #1
 8004daa:	d102      	bne.n	8004db2 <_sbrk_r+0x1a>
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	b103      	cbz	r3, 8004db2 <_sbrk_r+0x1a>
 8004db0:	602b      	str	r3, [r5, #0]
 8004db2:	bd38      	pop	{r3, r4, r5, pc}
 8004db4:	20000260 	.word	0x20000260

08004db8 <siprintf>:
 8004db8:	b40e      	push	{r1, r2, r3}
 8004dba:	b500      	push	{lr}
 8004dbc:	b09c      	sub	sp, #112	; 0x70
 8004dbe:	ab1d      	add	r3, sp, #116	; 0x74
 8004dc0:	9002      	str	r0, [sp, #8]
 8004dc2:	9006      	str	r0, [sp, #24]
 8004dc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dc8:	4809      	ldr	r0, [pc, #36]	; (8004df0 <siprintf+0x38>)
 8004dca:	9107      	str	r1, [sp, #28]
 8004dcc:	9104      	str	r1, [sp, #16]
 8004dce:	4909      	ldr	r1, [pc, #36]	; (8004df4 <siprintf+0x3c>)
 8004dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dd4:	9105      	str	r1, [sp, #20]
 8004dd6:	6800      	ldr	r0, [r0, #0]
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	a902      	add	r1, sp, #8
 8004ddc:	f000 f882 	bl	8004ee4 <_svfiprintf_r>
 8004de0:	9b02      	ldr	r3, [sp, #8]
 8004de2:	2200      	movs	r2, #0
 8004de4:	701a      	strb	r2, [r3, #0]
 8004de6:	b01c      	add	sp, #112	; 0x70
 8004de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dec:	b003      	add	sp, #12
 8004dee:	4770      	bx	lr
 8004df0:	2000000c 	.word	0x2000000c
 8004df4:	ffff0208 	.word	0xffff0208

08004df8 <strstr>:
 8004df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dfa:	7803      	ldrb	r3, [r0, #0]
 8004dfc:	b17b      	cbz	r3, 8004e1e <strstr+0x26>
 8004dfe:	4604      	mov	r4, r0
 8004e00:	7823      	ldrb	r3, [r4, #0]
 8004e02:	4620      	mov	r0, r4
 8004e04:	1c66      	adds	r6, r4, #1
 8004e06:	b17b      	cbz	r3, 8004e28 <strstr+0x30>
 8004e08:	1e4a      	subs	r2, r1, #1
 8004e0a:	1e63      	subs	r3, r4, #1
 8004e0c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8004e10:	b14d      	cbz	r5, 8004e26 <strstr+0x2e>
 8004e12:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004e16:	42af      	cmp	r7, r5
 8004e18:	4634      	mov	r4, r6
 8004e1a:	d0f7      	beq.n	8004e0c <strstr+0x14>
 8004e1c:	e7f0      	b.n	8004e00 <strstr+0x8>
 8004e1e:	780b      	ldrb	r3, [r1, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bf18      	it	ne
 8004e24:	2000      	movne	r0, #0
 8004e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	e7fc      	b.n	8004e26 <strstr+0x2e>

08004e2c <__malloc_lock>:
 8004e2c:	4770      	bx	lr

08004e2e <__malloc_unlock>:
 8004e2e:	4770      	bx	lr

08004e30 <__ssputs_r>:
 8004e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e34:	688e      	ldr	r6, [r1, #8]
 8004e36:	429e      	cmp	r6, r3
 8004e38:	4682      	mov	sl, r0
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	4690      	mov	r8, r2
 8004e3e:	4699      	mov	r9, r3
 8004e40:	d837      	bhi.n	8004eb2 <__ssputs_r+0x82>
 8004e42:	898a      	ldrh	r2, [r1, #12]
 8004e44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e48:	d031      	beq.n	8004eae <__ssputs_r+0x7e>
 8004e4a:	6825      	ldr	r5, [r4, #0]
 8004e4c:	6909      	ldr	r1, [r1, #16]
 8004e4e:	1a6f      	subs	r7, r5, r1
 8004e50:	6965      	ldr	r5, [r4, #20]
 8004e52:	2302      	movs	r3, #2
 8004e54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e58:	fb95 f5f3 	sdiv	r5, r5, r3
 8004e5c:	f109 0301 	add.w	r3, r9, #1
 8004e60:	443b      	add	r3, r7
 8004e62:	429d      	cmp	r5, r3
 8004e64:	bf38      	it	cc
 8004e66:	461d      	movcc	r5, r3
 8004e68:	0553      	lsls	r3, r2, #21
 8004e6a:	d530      	bpl.n	8004ece <__ssputs_r+0x9e>
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	f7ff ff39 	bl	8004ce4 <_malloc_r>
 8004e72:	4606      	mov	r6, r0
 8004e74:	b950      	cbnz	r0, 8004e8c <__ssputs_r+0x5c>
 8004e76:	230c      	movs	r3, #12
 8004e78:	f8ca 3000 	str.w	r3, [sl]
 8004e7c:	89a3      	ldrh	r3, [r4, #12]
 8004e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e82:	81a3      	strh	r3, [r4, #12]
 8004e84:	f04f 30ff 	mov.w	r0, #4294967295
 8004e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e8c:	463a      	mov	r2, r7
 8004e8e:	6921      	ldr	r1, [r4, #16]
 8004e90:	f000 faa8 	bl	80053e4 <memcpy>
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9e:	81a3      	strh	r3, [r4, #12]
 8004ea0:	6126      	str	r6, [r4, #16]
 8004ea2:	6165      	str	r5, [r4, #20]
 8004ea4:	443e      	add	r6, r7
 8004ea6:	1bed      	subs	r5, r5, r7
 8004ea8:	6026      	str	r6, [r4, #0]
 8004eaa:	60a5      	str	r5, [r4, #8]
 8004eac:	464e      	mov	r6, r9
 8004eae:	454e      	cmp	r6, r9
 8004eb0:	d900      	bls.n	8004eb4 <__ssputs_r+0x84>
 8004eb2:	464e      	mov	r6, r9
 8004eb4:	4632      	mov	r2, r6
 8004eb6:	4641      	mov	r1, r8
 8004eb8:	6820      	ldr	r0, [r4, #0]
 8004eba:	f000 fa9e 	bl	80053fa <memmove>
 8004ebe:	68a3      	ldr	r3, [r4, #8]
 8004ec0:	1b9b      	subs	r3, r3, r6
 8004ec2:	60a3      	str	r3, [r4, #8]
 8004ec4:	6823      	ldr	r3, [r4, #0]
 8004ec6:	441e      	add	r6, r3
 8004ec8:	6026      	str	r6, [r4, #0]
 8004eca:	2000      	movs	r0, #0
 8004ecc:	e7dc      	b.n	8004e88 <__ssputs_r+0x58>
 8004ece:	462a      	mov	r2, r5
 8004ed0:	f000 faac 	bl	800542c <_realloc_r>
 8004ed4:	4606      	mov	r6, r0
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	d1e2      	bne.n	8004ea0 <__ssputs_r+0x70>
 8004eda:	6921      	ldr	r1, [r4, #16]
 8004edc:	4650      	mov	r0, sl
 8004ede:	f7ff feb3 	bl	8004c48 <_free_r>
 8004ee2:	e7c8      	b.n	8004e76 <__ssputs_r+0x46>

08004ee4 <_svfiprintf_r>:
 8004ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee8:	461d      	mov	r5, r3
 8004eea:	898b      	ldrh	r3, [r1, #12]
 8004eec:	061f      	lsls	r7, r3, #24
 8004eee:	b09d      	sub	sp, #116	; 0x74
 8004ef0:	4680      	mov	r8, r0
 8004ef2:	460c      	mov	r4, r1
 8004ef4:	4616      	mov	r6, r2
 8004ef6:	d50f      	bpl.n	8004f18 <_svfiprintf_r+0x34>
 8004ef8:	690b      	ldr	r3, [r1, #16]
 8004efa:	b96b      	cbnz	r3, 8004f18 <_svfiprintf_r+0x34>
 8004efc:	2140      	movs	r1, #64	; 0x40
 8004efe:	f7ff fef1 	bl	8004ce4 <_malloc_r>
 8004f02:	6020      	str	r0, [r4, #0]
 8004f04:	6120      	str	r0, [r4, #16]
 8004f06:	b928      	cbnz	r0, 8004f14 <_svfiprintf_r+0x30>
 8004f08:	230c      	movs	r3, #12
 8004f0a:	f8c8 3000 	str.w	r3, [r8]
 8004f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f12:	e0c8      	b.n	80050a6 <_svfiprintf_r+0x1c2>
 8004f14:	2340      	movs	r3, #64	; 0x40
 8004f16:	6163      	str	r3, [r4, #20]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f1c:	2320      	movs	r3, #32
 8004f1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f22:	2330      	movs	r3, #48	; 0x30
 8004f24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f28:	9503      	str	r5, [sp, #12]
 8004f2a:	f04f 0b01 	mov.w	fp, #1
 8004f2e:	4637      	mov	r7, r6
 8004f30:	463d      	mov	r5, r7
 8004f32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f36:	b10b      	cbz	r3, 8004f3c <_svfiprintf_r+0x58>
 8004f38:	2b25      	cmp	r3, #37	; 0x25
 8004f3a:	d13e      	bne.n	8004fba <_svfiprintf_r+0xd6>
 8004f3c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004f40:	d00b      	beq.n	8004f5a <_svfiprintf_r+0x76>
 8004f42:	4653      	mov	r3, sl
 8004f44:	4632      	mov	r2, r6
 8004f46:	4621      	mov	r1, r4
 8004f48:	4640      	mov	r0, r8
 8004f4a:	f7ff ff71 	bl	8004e30 <__ssputs_r>
 8004f4e:	3001      	adds	r0, #1
 8004f50:	f000 80a4 	beq.w	800509c <_svfiprintf_r+0x1b8>
 8004f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f56:	4453      	add	r3, sl
 8004f58:	9309      	str	r3, [sp, #36]	; 0x24
 8004f5a:	783b      	ldrb	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 809d 	beq.w	800509c <_svfiprintf_r+0x1b8>
 8004f62:	2300      	movs	r3, #0
 8004f64:	f04f 32ff 	mov.w	r2, #4294967295
 8004f68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f6c:	9304      	str	r3, [sp, #16]
 8004f6e:	9307      	str	r3, [sp, #28]
 8004f70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f74:	931a      	str	r3, [sp, #104]	; 0x68
 8004f76:	462f      	mov	r7, r5
 8004f78:	2205      	movs	r2, #5
 8004f7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004f7e:	4850      	ldr	r0, [pc, #320]	; (80050c0 <_svfiprintf_r+0x1dc>)
 8004f80:	f7fb f926 	bl	80001d0 <memchr>
 8004f84:	9b04      	ldr	r3, [sp, #16]
 8004f86:	b9d0      	cbnz	r0, 8004fbe <_svfiprintf_r+0xda>
 8004f88:	06d9      	lsls	r1, r3, #27
 8004f8a:	bf44      	itt	mi
 8004f8c:	2220      	movmi	r2, #32
 8004f8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f92:	071a      	lsls	r2, r3, #28
 8004f94:	bf44      	itt	mi
 8004f96:	222b      	movmi	r2, #43	; 0x2b
 8004f98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f9c:	782a      	ldrb	r2, [r5, #0]
 8004f9e:	2a2a      	cmp	r2, #42	; 0x2a
 8004fa0:	d015      	beq.n	8004fce <_svfiprintf_r+0xea>
 8004fa2:	9a07      	ldr	r2, [sp, #28]
 8004fa4:	462f      	mov	r7, r5
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	250a      	movs	r5, #10
 8004faa:	4639      	mov	r1, r7
 8004fac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fb0:	3b30      	subs	r3, #48	; 0x30
 8004fb2:	2b09      	cmp	r3, #9
 8004fb4:	d94d      	bls.n	8005052 <_svfiprintf_r+0x16e>
 8004fb6:	b1b8      	cbz	r0, 8004fe8 <_svfiprintf_r+0x104>
 8004fb8:	e00f      	b.n	8004fda <_svfiprintf_r+0xf6>
 8004fba:	462f      	mov	r7, r5
 8004fbc:	e7b8      	b.n	8004f30 <_svfiprintf_r+0x4c>
 8004fbe:	4a40      	ldr	r2, [pc, #256]	; (80050c0 <_svfiprintf_r+0x1dc>)
 8004fc0:	1a80      	subs	r0, r0, r2
 8004fc2:	fa0b f000 	lsl.w	r0, fp, r0
 8004fc6:	4318      	orrs	r0, r3
 8004fc8:	9004      	str	r0, [sp, #16]
 8004fca:	463d      	mov	r5, r7
 8004fcc:	e7d3      	b.n	8004f76 <_svfiprintf_r+0x92>
 8004fce:	9a03      	ldr	r2, [sp, #12]
 8004fd0:	1d11      	adds	r1, r2, #4
 8004fd2:	6812      	ldr	r2, [r2, #0]
 8004fd4:	9103      	str	r1, [sp, #12]
 8004fd6:	2a00      	cmp	r2, #0
 8004fd8:	db01      	blt.n	8004fde <_svfiprintf_r+0xfa>
 8004fda:	9207      	str	r2, [sp, #28]
 8004fdc:	e004      	b.n	8004fe8 <_svfiprintf_r+0x104>
 8004fde:	4252      	negs	r2, r2
 8004fe0:	f043 0302 	orr.w	r3, r3, #2
 8004fe4:	9207      	str	r2, [sp, #28]
 8004fe6:	9304      	str	r3, [sp, #16]
 8004fe8:	783b      	ldrb	r3, [r7, #0]
 8004fea:	2b2e      	cmp	r3, #46	; 0x2e
 8004fec:	d10c      	bne.n	8005008 <_svfiprintf_r+0x124>
 8004fee:	787b      	ldrb	r3, [r7, #1]
 8004ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ff2:	d133      	bne.n	800505c <_svfiprintf_r+0x178>
 8004ff4:	9b03      	ldr	r3, [sp, #12]
 8004ff6:	1d1a      	adds	r2, r3, #4
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	9203      	str	r2, [sp, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	bfb8      	it	lt
 8005000:	f04f 33ff 	movlt.w	r3, #4294967295
 8005004:	3702      	adds	r7, #2
 8005006:	9305      	str	r3, [sp, #20]
 8005008:	4d2e      	ldr	r5, [pc, #184]	; (80050c4 <_svfiprintf_r+0x1e0>)
 800500a:	7839      	ldrb	r1, [r7, #0]
 800500c:	2203      	movs	r2, #3
 800500e:	4628      	mov	r0, r5
 8005010:	f7fb f8de 	bl	80001d0 <memchr>
 8005014:	b138      	cbz	r0, 8005026 <_svfiprintf_r+0x142>
 8005016:	2340      	movs	r3, #64	; 0x40
 8005018:	1b40      	subs	r0, r0, r5
 800501a:	fa03 f000 	lsl.w	r0, r3, r0
 800501e:	9b04      	ldr	r3, [sp, #16]
 8005020:	4303      	orrs	r3, r0
 8005022:	3701      	adds	r7, #1
 8005024:	9304      	str	r3, [sp, #16]
 8005026:	7839      	ldrb	r1, [r7, #0]
 8005028:	4827      	ldr	r0, [pc, #156]	; (80050c8 <_svfiprintf_r+0x1e4>)
 800502a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800502e:	2206      	movs	r2, #6
 8005030:	1c7e      	adds	r6, r7, #1
 8005032:	f7fb f8cd 	bl	80001d0 <memchr>
 8005036:	2800      	cmp	r0, #0
 8005038:	d038      	beq.n	80050ac <_svfiprintf_r+0x1c8>
 800503a:	4b24      	ldr	r3, [pc, #144]	; (80050cc <_svfiprintf_r+0x1e8>)
 800503c:	bb13      	cbnz	r3, 8005084 <_svfiprintf_r+0x1a0>
 800503e:	9b03      	ldr	r3, [sp, #12]
 8005040:	3307      	adds	r3, #7
 8005042:	f023 0307 	bic.w	r3, r3, #7
 8005046:	3308      	adds	r3, #8
 8005048:	9303      	str	r3, [sp, #12]
 800504a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800504c:	444b      	add	r3, r9
 800504e:	9309      	str	r3, [sp, #36]	; 0x24
 8005050:	e76d      	b.n	8004f2e <_svfiprintf_r+0x4a>
 8005052:	fb05 3202 	mla	r2, r5, r2, r3
 8005056:	2001      	movs	r0, #1
 8005058:	460f      	mov	r7, r1
 800505a:	e7a6      	b.n	8004faa <_svfiprintf_r+0xc6>
 800505c:	2300      	movs	r3, #0
 800505e:	3701      	adds	r7, #1
 8005060:	9305      	str	r3, [sp, #20]
 8005062:	4619      	mov	r1, r3
 8005064:	250a      	movs	r5, #10
 8005066:	4638      	mov	r0, r7
 8005068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800506c:	3a30      	subs	r2, #48	; 0x30
 800506e:	2a09      	cmp	r2, #9
 8005070:	d903      	bls.n	800507a <_svfiprintf_r+0x196>
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0c8      	beq.n	8005008 <_svfiprintf_r+0x124>
 8005076:	9105      	str	r1, [sp, #20]
 8005078:	e7c6      	b.n	8005008 <_svfiprintf_r+0x124>
 800507a:	fb05 2101 	mla	r1, r5, r1, r2
 800507e:	2301      	movs	r3, #1
 8005080:	4607      	mov	r7, r0
 8005082:	e7f0      	b.n	8005066 <_svfiprintf_r+0x182>
 8005084:	ab03      	add	r3, sp, #12
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	4622      	mov	r2, r4
 800508a:	4b11      	ldr	r3, [pc, #68]	; (80050d0 <_svfiprintf_r+0x1ec>)
 800508c:	a904      	add	r1, sp, #16
 800508e:	4640      	mov	r0, r8
 8005090:	f3af 8000 	nop.w
 8005094:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005098:	4681      	mov	r9, r0
 800509a:	d1d6      	bne.n	800504a <_svfiprintf_r+0x166>
 800509c:	89a3      	ldrh	r3, [r4, #12]
 800509e:	065b      	lsls	r3, r3, #25
 80050a0:	f53f af35 	bmi.w	8004f0e <_svfiprintf_r+0x2a>
 80050a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050a6:	b01d      	add	sp, #116	; 0x74
 80050a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ac:	ab03      	add	r3, sp, #12
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	4622      	mov	r2, r4
 80050b2:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <_svfiprintf_r+0x1ec>)
 80050b4:	a904      	add	r1, sp, #16
 80050b6:	4640      	mov	r0, r8
 80050b8:	f000 f882 	bl	80051c0 <_printf_i>
 80050bc:	e7ea      	b.n	8005094 <_svfiprintf_r+0x1b0>
 80050be:	bf00      	nop
 80050c0:	08005550 	.word	0x08005550
 80050c4:	08005556 	.word	0x08005556
 80050c8:	0800555a 	.word	0x0800555a
 80050cc:	00000000 	.word	0x00000000
 80050d0:	08004e31 	.word	0x08004e31

080050d4 <_printf_common>:
 80050d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050d8:	4691      	mov	r9, r2
 80050da:	461f      	mov	r7, r3
 80050dc:	688a      	ldr	r2, [r1, #8]
 80050de:	690b      	ldr	r3, [r1, #16]
 80050e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050e4:	4293      	cmp	r3, r2
 80050e6:	bfb8      	it	lt
 80050e8:	4613      	movlt	r3, r2
 80050ea:	f8c9 3000 	str.w	r3, [r9]
 80050ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050f2:	4606      	mov	r6, r0
 80050f4:	460c      	mov	r4, r1
 80050f6:	b112      	cbz	r2, 80050fe <_printf_common+0x2a>
 80050f8:	3301      	adds	r3, #1
 80050fa:	f8c9 3000 	str.w	r3, [r9]
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	0699      	lsls	r1, r3, #26
 8005102:	bf42      	ittt	mi
 8005104:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005108:	3302      	addmi	r3, #2
 800510a:	f8c9 3000 	strmi.w	r3, [r9]
 800510e:	6825      	ldr	r5, [r4, #0]
 8005110:	f015 0506 	ands.w	r5, r5, #6
 8005114:	d107      	bne.n	8005126 <_printf_common+0x52>
 8005116:	f104 0a19 	add.w	sl, r4, #25
 800511a:	68e3      	ldr	r3, [r4, #12]
 800511c:	f8d9 2000 	ldr.w	r2, [r9]
 8005120:	1a9b      	subs	r3, r3, r2
 8005122:	42ab      	cmp	r3, r5
 8005124:	dc28      	bgt.n	8005178 <_printf_common+0xa4>
 8005126:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800512a:	6822      	ldr	r2, [r4, #0]
 800512c:	3300      	adds	r3, #0
 800512e:	bf18      	it	ne
 8005130:	2301      	movne	r3, #1
 8005132:	0692      	lsls	r2, r2, #26
 8005134:	d42d      	bmi.n	8005192 <_printf_common+0xbe>
 8005136:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800513a:	4639      	mov	r1, r7
 800513c:	4630      	mov	r0, r6
 800513e:	47c0      	blx	r8
 8005140:	3001      	adds	r0, #1
 8005142:	d020      	beq.n	8005186 <_printf_common+0xb2>
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	68e5      	ldr	r5, [r4, #12]
 8005148:	f8d9 2000 	ldr.w	r2, [r9]
 800514c:	f003 0306 	and.w	r3, r3, #6
 8005150:	2b04      	cmp	r3, #4
 8005152:	bf08      	it	eq
 8005154:	1aad      	subeq	r5, r5, r2
 8005156:	68a3      	ldr	r3, [r4, #8]
 8005158:	6922      	ldr	r2, [r4, #16]
 800515a:	bf0c      	ite	eq
 800515c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005160:	2500      	movne	r5, #0
 8005162:	4293      	cmp	r3, r2
 8005164:	bfc4      	itt	gt
 8005166:	1a9b      	subgt	r3, r3, r2
 8005168:	18ed      	addgt	r5, r5, r3
 800516a:	f04f 0900 	mov.w	r9, #0
 800516e:	341a      	adds	r4, #26
 8005170:	454d      	cmp	r5, r9
 8005172:	d11a      	bne.n	80051aa <_printf_common+0xd6>
 8005174:	2000      	movs	r0, #0
 8005176:	e008      	b.n	800518a <_printf_common+0xb6>
 8005178:	2301      	movs	r3, #1
 800517a:	4652      	mov	r2, sl
 800517c:	4639      	mov	r1, r7
 800517e:	4630      	mov	r0, r6
 8005180:	47c0      	blx	r8
 8005182:	3001      	adds	r0, #1
 8005184:	d103      	bne.n	800518e <_printf_common+0xba>
 8005186:	f04f 30ff 	mov.w	r0, #4294967295
 800518a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800518e:	3501      	adds	r5, #1
 8005190:	e7c3      	b.n	800511a <_printf_common+0x46>
 8005192:	18e1      	adds	r1, r4, r3
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	2030      	movs	r0, #48	; 0x30
 8005198:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800519c:	4422      	add	r2, r4
 800519e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051a6:	3302      	adds	r3, #2
 80051a8:	e7c5      	b.n	8005136 <_printf_common+0x62>
 80051aa:	2301      	movs	r3, #1
 80051ac:	4622      	mov	r2, r4
 80051ae:	4639      	mov	r1, r7
 80051b0:	4630      	mov	r0, r6
 80051b2:	47c0      	blx	r8
 80051b4:	3001      	adds	r0, #1
 80051b6:	d0e6      	beq.n	8005186 <_printf_common+0xb2>
 80051b8:	f109 0901 	add.w	r9, r9, #1
 80051bc:	e7d8      	b.n	8005170 <_printf_common+0x9c>
	...

080051c0 <_printf_i>:
 80051c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80051c8:	460c      	mov	r4, r1
 80051ca:	7e09      	ldrb	r1, [r1, #24]
 80051cc:	b085      	sub	sp, #20
 80051ce:	296e      	cmp	r1, #110	; 0x6e
 80051d0:	4617      	mov	r7, r2
 80051d2:	4606      	mov	r6, r0
 80051d4:	4698      	mov	r8, r3
 80051d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051d8:	f000 80b3 	beq.w	8005342 <_printf_i+0x182>
 80051dc:	d822      	bhi.n	8005224 <_printf_i+0x64>
 80051de:	2963      	cmp	r1, #99	; 0x63
 80051e0:	d036      	beq.n	8005250 <_printf_i+0x90>
 80051e2:	d80a      	bhi.n	80051fa <_printf_i+0x3a>
 80051e4:	2900      	cmp	r1, #0
 80051e6:	f000 80b9 	beq.w	800535c <_printf_i+0x19c>
 80051ea:	2958      	cmp	r1, #88	; 0x58
 80051ec:	f000 8083 	beq.w	80052f6 <_printf_i+0x136>
 80051f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80051f8:	e032      	b.n	8005260 <_printf_i+0xa0>
 80051fa:	2964      	cmp	r1, #100	; 0x64
 80051fc:	d001      	beq.n	8005202 <_printf_i+0x42>
 80051fe:	2969      	cmp	r1, #105	; 0x69
 8005200:	d1f6      	bne.n	80051f0 <_printf_i+0x30>
 8005202:	6820      	ldr	r0, [r4, #0]
 8005204:	6813      	ldr	r3, [r2, #0]
 8005206:	0605      	lsls	r5, r0, #24
 8005208:	f103 0104 	add.w	r1, r3, #4
 800520c:	d52a      	bpl.n	8005264 <_printf_i+0xa4>
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6011      	str	r1, [r2, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	da03      	bge.n	800521e <_printf_i+0x5e>
 8005216:	222d      	movs	r2, #45	; 0x2d
 8005218:	425b      	negs	r3, r3
 800521a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800521e:	486f      	ldr	r0, [pc, #444]	; (80053dc <_printf_i+0x21c>)
 8005220:	220a      	movs	r2, #10
 8005222:	e039      	b.n	8005298 <_printf_i+0xd8>
 8005224:	2973      	cmp	r1, #115	; 0x73
 8005226:	f000 809d 	beq.w	8005364 <_printf_i+0x1a4>
 800522a:	d808      	bhi.n	800523e <_printf_i+0x7e>
 800522c:	296f      	cmp	r1, #111	; 0x6f
 800522e:	d020      	beq.n	8005272 <_printf_i+0xb2>
 8005230:	2970      	cmp	r1, #112	; 0x70
 8005232:	d1dd      	bne.n	80051f0 <_printf_i+0x30>
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	f043 0320 	orr.w	r3, r3, #32
 800523a:	6023      	str	r3, [r4, #0]
 800523c:	e003      	b.n	8005246 <_printf_i+0x86>
 800523e:	2975      	cmp	r1, #117	; 0x75
 8005240:	d017      	beq.n	8005272 <_printf_i+0xb2>
 8005242:	2978      	cmp	r1, #120	; 0x78
 8005244:	d1d4      	bne.n	80051f0 <_printf_i+0x30>
 8005246:	2378      	movs	r3, #120	; 0x78
 8005248:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800524c:	4864      	ldr	r0, [pc, #400]	; (80053e0 <_printf_i+0x220>)
 800524e:	e055      	b.n	80052fc <_printf_i+0x13c>
 8005250:	6813      	ldr	r3, [r2, #0]
 8005252:	1d19      	adds	r1, r3, #4
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6011      	str	r1, [r2, #0]
 8005258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800525c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005260:	2301      	movs	r3, #1
 8005262:	e08c      	b.n	800537e <_printf_i+0x1be>
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6011      	str	r1, [r2, #0]
 8005268:	f010 0f40 	tst.w	r0, #64	; 0x40
 800526c:	bf18      	it	ne
 800526e:	b21b      	sxthne	r3, r3
 8005270:	e7cf      	b.n	8005212 <_printf_i+0x52>
 8005272:	6813      	ldr	r3, [r2, #0]
 8005274:	6825      	ldr	r5, [r4, #0]
 8005276:	1d18      	adds	r0, r3, #4
 8005278:	6010      	str	r0, [r2, #0]
 800527a:	0628      	lsls	r0, r5, #24
 800527c:	d501      	bpl.n	8005282 <_printf_i+0xc2>
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	e002      	b.n	8005288 <_printf_i+0xc8>
 8005282:	0668      	lsls	r0, r5, #25
 8005284:	d5fb      	bpl.n	800527e <_printf_i+0xbe>
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	4854      	ldr	r0, [pc, #336]	; (80053dc <_printf_i+0x21c>)
 800528a:	296f      	cmp	r1, #111	; 0x6f
 800528c:	bf14      	ite	ne
 800528e:	220a      	movne	r2, #10
 8005290:	2208      	moveq	r2, #8
 8005292:	2100      	movs	r1, #0
 8005294:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005298:	6865      	ldr	r5, [r4, #4]
 800529a:	60a5      	str	r5, [r4, #8]
 800529c:	2d00      	cmp	r5, #0
 800529e:	f2c0 8095 	blt.w	80053cc <_printf_i+0x20c>
 80052a2:	6821      	ldr	r1, [r4, #0]
 80052a4:	f021 0104 	bic.w	r1, r1, #4
 80052a8:	6021      	str	r1, [r4, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d13d      	bne.n	800532a <_printf_i+0x16a>
 80052ae:	2d00      	cmp	r5, #0
 80052b0:	f040 808e 	bne.w	80053d0 <_printf_i+0x210>
 80052b4:	4665      	mov	r5, ip
 80052b6:	2a08      	cmp	r2, #8
 80052b8:	d10b      	bne.n	80052d2 <_printf_i+0x112>
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	07db      	lsls	r3, r3, #31
 80052be:	d508      	bpl.n	80052d2 <_printf_i+0x112>
 80052c0:	6923      	ldr	r3, [r4, #16]
 80052c2:	6862      	ldr	r2, [r4, #4]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	bfde      	ittt	le
 80052c8:	2330      	movle	r3, #48	; 0x30
 80052ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052d2:	ebac 0305 	sub.w	r3, ip, r5
 80052d6:	6123      	str	r3, [r4, #16]
 80052d8:	f8cd 8000 	str.w	r8, [sp]
 80052dc:	463b      	mov	r3, r7
 80052de:	aa03      	add	r2, sp, #12
 80052e0:	4621      	mov	r1, r4
 80052e2:	4630      	mov	r0, r6
 80052e4:	f7ff fef6 	bl	80050d4 <_printf_common>
 80052e8:	3001      	adds	r0, #1
 80052ea:	d14d      	bne.n	8005388 <_printf_i+0x1c8>
 80052ec:	f04f 30ff 	mov.w	r0, #4294967295
 80052f0:	b005      	add	sp, #20
 80052f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052f6:	4839      	ldr	r0, [pc, #228]	; (80053dc <_printf_i+0x21c>)
 80052f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80052fc:	6813      	ldr	r3, [r2, #0]
 80052fe:	6821      	ldr	r1, [r4, #0]
 8005300:	1d1d      	adds	r5, r3, #4
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6015      	str	r5, [r2, #0]
 8005306:	060a      	lsls	r2, r1, #24
 8005308:	d50b      	bpl.n	8005322 <_printf_i+0x162>
 800530a:	07ca      	lsls	r2, r1, #31
 800530c:	bf44      	itt	mi
 800530e:	f041 0120 	orrmi.w	r1, r1, #32
 8005312:	6021      	strmi	r1, [r4, #0]
 8005314:	b91b      	cbnz	r3, 800531e <_printf_i+0x15e>
 8005316:	6822      	ldr	r2, [r4, #0]
 8005318:	f022 0220 	bic.w	r2, r2, #32
 800531c:	6022      	str	r2, [r4, #0]
 800531e:	2210      	movs	r2, #16
 8005320:	e7b7      	b.n	8005292 <_printf_i+0xd2>
 8005322:	064d      	lsls	r5, r1, #25
 8005324:	bf48      	it	mi
 8005326:	b29b      	uxthmi	r3, r3
 8005328:	e7ef      	b.n	800530a <_printf_i+0x14a>
 800532a:	4665      	mov	r5, ip
 800532c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005330:	fb02 3311 	mls	r3, r2, r1, r3
 8005334:	5cc3      	ldrb	r3, [r0, r3]
 8005336:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800533a:	460b      	mov	r3, r1
 800533c:	2900      	cmp	r1, #0
 800533e:	d1f5      	bne.n	800532c <_printf_i+0x16c>
 8005340:	e7b9      	b.n	80052b6 <_printf_i+0xf6>
 8005342:	6813      	ldr	r3, [r2, #0]
 8005344:	6825      	ldr	r5, [r4, #0]
 8005346:	6961      	ldr	r1, [r4, #20]
 8005348:	1d18      	adds	r0, r3, #4
 800534a:	6010      	str	r0, [r2, #0]
 800534c:	0628      	lsls	r0, r5, #24
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	d501      	bpl.n	8005356 <_printf_i+0x196>
 8005352:	6019      	str	r1, [r3, #0]
 8005354:	e002      	b.n	800535c <_printf_i+0x19c>
 8005356:	066a      	lsls	r2, r5, #25
 8005358:	d5fb      	bpl.n	8005352 <_printf_i+0x192>
 800535a:	8019      	strh	r1, [r3, #0]
 800535c:	2300      	movs	r3, #0
 800535e:	6123      	str	r3, [r4, #16]
 8005360:	4665      	mov	r5, ip
 8005362:	e7b9      	b.n	80052d8 <_printf_i+0x118>
 8005364:	6813      	ldr	r3, [r2, #0]
 8005366:	1d19      	adds	r1, r3, #4
 8005368:	6011      	str	r1, [r2, #0]
 800536a:	681d      	ldr	r5, [r3, #0]
 800536c:	6862      	ldr	r2, [r4, #4]
 800536e:	2100      	movs	r1, #0
 8005370:	4628      	mov	r0, r5
 8005372:	f7fa ff2d 	bl	80001d0 <memchr>
 8005376:	b108      	cbz	r0, 800537c <_printf_i+0x1bc>
 8005378:	1b40      	subs	r0, r0, r5
 800537a:	6060      	str	r0, [r4, #4]
 800537c:	6863      	ldr	r3, [r4, #4]
 800537e:	6123      	str	r3, [r4, #16]
 8005380:	2300      	movs	r3, #0
 8005382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005386:	e7a7      	b.n	80052d8 <_printf_i+0x118>
 8005388:	6923      	ldr	r3, [r4, #16]
 800538a:	462a      	mov	r2, r5
 800538c:	4639      	mov	r1, r7
 800538e:	4630      	mov	r0, r6
 8005390:	47c0      	blx	r8
 8005392:	3001      	adds	r0, #1
 8005394:	d0aa      	beq.n	80052ec <_printf_i+0x12c>
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	079b      	lsls	r3, r3, #30
 800539a:	d413      	bmi.n	80053c4 <_printf_i+0x204>
 800539c:	68e0      	ldr	r0, [r4, #12]
 800539e:	9b03      	ldr	r3, [sp, #12]
 80053a0:	4298      	cmp	r0, r3
 80053a2:	bfb8      	it	lt
 80053a4:	4618      	movlt	r0, r3
 80053a6:	e7a3      	b.n	80052f0 <_printf_i+0x130>
 80053a8:	2301      	movs	r3, #1
 80053aa:	464a      	mov	r2, r9
 80053ac:	4639      	mov	r1, r7
 80053ae:	4630      	mov	r0, r6
 80053b0:	47c0      	blx	r8
 80053b2:	3001      	adds	r0, #1
 80053b4:	d09a      	beq.n	80052ec <_printf_i+0x12c>
 80053b6:	3501      	adds	r5, #1
 80053b8:	68e3      	ldr	r3, [r4, #12]
 80053ba:	9a03      	ldr	r2, [sp, #12]
 80053bc:	1a9b      	subs	r3, r3, r2
 80053be:	42ab      	cmp	r3, r5
 80053c0:	dcf2      	bgt.n	80053a8 <_printf_i+0x1e8>
 80053c2:	e7eb      	b.n	800539c <_printf_i+0x1dc>
 80053c4:	2500      	movs	r5, #0
 80053c6:	f104 0919 	add.w	r9, r4, #25
 80053ca:	e7f5      	b.n	80053b8 <_printf_i+0x1f8>
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1ac      	bne.n	800532a <_printf_i+0x16a>
 80053d0:	7803      	ldrb	r3, [r0, #0]
 80053d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053da:	e76c      	b.n	80052b6 <_printf_i+0xf6>
 80053dc:	08005561 	.word	0x08005561
 80053e0:	08005572 	.word	0x08005572

080053e4 <memcpy>:
 80053e4:	b510      	push	{r4, lr}
 80053e6:	1e43      	subs	r3, r0, #1
 80053e8:	440a      	add	r2, r1
 80053ea:	4291      	cmp	r1, r2
 80053ec:	d100      	bne.n	80053f0 <memcpy+0xc>
 80053ee:	bd10      	pop	{r4, pc}
 80053f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053f8:	e7f7      	b.n	80053ea <memcpy+0x6>

080053fa <memmove>:
 80053fa:	4288      	cmp	r0, r1
 80053fc:	b510      	push	{r4, lr}
 80053fe:	eb01 0302 	add.w	r3, r1, r2
 8005402:	d807      	bhi.n	8005414 <memmove+0x1a>
 8005404:	1e42      	subs	r2, r0, #1
 8005406:	4299      	cmp	r1, r3
 8005408:	d00a      	beq.n	8005420 <memmove+0x26>
 800540a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800540e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005412:	e7f8      	b.n	8005406 <memmove+0xc>
 8005414:	4283      	cmp	r3, r0
 8005416:	d9f5      	bls.n	8005404 <memmove+0xa>
 8005418:	1881      	adds	r1, r0, r2
 800541a:	1ad2      	subs	r2, r2, r3
 800541c:	42d3      	cmn	r3, r2
 800541e:	d100      	bne.n	8005422 <memmove+0x28>
 8005420:	bd10      	pop	{r4, pc}
 8005422:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005426:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800542a:	e7f7      	b.n	800541c <memmove+0x22>

0800542c <_realloc_r>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	4607      	mov	r7, r0
 8005430:	4614      	mov	r4, r2
 8005432:	460e      	mov	r6, r1
 8005434:	b921      	cbnz	r1, 8005440 <_realloc_r+0x14>
 8005436:	4611      	mov	r1, r2
 8005438:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800543c:	f7ff bc52 	b.w	8004ce4 <_malloc_r>
 8005440:	b922      	cbnz	r2, 800544c <_realloc_r+0x20>
 8005442:	f7ff fc01 	bl	8004c48 <_free_r>
 8005446:	4625      	mov	r5, r4
 8005448:	4628      	mov	r0, r5
 800544a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800544c:	f000 f814 	bl	8005478 <_malloc_usable_size_r>
 8005450:	42a0      	cmp	r0, r4
 8005452:	d20f      	bcs.n	8005474 <_realloc_r+0x48>
 8005454:	4621      	mov	r1, r4
 8005456:	4638      	mov	r0, r7
 8005458:	f7ff fc44 	bl	8004ce4 <_malloc_r>
 800545c:	4605      	mov	r5, r0
 800545e:	2800      	cmp	r0, #0
 8005460:	d0f2      	beq.n	8005448 <_realloc_r+0x1c>
 8005462:	4631      	mov	r1, r6
 8005464:	4622      	mov	r2, r4
 8005466:	f7ff ffbd 	bl	80053e4 <memcpy>
 800546a:	4631      	mov	r1, r6
 800546c:	4638      	mov	r0, r7
 800546e:	f7ff fbeb 	bl	8004c48 <_free_r>
 8005472:	e7e9      	b.n	8005448 <_realloc_r+0x1c>
 8005474:	4635      	mov	r5, r6
 8005476:	e7e7      	b.n	8005448 <_realloc_r+0x1c>

08005478 <_malloc_usable_size_r>:
 8005478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800547c:	1f18      	subs	r0, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	bfbc      	itt	lt
 8005482:	580b      	ldrlt	r3, [r1, r0]
 8005484:	18c0      	addlt	r0, r0, r3
 8005486:	4770      	bx	lr

08005488 <_init>:
 8005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548a:	bf00      	nop
 800548c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548e:	bc08      	pop	{r3}
 8005490:	469e      	mov	lr, r3
 8005492:	4770      	bx	lr

08005494 <_fini>:
 8005494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005496:	bf00      	nop
 8005498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549a:	bc08      	pop	{r3}
 800549c:	469e      	mov	lr, r3
 800549e:	4770      	bx	lr
