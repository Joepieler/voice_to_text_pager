
Screen_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000594c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b10  08005adc  08005adc  00015adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065ec  080065ec  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080065ec  080065ec  000165ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065f4  080065f4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065f4  080065f4  000165f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065f8  080065f8  000165f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080065fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  200001e4  080067e0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  080067e0  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe10  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020a8  00000000  00000000  00030024  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be0  00000000  00000000  000320d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad0  00000000  00000000  00032cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029116  00000000  00000000  00033780  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a3a9  00000000  00000000  0005c896  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ecab6  00000000  00000000  00066c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001536f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003924  00000000  00000000  00153770  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ac4 	.word	0x08005ac4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08005ac4 	.word	0x08005ac4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <_ZN16ESP8266Interface11WaitForCharEcm>:
		return 0;
	}
	return -1;
}

bool ESP8266Interface::WaitForChar(char value, uint32_t timeout){
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	460b      	mov	r3, r1
 800058a:	607a      	str	r2, [r7, #4]
 800058c:	72fb      	strb	r3, [r7, #11]
	char a = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	74fb      	strb	r3, [r7, #19]
	for(uint32_t i = 0; i < timeout;){
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	697a      	ldr	r2, [r7, #20]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	429a      	cmp	r2, r3
 800059c:	d218      	bcs.n	80005d0 <_ZN16ESP8266Interface11WaitForCharEcm+0x50>
		if(HAL_UART_Receive(ESP8266_, (uint8_t *)&a, 1, 1) == HAL_TIMEOUT) i++;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80005a2:	f107 0113 	add.w	r1, r7, #19
 80005a6:	2301      	movs	r3, #1
 80005a8:	2201      	movs	r2, #1
 80005aa:	f003 fc8e 	bl	8003eca <HAL_UART_Receive>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	bf0c      	ite	eq
 80005b4:	2301      	moveq	r3, #1
 80005b6:	2300      	movne	r3, #0
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d002      	beq.n	80005c4 <_ZN16ESP8266Interface11WaitForCharEcm+0x44>
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	3301      	adds	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
		if(a == value){
 80005c4:	7cfb      	ldrb	r3, [r7, #19]
 80005c6:	7afa      	ldrb	r2, [r7, #11]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d1e4      	bne.n	8000596 <_ZN16ESP8266Interface11WaitForCharEcm+0x16>
			return true;
 80005cc:	2301      	movs	r3, #1
 80005ce:	e000      	b.n	80005d2 <_ZN16ESP8266Interface11WaitForCharEcm+0x52>
		}
	}
	return false;
 80005d0:	2300      	movs	r3, #0
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3718      	adds	r7, #24
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <_ZN16ESP8266InterfaceC1EP20__UART_HandleTypeDef>:


ESP8266Interface::ESP8266Interface(UART_HandleTypeDef *ESP8266) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	4a06      	ldr	r2, [pc, #24]	; (8000600 <_ZN16ESP8266InterfaceC1EP20__UART_HandleTypeDef+0x24>)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	ESP8266_ = ESP8266;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	683a      	ldr	r2, [r7, #0]
 80005f0:	669a      	str	r2, [r3, #104]	; 0x68

}
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4618      	mov	r0, r3
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	08005c00 	.word	0x08005c00

08000604 <_ZN16ESP8266InterfaceD1Ev>:

ESP8266Interface::~ESP8266Interface() {
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	4a04      	ldr	r2, [pc, #16]	; (8000620 <_ZN16ESP8266InterfaceD1Ev+0x1c>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	08005c00 	.word	0x08005c00

08000624 <_ZN16ESP8266InterfaceD0Ev>:
ESP8266Interface::~ESP8266Interface() {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
}
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff ffe9 	bl	8000604 <_ZN16ESP8266InterfaceD1Ev>
 8000632:	217c      	movs	r1, #124	; 0x7c
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f004 f901 	bl	800483c <_ZdlPvj>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <_ZN16ESP8266Interface7StartUpEi>:

int ESP8266Interface::StartUp(int mode){
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b089      	sub	sp, #36	; 0x24
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
	const char command[] = "AT+CWMODE=%d\r\n";
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <_ZN16ESP8266Interface7StartUpEi+0x6c>)
 8000650:	f107 0410 	add.w	r4, r7, #16
 8000654:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000656:	c407      	stmia	r4!, {r0, r1, r2}
 8000658:	8023      	strh	r3, [r4, #0]
 800065a:	3402      	adds	r4, #2
 800065c:	0c1b      	lsrs	r3, r3, #16
 800065e:	7023      	strb	r3, [r4, #0]
	sprintf(buffer_, command, mode);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3304      	adds	r3, #4
 8000664:	f107 0110 	add.w	r1, r7, #16
 8000668:	683a      	ldr	r2, [r7, #0]
 800066a:	4618      	mov	r0, r3
 800066c:	f004 f9dc 	bl	8004a28 <siprintf>
	HAL_UART_Transmit(ESP8266_,  (uint8_t *)buffer_, sizeof(command) -2, HAL_MAX_DELAY);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	1d19      	adds	r1, r3, #4
 8000678:	f04f 33ff 	mov.w	r3, #4294967295
 800067c:	220d      	movs	r2, #13
 800067e:	f003 fb91 	bl	8003da4 <HAL_UART_Transmit>
	char response[5];
	while(strstr(response, "OK") == NULL){
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	490b      	ldr	r1, [pc, #44]	; (80006b4 <_ZN16ESP8266Interface7StartUpEi+0x70>)
 8000688:	4618      	mov	r0, r3
 800068a:	f004 fa19 	bl	8004ac0 <strstr>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d108      	bne.n	80006a6 <_ZN16ESP8266Interface7StartUpEi+0x62>
		HAL_UART_Receive(ESP8266_, (uint8_t *)response, 5, 1);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000698:	f107 0108 	add.w	r1, r7, #8
 800069c:	2301      	movs	r3, #1
 800069e:	2205      	movs	r2, #5
 80006a0:	f003 fc13 	bl	8003eca <HAL_UART_Receive>
	while(strstr(response, "OK") == NULL){
 80006a4:	e7ed      	b.n	8000682 <_ZN16ESP8266Interface7StartUpEi+0x3e>
	}
	return 0;
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3724      	adds	r7, #36	; 0x24
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd90      	pop	{r4, r7, pc}
 80006b0:	08005ae0 	.word	0x08005ae0
 80006b4:	08005adc 	.word	0x08005adc

080006b8 <_ZN16ESP8266Interface5ResetEv>:


int ESP8266Interface::Reset(){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	const char command[] = "AT+RST\r\n";
 80006c0:	4a1b      	ldr	r2, [pc, #108]	; (8000730 <_ZN16ESP8266Interface5ResetEv+0x78>)
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80006c8:	c303      	stmia	r3!, {r0, r1}
 80006ca:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(ESP8266_,  (uint8_t *)command, sizeof(command), HAL_MAX_DELAY);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80006d0:	f107 011c 	add.w	r1, r7, #28
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	2209      	movs	r2, #9
 80006da:	f003 fb63 	bl	8003da4 <HAL_UART_Transmit>
	char response[15];
	HAL_UART_Receive(ESP8266_, (uint8_t *)response, sizeof(response), 1);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80006e2:	f107 010c 	add.w	r1, r7, #12
 80006e6:	2301      	movs	r3, #1
 80006e8:	220f      	movs	r2, #15
 80006ea:	f003 fbee 	bl	8003eca <HAL_UART_Receive>
	if(strstr(response, "OK") != NULL){
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	4910      	ldr	r1, [pc, #64]	; (8000734 <_ZN16ESP8266Interface5ResetEv+0x7c>)
 80006f4:	4618      	mov	r0, r3
 80006f6:	f004 f9e3 	bl	8004ac0 <strstr>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d011      	beq.n	8000724 <_ZN16ESP8266Interface5ResetEv+0x6c>
		while(strstr(response, "ready") == NULL){
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	490c      	ldr	r1, [pc, #48]	; (8000738 <_ZN16ESP8266Interface5ResetEv+0x80>)
 8000706:	4618      	mov	r0, r3
 8000708:	f004 f9da 	bl	8004ac0 <strstr>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d108      	bne.n	8000724 <_ZN16ESP8266Interface5ResetEv+0x6c>
			HAL_UART_Receive(ESP8266_, (uint8_t *)response, 9, 1);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000716:	f107 010c 	add.w	r1, r7, #12
 800071a:	2301      	movs	r3, #1
 800071c:	2209      	movs	r2, #9
 800071e:	f003 fbd4 	bl	8003eca <HAL_UART_Receive>
		while(strstr(response, "ready") == NULL){
 8000722:	e7ed      	b.n	8000700 <_ZN16ESP8266Interface5ResetEv+0x48>
		}
	}
	return 0;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3728      	adds	r7, #40	; 0x28
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	08005af8 	.word	0x08005af8
 8000734:	08005adc 	.word	0x08005adc
 8000738:	08005af0 	.word	0x08005af0

0800073c <_ZN16ESP8266Interface7ConnectEPKcS1_>:
int ESP8266Interface::DHCP(bool enable, int mode){
	return 0;
}


int ESP8266Interface::Connect(const char *wifiname, const char *password){
 800073c:	b5b0      	push	{r4, r5, r7, lr}
 800073e:	b08e      	sub	sp, #56	; 0x38
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
	char command[] = "AT+CWJAP=\"%s\",\"%s\"\r\n";
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <_ZN16ESP8266Interface7ConnectEPKcS1_+0x7c>)
 800074a:	f107 0420 	add.w	r4, r7, #32
 800074e:	461d      	mov	r5, r3
 8000750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000754:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000758:	6020      	str	r0, [r4, #0]
 800075a:	3404      	adds	r4, #4
 800075c:	7021      	strb	r1, [r4, #0]
	char response[16];
	uint8_t size = sizeof(command) + sizeof(wifiname) + sizeof(password) + 3;
 800075e:	2320      	movs	r3, #32
 8000760:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	sprintf(buffer_, command, wifiname, password);
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	1d18      	adds	r0, r3, #4
 8000768:	f107 0120 	add.w	r1, r7, #32
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	f004 f95a 	bl	8004a28 <siprintf>
	HAL_UART_Transmit(ESP8266_,  (uint8_t *)buffer_, size, HAL_MAX_DELAY);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	1d19      	adds	r1, r3, #4
 800077c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000780:	b29a      	uxth	r2, r3
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
 8000786:	f003 fb0d 	bl	8003da4 <HAL_UART_Transmit>
//	// Wait for IP
//	while(strstr(response, "GOT") == NULL){
//		HAL_UART_Receive(ESP8266_, (uint8_t *)response, 13, 1);
//	}
	// Wait for OK
	while(strstr(response, "OK") == NULL){
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	490b      	ldr	r1, [pc, #44]	; (80007bc <_ZN16ESP8266Interface7ConnectEPKcS1_+0x80>)
 8000790:	4618      	mov	r0, r3
 8000792:	f004 f995 	bl	8004ac0 <strstr>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d108      	bne.n	80007ae <_ZN16ESP8266Interface7ConnectEPKcS1_+0x72>
		HAL_UART_Receive(ESP8266_, (uint8_t *)response, 5, 1);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80007a0:	f107 0110 	add.w	r1, r7, #16
 80007a4:	2301      	movs	r3, #1
 80007a6:	2205      	movs	r2, #5
 80007a8:	f003 fb8f 	bl	8003eca <HAL_UART_Receive>
	while(strstr(response, "OK") == NULL){
 80007ac:	e7ed      	b.n	800078a <_ZN16ESP8266Interface7ConnectEPKcS1_+0x4e>
	}
	//Wifi is connected and ready to use
	return 0;
 80007ae:	2300      	movs	r3, #0
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3738      	adds	r7, #56	; 0x38
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bdb0      	pop	{r4, r5, r7, pc}
 80007b8:	08005b04 	.word	0x08005b04
 80007bc:	08005adc 	.word	0x08005adc

080007c0 <_ZN16ESP8266Interface13ConnectSocketEPKcS1_t>:
	HAL_UART_Transmit(ESP8266_,  (uint8_t *)command, sizeof(command), HAL_MAX_DELAY);
	return IsOK(sizeof(command));
}


int ESP8266Interface::ConnectSocket(const char *type, const char *ipaddress, uint16_t poort){
 80007c0:	b5b0      	push	{r4, r5, r7, lr}
 80007c2:	b096      	sub	sp, #88	; 0x58
 80007c4:	af02      	add	r7, sp, #8
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	807b      	strh	r3, [r7, #2]
	char mode[] = "AT+CIPMUX=0\r\n";
 80007ce:	4b32      	ldr	r3, [pc, #200]	; (8000898 <_ZN16ESP8266Interface13ConnectSocketEPKcS1_t+0xd8>)
 80007d0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80007d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007d6:	c407      	stmia	r4!, {r0, r1, r2}
 80007d8:	8023      	strh	r3, [r4, #0]
	char response[15];
	HAL_UART_Transmit(ESP8266_,  (uint8_t *)mode, sizeof(mode), HAL_MAX_DELAY);
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80007de:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	220e      	movs	r2, #14
 80007e8:	f003 fadc 	bl	8003da4 <HAL_UART_Transmit>

	// Wait for OK
	while(strstr(response, "OK") == NULL){
 80007ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007f0:	492a      	ldr	r1, [pc, #168]	; (800089c <_ZN16ESP8266Interface13ConnectSocketEPKcS1_t+0xdc>)
 80007f2:	4618      	mov	r0, r3
 80007f4:	f004 f964 	bl	8004ac0 <strstr>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d108      	bne.n	8000810 <_ZN16ESP8266Interface13ConnectSocketEPKcS1_t+0x50>
		HAL_UART_Receive(ESP8266_, (uint8_t *)response, 5, 1);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000802:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000806:	2301      	movs	r3, #1
 8000808:	2205      	movs	r2, #5
 800080a:	f003 fb5e 	bl	8003eca <HAL_UART_Receive>
	while(strstr(response, "OK") == NULL){
 800080e:	e7ed      	b.n	80007ec <_ZN16ESP8266Interface13ConnectSocketEPKcS1_t+0x2c>
	}

	//Clear response because next has also OK
	memset(&response[0], 0, sizeof(response));
 8000810:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000814:	220f      	movs	r2, #15
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f004 f845 	bl	80048a8 <memset>

	char command[] = "AT+CIPSTART=\"%s\",\"%s\",%d\r\n";
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <_ZN16ESP8266Interface13ConnectSocketEPKcS1_t+0xe0>)
 8000820:	f107 0414 	add.w	r4, r7, #20
 8000824:	461d      	mov	r5, r3
 8000826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800082a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800082e:	c403      	stmia	r4!, {r0, r1}
 8000830:	8022      	strh	r2, [r4, #0]
 8000832:	3402      	adds	r4, #2
 8000834:	0c13      	lsrs	r3, r2, #16
 8000836:	7023      	strb	r3, [r4, #0]
	uint8_t size = sizeof(command) + sizeof(type) + sizeof(ipaddress) + 8;
 8000838:	232b      	movs	r3, #43	; 0x2b
 800083a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	sprintf(buffer_, command, type, ipaddress, poort);
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	1d18      	adds	r0, r3, #4
 8000842:	887b      	ldrh	r3, [r7, #2]
 8000844:	f107 0114 	add.w	r1, r7, #20
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	68ba      	ldr	r2, [r7, #8]
 800084e:	f004 f8eb 	bl	8004a28 <siprintf>
	HAL_UART_Transmit(ESP8266_,  (uint8_t *)buffer_, size, HAL_MAX_DELAY);
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	1d19      	adds	r1, r3, #4
 800085a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800085e:	b29a      	uxth	r2, r3
 8000860:	f04f 33ff 	mov.w	r3, #4294967295
 8000864:	f003 fa9e 	bl	8003da4 <HAL_UART_Transmit>

	//Wait for Connected to server
	while(strstr(response, "OK") == NULL){
 8000868:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800086c:	490b      	ldr	r1, [pc, #44]	; (800089c <_ZN16ESP8266Interface13ConnectSocketEPKcS1_t+0xdc>)
 800086e:	4618      	mov	r0, r3
 8000870:	f004 f926 	bl	8004ac0 <strstr>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d108      	bne.n	800088c <_ZN16ESP8266Interface13ConnectSocketEPKcS1_t+0xcc>
		HAL_UART_Receive(ESP8266_, (uint8_t *)response, 15, 1);
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800087e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000882:	2301      	movs	r3, #1
 8000884:	220f      	movs	r2, #15
 8000886:	f003 fb20 	bl	8003eca <HAL_UART_Receive>
	while(strstr(response, "OK") == NULL){
 800088a:	e7ed      	b.n	8000868 <_ZN16ESP8266Interface13ConnectSocketEPKcS1_t+0xa8>
	}
	return 0;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3750      	adds	r7, #80	; 0x50
 8000892:	46bd      	mov	sp, r7
 8000894:	bdb0      	pop	{r4, r5, r7, pc}
 8000896:	bf00      	nop
 8000898:	08005b28 	.word	0x08005b28
 800089c:	08005adc 	.word	0x08005adc
 80008a0:	08005b38 	.word	0x08005b38

080008a4 <_ZN16ESP8266Interface16DisconnectSocketEv>:

int ESP8266Interface::DisconnectSocket(){
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b08b      	sub	sp, #44	; 0x2c
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	char command[] = "AT+CIPCLOSE\r\n";
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <_ZN16ESP8266Interface16DisconnectSocketEv+0x54>)
 80008ae:	f107 0418 	add.w	r4, r7, #24
 80008b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008b4:	c407      	stmia	r4!, {r0, r1, r2}
 80008b6:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(ESP8266_,  (uint8_t *)command, sizeof(command), HAL_MAX_DELAY);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80008bc:	f107 0118 	add.w	r1, r7, #24
 80008c0:	f04f 33ff 	mov.w	r3, #4294967295
 80008c4:	220e      	movs	r2, #14
 80008c6:	f003 fa6d 	bl	8003da4 <HAL_UART_Transmit>
	char response[13];

	while(strstr(response, "OK") == NULL){
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	490b      	ldr	r1, [pc, #44]	; (80008fc <_ZN16ESP8266Interface16DisconnectSocketEv+0x58>)
 80008d0:	4618      	mov	r0, r3
 80008d2:	f004 f8f5 	bl	8004ac0 <strstr>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d108      	bne.n	80008ee <_ZN16ESP8266Interface16DisconnectSocketEv+0x4a>
			HAL_UART_Receive(ESP8266_, (uint8_t *)response, 13, 1);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80008e0:	f107 0108 	add.w	r1, r7, #8
 80008e4:	2301      	movs	r3, #1
 80008e6:	220d      	movs	r2, #13
 80008e8:	f003 faef 	bl	8003eca <HAL_UART_Receive>
	while(strstr(response, "OK") == NULL){
 80008ec:	e7ed      	b.n	80008ca <_ZN16ESP8266Interface16DisconnectSocketEv+0x26>
		}
	return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	372c      	adds	r7, #44	; 0x2c
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd90      	pop	{r4, r7, pc}
 80008f8:	08005b54 	.word	0x08005b54
 80008fc:	08005adc 	.word	0x08005adc

08000900 <_ZN16ESP8266Interface5GetIPEv>:

int ESP8266Interface::IsConnected(){
	return 0;
}

const char *ESP8266Interface::GetIP(void){
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	char command[] = "AT+CIFSR\r\n";
 8000908:	4a2f      	ldr	r2, [pc, #188]	; (80009c8 <_ZN16ESP8266Interface5GetIPEv+0xc8>)
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000910:	c303      	stmia	r3!, {r0, r1}
 8000912:	801a      	strh	r2, [r3, #0]
 8000914:	3302      	adds	r3, #2
 8000916:	0c12      	lsrs	r2, r2, #16
 8000918:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(ESP8266_,  (uint8_t *)command, sizeof(command), HAL_MAX_DELAY);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800091e:	f107 010c 	add.w	r1, r7, #12
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	220b      	movs	r2, #11
 8000928:	f003 fa3c 	bl	8003da4 <HAL_UART_Transmit>

	char response[1] = "";
 800092c:	2300      	movs	r3, #0
 800092e:	723b      	strb	r3, [r7, #8]

	//wait for repeat
	while(response[0] != '\n'){
 8000930:	7a3b      	ldrb	r3, [r7, #8]
 8000932:	2b0a      	cmp	r3, #10
 8000934:	d008      	beq.n	8000948 <_ZN16ESP8266Interface5GetIPEv+0x48>
			HAL_UART_Receive(ESP8266_, (uint8_t *)response, 1, 1);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800093a:	f107 0108 	add.w	r1, r7, #8
 800093e:	2301      	movs	r3, #1
 8000940:	2201      	movs	r2, #1
 8000942:	f003 fac2 	bl	8003eca <HAL_UART_Receive>
	while(response[0] != '\n'){
 8000946:	e7f3      	b.n	8000930 <_ZN16ESP8266Interface5GetIPEv+0x30>
	}

	//get the ip
	while(response[0] != '\"'){
 8000948:	7a3b      	ldrb	r3, [r7, #8]
 800094a:	2b22      	cmp	r3, #34	; 0x22
 800094c:	d008      	beq.n	8000960 <_ZN16ESP8266Interface5GetIPEv+0x60>
			HAL_UART_Receive(ESP8266_, (uint8_t *)response, 1, 1);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000952:	f107 0108 	add.w	r1, r7, #8
 8000956:	2301      	movs	r3, #1
 8000958:	2201      	movs	r2, #1
 800095a:	f003 fab6 	bl	8003eca <HAL_UART_Receive>
	while(response[0] != '\"'){
 800095e:	e7f3      	b.n	8000948 <_ZN16ESP8266Interface5GetIPEv+0x48>
	}
	response[0] = ' ';
 8000960:	2320      	movs	r3, #32
 8000962:	723b      	strb	r3, [r7, #8]

	uint8_t counter = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	75fb      	strb	r3, [r7, #23]

	while(response[0] != '\"'){
 8000968:	7a3b      	ldrb	r3, [r7, #8]
 800096a:	2b22      	cmp	r3, #34	; 0x22
 800096c:	d015      	beq.n	800099a <_ZN16ESP8266Interface5GetIPEv+0x9a>
			HAL_UART_Receive(ESP8266_, (uint8_t *)response, 1, 1);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000972:	f107 0108 	add.w	r1, r7, #8
 8000976:	2301      	movs	r3, #1
 8000978:	2201      	movs	r2, #1
 800097a:	f003 faa6 	bl	8003eca <HAL_UART_Receive>
			if(counter < sizeof(IPaddress_)){
 800097e:	7dfb      	ldrb	r3, [r7, #23]
 8000980:	2b0e      	cmp	r3, #14
 8000982:	d8f1      	bhi.n	8000968 <_ZN16ESP8266Interface5GetIPEv+0x68>
				IPaddress_[counter] = response[0];
 8000984:	7dfb      	ldrb	r3, [r7, #23]
 8000986:	7a39      	ldrb	r1, [r7, #8]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	4413      	add	r3, r2
 800098c:	460a      	mov	r2, r1
 800098e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
				counter++;
 8000992:	7dfb      	ldrb	r3, [r7, #23]
 8000994:	3301      	adds	r3, #1
 8000996:	75fb      	strb	r3, [r7, #23]
	while(response[0] != '\"'){
 8000998:	e7e6      	b.n	8000968 <_ZN16ESP8266Interface5GetIPEv+0x68>
			}
	}

	//wait for done
	while(HAL_TIMEOUT != HAL_UART_Receive(ESP8266_, (uint8_t *)response, 1, 1)){
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800099e:	f107 0108 	add.w	r1, r7, #8
 80009a2:	2301      	movs	r3, #1
 80009a4:	2201      	movs	r2, #1
 80009a6:	f003 fa90 	bl	8003eca <HAL_UART_Receive>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	bf14      	ite	ne
 80009b0:	2301      	movne	r3, #1
 80009b2:	2300      	moveq	r3, #0
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d000      	beq.n	80009bc <_ZN16ESP8266Interface5GetIPEv+0xbc>
 80009ba:	e7ee      	b.n	800099a <_ZN16ESP8266Interface5GetIPEv+0x9a>
	}

	return IPaddress_;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	336c      	adds	r3, #108	; 0x6c
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	08005b64 	.word	0x08005b64

080009cc <_ZN16ESP8266Interface4SendEiPKvm>:
int8_t ESP8266Interface::scan(){
	return 0;
}


int ESP8266Interface::Send(int id, const void *data, uint32_t amount){
 80009cc:	b5b0      	push	{r4, r5, r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
 80009d8:	603b      	str	r3, [r7, #0]
	const char command[] = "AT+CIPSEND=%lu\r\n";
 80009da:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <_ZN16ESP8266Interface4SendEiPKvm+0xb4>)
 80009dc:	f107 0414 	add.w	r4, r7, #20
 80009e0:	461d      	mov	r5, r3
 80009e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e6:	682b      	ldr	r3, [r5, #0]
 80009e8:	7023      	strb	r3, [r4, #0]
	uint8_t size = sizeof(command);
 80009ea:	2311      	movs	r3, #17
 80009ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char response[2] = " ";
 80009f0:	2320      	movs	r3, #32
 80009f2:	823b      	strh	r3, [r7, #16]
	sprintf(buffer_, command, amount);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3304      	adds	r3, #4
 80009f8:	f107 0114 	add.w	r1, r7, #20
 80009fc:	683a      	ldr	r2, [r7, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f004 f812 	bl	8004a28 <siprintf>

	HAL_UART_Transmit(ESP8266_,  (uint8_t *)buffer_, size, HAL_MAX_DELAY);
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	1d19      	adds	r1, r3, #4
 8000a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	f003 f9c5 	bl	8003da4 <HAL_UART_Transmit>

	// Wait for SEND
	while(response[0] != '>'){
 8000a1a:	7c3b      	ldrb	r3, [r7, #16]
 8000a1c:	2b3e      	cmp	r3, #62	; 0x3e
 8000a1e:	d008      	beq.n	8000a32 <_ZN16ESP8266Interface4SendEiPKvm+0x66>
			HAL_UART_Receive(ESP8266_, (uint8_t *)response, 1, 1);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000a24:	f107 0110 	add.w	r1, r7, #16
 8000a28:	2301      	movs	r3, #1
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	f003 fa4d 	bl	8003eca <HAL_UART_Receive>
	while(response[0] != '>'){
 8000a30:	e7f3      	b.n	8000a1a <_ZN16ESP8266Interface4SendEiPKvm+0x4e>
	}

	// Send Data
	HAL_UART_Transmit(ESP8266_,  (uint8_t *)data, amount, HAL_MAX_DELAY);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	f003 f9b0 	bl	8003da4 <HAL_UART_Transmit>

	//Wait for received message
	while(response[1] != 'O' && response[0] != 'K'){
 8000a44:	7c7b      	ldrb	r3, [r7, #17]
 8000a46:	2b4f      	cmp	r3, #79	; 0x4f
 8000a48:	d00d      	beq.n	8000a66 <_ZN16ESP8266Interface4SendEiPKvm+0x9a>
 8000a4a:	7c3b      	ldrb	r3, [r7, #16]
 8000a4c:	2b4b      	cmp	r3, #75	; 0x4b
 8000a4e:	d00a      	beq.n	8000a66 <_ZN16ESP8266Interface4SendEiPKvm+0x9a>
		response[1] = response[0];
 8000a50:	7c3b      	ldrb	r3, [r7, #16]
 8000a52:	747b      	strb	r3, [r7, #17]
		HAL_UART_Receive(ESP8266_, (uint8_t *)response, 1, 1);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000a58:	f107 0110 	add.w	r1, r7, #16
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f003 fa33 	bl	8003eca <HAL_UART_Receive>
	while(response[1] != 'O' && response[0] != 'K'){
 8000a64:	e7ee      	b.n	8000a44 <_ZN16ESP8266Interface4SendEiPKvm+0x78>
	}
	HAL_UART_Receive(ESP8266_, (uint8_t *)response, 2, 1);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000a6a:	f107 0110 	add.w	r1, r7, #16
 8000a6e:	2301      	movs	r3, #1
 8000a70:	2202      	movs	r2, #2
 8000a72:	f003 fa2a 	bl	8003eca <HAL_UART_Receive>

	return 0;
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3728      	adds	r7, #40	; 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a80:	08005b70 	.word	0x08005b70

08000a84 <_ZN16ESP8266Interface7ReceiveEiPvRm>:


int32_t ESP8266Interface::Receive(int id, void *data, uint32_t & amount){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	607a      	str	r2, [r7, #4]
 8000a90:	603b      	str	r3, [r7, #0]
	if(HAL_UART_Receive(ESP8266_, (uint8_t *)buffer_, 1, 1) == HAL_TIMEOUT){
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	1d19      	adds	r1, r3, #4
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f003 fa14 	bl	8003eca <HAL_UART_Receive>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b03      	cmp	r3, #3
 8000aa6:	bf0c      	ite	eq
 8000aa8:	2301      	moveq	r3, #1
 8000aaa:	2300      	movne	r3, #0
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <_ZN16ESP8266Interface7ReceiveEiPvRm+0x32>
		return HAL_TIMEOUT;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	e069      	b.n	8000b8a <_ZN16ESP8266Interface7ReceiveEiPvRm+0x106>
	}
	else {
		if(WaitForChar('+',1)){
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	212b      	movs	r1, #43	; 0x2b
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f7ff fd60 	bl	8000580 <_ZN16ESP8266Interface11WaitForCharEcm>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d060      	beq.n	8000b88 <_ZN16ESP8266Interface7ReceiveEiPvRm+0x104>
			char response[3] = " ";
 8000ac6:	4b33      	ldr	r3, [pc, #204]	; (8000b94 <_ZN16ESP8266Interface7ReceiveEiPvRm+0x110>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	82bb      	strh	r3, [r7, #20]
 8000acc:	2300      	movs	r3, #0
 8000ace:	75bb      	strb	r3, [r7, #22]
			HAL_UART_Receive(ESP8266_, (uint8_t *)response, 3, 1);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000ad4:	f107 0114 	add.w	r1, r7, #20
 8000ad8:	2301      	movs	r3, #1
 8000ada:	2203      	movs	r2, #3
 8000adc:	f003 f9f5 	bl	8003eca <HAL_UART_Receive>
			if(strstr(response, "IPD") != NULL){
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	492c      	ldr	r1, [pc, #176]	; (8000b98 <_ZN16ESP8266Interface7ReceiveEiPvRm+0x114>)
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f003 ffea 	bl	8004ac0 <strstr>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d04a      	beq.n	8000b88 <_ZN16ESP8266Interface7ReceiveEiPvRm+0x104>

				WaitForChar(',',1);
 8000af2:	2201      	movs	r2, #1
 8000af4:	212c      	movs	r1, #44	; 0x2c
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f7ff fd42 	bl	8000580 <_ZN16ESP8266Interface11WaitForCharEcm>
				WaitForChar(',',1);
 8000afc:	2201      	movs	r2, #1
 8000afe:	212c      	movs	r1, #44	; 0x2c
 8000b00:	68f8      	ldr	r0, [r7, #12]
 8000b02:	f7ff fd3d 	bl	8000580 <_ZN16ESP8266Interface11WaitForCharEcm>
				//now comes the size of the data
				uint8_t i = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	77fb      	strb	r3, [r7, #31]
				char value[4] = "   ";
 8000b0a:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <_ZN16ESP8266Interface7ReceiveEiPvRm+0x118>)
 8000b0c:	613b      	str	r3, [r7, #16]

				for(uint32_t t = 0; t < 10; t++){
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61bb      	str	r3, [r7, #24]
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	2b09      	cmp	r3, #9
 8000b16:	d820      	bhi.n	8000b5a <_ZN16ESP8266Interface7ReceiveEiPvRm+0xd6>
					HAL_UART_Receive(ESP8266_, (uint8_t *)buffer_, 1, 1);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	1d19      	adds	r1, r3, #4
 8000b20:	2301      	movs	r3, #1
 8000b22:	2201      	movs	r2, #1
 8000b24:	f003 f9d1 	bl	8003eca <HAL_UART_Receive>
					if(buffer_[0] == ':'){
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	791b      	ldrb	r3, [r3, #4]
 8000b2c:	2b3a      	cmp	r3, #58	; 0x3a
 8000b2e:	d011      	beq.n	8000b54 <_ZN16ESP8266Interface7ReceiveEiPvRm+0xd0>
						break;
					}
					value[i]= buffer_[0];
 8000b30:	7ffb      	ldrb	r3, [r7, #31]
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	7912      	ldrb	r2, [r2, #4]
 8000b36:	f107 0120 	add.w	r1, r7, #32
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f803 2c10 	strb.w	r2, [r3, #-16]
					if( i == 4 ){
 8000b40:	7ffb      	ldrb	r3, [r7, #31]
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	d008      	beq.n	8000b58 <_ZN16ESP8266Interface7ReceiveEiPvRm+0xd4>
						break;
					}
					i++;
 8000b46:	7ffb      	ldrb	r3, [r7, #31]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	77fb      	strb	r3, [r7, #31]
				for(uint32_t t = 0; t < 10; t++){
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	61bb      	str	r3, [r7, #24]
 8000b52:	e7de      	b.n	8000b12 <_ZN16ESP8266Interface7ReceiveEiPvRm+0x8e>
						break;
 8000b54:	bf00      	nop
 8000b56:	e000      	b.n	8000b5a <_ZN16ESP8266Interface7ReceiveEiPvRm+0xd6>
						break;
 8000b58:	bf00      	nop
				}
				sscanf(value,"%lu", &amount);
 8000b5a:	f107 0310 	add.w	r3, r7, #16
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	490f      	ldr	r1, [pc, #60]	; (8000ba0 <_ZN16ESP8266Interface7ReceiveEiPvRm+0x11c>)
 8000b62:	4618      	mov	r0, r3
 8000b64:	f003 ff80 	bl	8004a68 <siscanf>
					WaitForChar('\n',1);
					return -1;
				}

				//get the data
				HAL_UART_Receive(ESP8266_, (uint8_t *)data, amount, 5);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	2305      	movs	r3, #5
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	f003 f9a8 	bl	8003eca <HAL_UART_Receive>
				WaitForChar('\n',5);
 8000b7a:	2205      	movs	r2, #5
 8000b7c:	210a      	movs	r1, #10
 8000b7e:	68f8      	ldr	r0, [r7, #12]
 8000b80:	f7ff fcfe 	bl	8000580 <_ZN16ESP8266Interface11WaitForCharEcm>
				return 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	e000      	b.n	8000b8a <_ZN16ESP8266Interface7ReceiveEiPvRm+0x106>
			}
		}
	}

	return 1;
 8000b88:	2301      	movs	r3, #1
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3720      	adds	r7, #32
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	08005b8c 	.word	0x08005b8c
 8000b98:	08005b84 	.word	0x08005b84
 8000b9c:	00202020 	.word	0x00202020
 8000ba0:	08005b88 	.word	0x08005b88

08000ba4 <_ZN16ESP8266Interface8OpenPortEPKcm>:


bool ESP8266Interface::OpenPort(const char *type, uint32_t port){
 8000ba4:	b5b0      	push	{r4, r5, r7, lr}
 8000ba6:	b094      	sub	sp, #80	; 0x50
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
	char mode[] = "AT+CIPMUX=1\r\n";
 8000bb0:	4b32      	ldr	r3, [pc, #200]	; (8000c7c <_ZN16ESP8266Interface8OpenPortEPKcm+0xd8>)
 8000bb2:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000bb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bb8:	c407      	stmia	r4!, {r0, r1, r2}
 8000bba:	8023      	strh	r3, [r4, #0]
	char response[15] = "";
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
 8000bc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	f8c3 2007 	str.w	r2, [r3, #7]
	HAL_UART_Transmit(ESP8266_,  (uint8_t *)mode, sizeof(mode), HAL_MAX_DELAY);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000bd2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	220e      	movs	r2, #14
 8000bdc:	f003 f8e2 	bl	8003da4 <HAL_UART_Transmit>

	// Wait for OK
	while(strstr(response, "OK") == NULL){
 8000be0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000be4:	4926      	ldr	r1, [pc, #152]	; (8000c80 <_ZN16ESP8266Interface8OpenPortEPKcm+0xdc>)
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 ff6a 	bl	8004ac0 <strstr>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d108      	bne.n	8000c04 <_ZN16ESP8266Interface8OpenPortEPKcm+0x60>
		HAL_UART_Receive(ESP8266_, (uint8_t *)response, 5, 1);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000bf6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	2205      	movs	r2, #5
 8000bfe:	f003 f964 	bl	8003eca <HAL_UART_Receive>
	while(strstr(response, "OK") == NULL){
 8000c02:	e7ed      	b.n	8000be0 <_ZN16ESP8266Interface8OpenPortEPKcm+0x3c>
	}


	const char command[] = "AT+CIPSERVER=1,%lu\r\n";
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <_ZN16ESP8266Interface8OpenPortEPKcm+0xe0>)
 8000c06:	f107 0418 	add.w	r4, r7, #24
 8000c0a:	461d      	mov	r5, r3
 8000c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c10:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c14:	6020      	str	r0, [r4, #0]
 8000c16:	3404      	adds	r4, #4
 8000c18:	7021      	strb	r1, [r4, #0]
	sprintf(buffer_, command, port);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	f107 0118 	add.w	r1, r7, #24
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f003 feff 	bl	8004a28 <siprintf>
	HAL_UART_Transmit(ESP8266_,  (uint8_t *)buffer_, sizeof(command), HAL_MAX_DELAY);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	1d19      	adds	r1, r3, #4
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	2215      	movs	r2, #21
 8000c38:	f003 f8b4 	bl	8003da4 <HAL_UART_Transmit>

	WaitForChar('\n',100);
 8000c3c:	2264      	movs	r2, #100	; 0x64
 8000c3e:	210a      	movs	r1, #10
 8000c40:	68f8      	ldr	r0, [r7, #12]
 8000c42:	f7ff fc9d 	bl	8000580 <_ZN16ESP8266Interface11WaitForCharEcm>

	// Wait for OK
	char response1[6] = "";
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	82bb      	strh	r3, [r7, #20]
	while(strstr(response1, "OK") == NULL){
 8000c4e:	f107 0310 	add.w	r3, r7, #16
 8000c52:	490b      	ldr	r1, [pc, #44]	; (8000c80 <_ZN16ESP8266Interface8OpenPortEPKcm+0xdc>)
 8000c54:	4618      	mov	r0, r3
 8000c56:	f003 ff33 	bl	8004ac0 <strstr>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d108      	bne.n	8000c72 <_ZN16ESP8266Interface8OpenPortEPKcm+0xce>
		HAL_UART_Receive(ESP8266_, (uint8_t *)response1, 6, 1);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000c64:	f107 0110 	add.w	r1, r7, #16
 8000c68:	2301      	movs	r3, #1
 8000c6a:	2206      	movs	r2, #6
 8000c6c:	f003 f92d 	bl	8003eca <HAL_UART_Receive>
	while(strstr(response1, "OK") == NULL){
 8000c70:	e7ed      	b.n	8000c4e <_ZN16ESP8266Interface8OpenPortEPKcm+0xaa>
	}
	return 0;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3750      	adds	r7, #80	; 0x50
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c7c:	08005b90 	.word	0x08005b90
 8000c80:	08005adc 	.word	0x08005adc
 8000c84:	08005ba0 	.word	0x08005ba0

08000c88 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2140      	movs	r1, #64	; 0x40
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <ST7735_Select+0x14>)
 8000c92:	f001 f9b5 	bl	8002000 <HAL_GPIO_WritePin>
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	48000400 	.word	0x48000400

08000ca0 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2140      	movs	r1, #64	; 0x40
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <ST7735_Unselect+0x14>)
 8000caa:	f001 f9a9 	bl	8002000 <HAL_GPIO_WritePin>
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	48000400 	.word	0x48000400

08000cb8 <ST7735_Reset>:

void ST7735_Reset()
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2180      	movs	r1, #128	; 0x80
 8000cc0:	4806      	ldr	r0, [pc, #24]	; (8000cdc <ST7735_Reset+0x24>)
 8000cc2:	f001 f99d 	bl	8002000 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000cc6:	2005      	movs	r0, #5
 8000cc8:	f000 feea 	bl	8001aa0 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2180      	movs	r1, #128	; 0x80
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <ST7735_Reset+0x24>)
 8000cd2:	f001 f995 	bl	8002000 <HAL_GPIO_WritePin>
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	48000800 	.word	0x48000800

08000ce0 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf4:	f001 f984 	bl	8002000 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000cf8:	1df9      	adds	r1, r7, #7
 8000cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4803      	ldr	r0, [pc, #12]	; (8000d10 <ST7735_WriteCommand+0x30>)
 8000d02:	f002 fd36 	bl	8003772 <HAL_SPI_Transmit>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000020c 	.word	0x2000020c

08000d14 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d28:	f001 f96a 	bl	8002000 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
 8000d34:	6879      	ldr	r1, [r7, #4]
 8000d36:	4803      	ldr	r0, [pc, #12]	; (8000d44 <ST7735_WriteData+0x30>)
 8000d38:	f002 fd1b 	bl	8003772 <HAL_SPI_Transmit>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	2000020c 	.word	0x2000020c

08000d48 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	607a      	str	r2, [r7, #4]
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000d5a:	e034      	b.n	8000dc6 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000d66:	7afb      	ldrb	r3, [r7, #11]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ffb9 	bl	8000ce0 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	1c5a      	adds	r2, r3, #1
 8000d72:	607a      	str	r2, [r7, #4]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000d78:	7abb      	ldrb	r3, [r7, #10]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d80:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000d82:	7abb      	ldrb	r3, [r7, #10]
 8000d84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d88:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000d8a:	7abb      	ldrb	r3, [r7, #10]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d008      	beq.n	8000da2 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000d90:	7abb      	ldrb	r3, [r7, #10]
 8000d92:	4619      	mov	r1, r3
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ffbd 	bl	8000d14 <ST7735_WriteData>
            addr += numArgs;
 8000d9a:	7abb      	ldrb	r3, [r7, #10]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	4413      	add	r3, r2
 8000da0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000da2:	89bb      	ldrh	r3, [r7, #12]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d00e      	beq.n	8000dc6 <DisplayInit+0x7e>
            ms = *addr++;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	607a      	str	r2, [r7, #4]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000db2:	89bb      	ldrh	r3, [r7, #12]
 8000db4:	2bff      	cmp	r3, #255	; 0xff
 8000db6:	d102      	bne.n	8000dbe <DisplayInit+0x76>
 8000db8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000dbc:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000dbe:	89bb      	ldrh	r3, [r7, #12]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 fe6d 	bl	8001aa0 <HAL_Delay>
    while(numCommands--) {
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	1e5a      	subs	r2, r3, #1
 8000dca:	73fa      	strb	r2, [r7, #15]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1c5      	bne.n	8000d5c <DisplayInit+0x14>
        }
    }
}
 8000dd0:	bf00      	nop
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4604      	mov	r4, r0
 8000de0:	4608      	mov	r0, r1
 8000de2:	4611      	mov	r1, r2
 8000de4:	461a      	mov	r2, r3
 8000de6:	4623      	mov	r3, r4
 8000de8:	71fb      	strb	r3, [r7, #7]
 8000dea:	4603      	mov	r3, r0
 8000dec:	71bb      	strb	r3, [r7, #6]
 8000dee:	460b      	mov	r3, r1
 8000df0:	717b      	strb	r3, [r7, #5]
 8000df2:	4613      	mov	r3, r2
 8000df4:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000df6:	202a      	movs	r0, #42	; 0x2a
 8000df8:	f7ff ff72 	bl	8000ce0 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	733b      	strb	r3, [r7, #12]
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <ST7735_SetAddressWindow+0x88>)
 8000e02:	781a      	ldrb	r2, [r3, #0]
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	4413      	add	r3, r2
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	737b      	strb	r3, [r7, #13]
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73bb      	strb	r3, [r7, #14]
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <ST7735_SetAddressWindow+0x88>)
 8000e12:	781a      	ldrb	r2, [r3, #0]
 8000e14:	797b      	ldrb	r3, [r7, #5]
 8000e16:	4413      	add	r3, r2
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	2104      	movs	r1, #4
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff76 	bl	8000d14 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000e28:	202b      	movs	r0, #43	; 0x2b
 8000e2a:	f7ff ff59 	bl	8000ce0 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <ST7735_SetAddressWindow+0x8c>)
 8000e30:	781a      	ldrb	r2, [r3, #0]
 8000e32:	79bb      	ldrb	r3, [r7, #6]
 8000e34:	4413      	add	r3, r2
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <ST7735_SetAddressWindow+0x8c>)
 8000e3c:	781a      	ldrb	r2, [r3, #0]
 8000e3e:	793b      	ldrb	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff61 	bl	8000d14 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000e52:	202c      	movs	r0, #44	; 0x2c
 8000e54:	f7ff ff44 	bl	8000ce0 <ST7735_WriteCommand>
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd90      	pop	{r4, r7, pc}
 8000e60:	20000207 	.word	0x20000207
 8000e64:	20000208 	.word	0x20000208

08000e68 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000e72:	f7ff ff09 	bl	8000c88 <ST7735_Select>
    ST7735_Reset();
 8000e76:	f7ff ff1f 	bl	8000cb8 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8000e7a:	480c      	ldr	r0, [pc, #48]	; (8000eac <ST7735_Init+0x44>)
 8000e7c:	f7ff ff64 	bl	8000d48 <DisplayInit>
    DisplayInit(init_cmds2);
 8000e80:	480b      	ldr	r0, [pc, #44]	; (8000eb0 <ST7735_Init+0x48>)
 8000e82:	f7ff ff61 	bl	8000d48 <DisplayInit>
    DisplayInit(init_cmds3);
 8000e86:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <ST7735_Init+0x4c>)
 8000e88:	f7ff ff5e 	bl	8000d48 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <ST7735_Init+0x50>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <ST7735_Init+0x54>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f810 	bl	8000ec0 <ST7735_SetRotation>
    ST7735_Unselect();
 8000ea0:	f7ff fefe 	bl	8000ca0 <ST7735_Unselect>

}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	08005c08 	.word	0x08005c08
 8000eb0:	08005c40 	.word	0x08005c40
 8000eb4:	08005c50 	.word	0x08005c50
 8000eb8:	20000205 	.word	0x20000205
 8000ebc:	20000206 	.word	0x20000206

08000ec0 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b33      	ldr	r3, [pc, #204]	; (8000fa4 <ST7735_SetRotation+0xe4>)
 8000ed8:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8000eda:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <ST7735_SetRotation+0xe4>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d84e      	bhi.n	8000f80 <ST7735_SetRotation+0xc0>
 8000ee2:	a201      	add	r2, pc, #4	; (adr r2, 8000ee8 <ST7735_SetRotation+0x28>)
 8000ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee8:	08000ef9 	.word	0x08000ef9
 8000eec:	08000f1b 	.word	0x08000f1b
 8000ef0:	08000f3d 	.word	0x08000f3d
 8000ef4:	08000f5f 	.word	0x08000f5f
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000ef8:	23c0      	movs	r3, #192	; 0xc0
 8000efa:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000efc:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <ST7735_SetRotation+0xe8>)
 8000efe:	22a0      	movs	r2, #160	; 0xa0
 8000f00:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000f02:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <ST7735_SetRotation+0xec>)
 8000f04:	2280      	movs	r2, #128	; 0x80
 8000f06:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000f08:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <ST7735_SetRotation+0xf0>)
 8000f0a:	781a      	ldrb	r2, [r3, #0]
 8000f0c:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <ST7735_SetRotation+0xf4>)
 8000f0e:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000f10:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <ST7735_SetRotation+0xf8>)
 8000f12:	781a      	ldrb	r2, [r3, #0]
 8000f14:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <ST7735_SetRotation+0xfc>)
 8000f16:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000f18:	e032      	b.n	8000f80 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000f1a:	23a0      	movs	r3, #160	; 0xa0
 8000f1c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000f1e:	4b23      	ldr	r3, [pc, #140]	; (8000fac <ST7735_SetRotation+0xec>)
 8000f20:	22a0      	movs	r2, #160	; 0xa0
 8000f22:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000f24:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <ST7735_SetRotation+0xe8>)
 8000f26:	2280      	movs	r2, #128	; 0x80
 8000f28:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <ST7735_SetRotation+0xf0>)
 8000f2c:	781a      	ldrb	r2, [r3, #0]
 8000f2e:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <ST7735_SetRotation+0xfc>)
 8000f30:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <ST7735_SetRotation+0xf8>)
 8000f34:	781a      	ldrb	r2, [r3, #0]
 8000f36:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <ST7735_SetRotation+0xf4>)
 8000f38:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000f3a:	e021      	b.n	8000f80 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000f40:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <ST7735_SetRotation+0xe8>)
 8000f42:	22a0      	movs	r2, #160	; 0xa0
 8000f44:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <ST7735_SetRotation+0xec>)
 8000f48:	2280      	movs	r2, #128	; 0x80
 8000f4a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <ST7735_SetRotation+0xf0>)
 8000f4e:	781a      	ldrb	r2, [r3, #0]
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <ST7735_SetRotation+0xf4>)
 8000f52:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <ST7735_SetRotation+0xf8>)
 8000f56:	781a      	ldrb	r2, [r3, #0]
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <ST7735_SetRotation+0xfc>)
 8000f5a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000f5c:	e010      	b.n	8000f80 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000f5e:	2360      	movs	r3, #96	; 0x60
 8000f60:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000f62:	4b12      	ldr	r3, [pc, #72]	; (8000fac <ST7735_SetRotation+0xec>)
 8000f64:	22a0      	movs	r2, #160	; 0xa0
 8000f66:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <ST7735_SetRotation+0xe8>)
 8000f6a:	2280      	movs	r2, #128	; 0x80
 8000f6c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <ST7735_SetRotation+0xf0>)
 8000f70:	781a      	ldrb	r2, [r3, #0]
 8000f72:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <ST7735_SetRotation+0xfc>)
 8000f74:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <ST7735_SetRotation+0xf8>)
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <ST7735_SetRotation+0xf4>)
 8000f7c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000f7e:	bf00      	nop
  }
  ST7735_Select();
 8000f80:	f7ff fe82 	bl	8000c88 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000f84:	2036      	movs	r0, #54	; 0x36
 8000f86:	f7ff feab 	bl	8000ce0 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000f8a:	f107 030f 	add.w	r3, r7, #15
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff febf 	bl	8000d14 <ST7735_WriteData>
  ST7735_Unselect();
 8000f96:	f7ff fe83 	bl	8000ca0 <ST7735_Unselect>
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000204 	.word	0x20000204
 8000fa8:	20000202 	.word	0x20000202
 8000fac:	20000200 	.word	0x20000200
 8000fb0:	20000205 	.word	0x20000205
 8000fb4:	20000207 	.word	0x20000207
 8000fb8:	20000206 	.word	0x20000206
 8000fbc:	20000208 	.word	0x20000208

08000fc0 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	b590      	push	{r4, r7, lr}
 8000fc4:	b089      	sub	sp, #36	; 0x24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	80bb      	strh	r3, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	b2d8      	uxtb	r0, r3
 8000fda:	88bb      	ldrh	r3, [r7, #4]
 8000fdc:	b2d9      	uxtb	r1, r3
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	3b01      	subs	r3, #1
 8000fec:	b2dc      	uxtb	r4, r3
 8000fee:	88bb      	ldrh	r3, [r7, #4]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000ff6:	4413      	add	r3, r2
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	4622      	mov	r2, r4
 8001000:	f7ff feea 	bl	8000dd8 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	e043      	b.n	8001092 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800100a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	3b20      	subs	r3, #32
 8001010:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001014:	fb01 f303 	mul.w	r3, r1, r3
 8001018:	4619      	mov	r1, r3
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	440b      	add	r3, r1
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
 800102a:	e029      	b.n	8001080 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00e      	beq.n	800105a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800103c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800103e:	0a1b      	lsrs	r3, r3, #8
 8001040:	b29b      	uxth	r3, r3
 8001042:	b2db      	uxtb	r3, r3
 8001044:	743b      	strb	r3, [r7, #16]
 8001046:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001048:	b2db      	uxtb	r3, r3
 800104a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	2102      	movs	r1, #2
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fe5e 	bl	8000d14 <ST7735_WriteData>
 8001058:	e00f      	b.n	800107a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800105a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800105e:	0a1b      	lsrs	r3, r3, #8
 8001060:	b29b      	uxth	r3, r3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	733b      	strb	r3, [r7, #12]
 8001066:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800106a:	b2db      	uxtb	r3, r3
 800106c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	2102      	movs	r1, #2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fe4d 	bl	8000d14 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	3301      	adds	r3, #1
 800107e:	61bb      	str	r3, [r7, #24]
 8001080:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001084:	461a      	mov	r2, r3
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	4293      	cmp	r3, r2
 800108a:	d3cf      	bcc.n	800102c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	3301      	adds	r3, #1
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001096:	461a      	mov	r2, r3
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	4293      	cmp	r3, r2
 800109c:	d3b5      	bcc.n	800100a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800109e:	bf00      	nop
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010a8:	b002      	add	sp, #8
 80010aa:	4770      	bx	lr

080010ac <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, char *str, uint32_t size, FontDef font, uint16_t color, uint16_t bgcolor) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af04      	add	r7, sp, #16
 80010b2:	60ba      	str	r2, [r7, #8]
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4603      	mov	r3, r0
 80010b8:	81fb      	strh	r3, [r7, #14]
 80010ba:	460b      	mov	r3, r1
 80010bc:	81bb      	strh	r3, [r7, #12]
    ST7735_Select();
 80010be:	f7ff fde3 	bl	8000c88 <ST7735_Select>

    for(uint32_t i = 0; i < size; i++){
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	e039      	b.n	800113c <ST7735_WriteString+0x90>
        if(x + font.width >= _width) {
 80010c8:	89fb      	ldrh	r3, [r7, #14]
 80010ca:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a20      	ldr	r2, [pc, #128]	; (8001154 <ST7735_WriteString+0xa8>)
 80010d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010d6:	4293      	cmp	r3, r2
 80010d8:	db16      	blt.n	8001108 <ST7735_WriteString+0x5c>
            x = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	81fb      	strh	r3, [r7, #14]
            y += font.height;
 80010de:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	89bb      	ldrh	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	81bb      	strh	r3, [r7, #12]
            if(y + font.height >= _height) {
 80010ea:	89bb      	ldrh	r3, [r7, #12]
 80010ec:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80010f0:	4413      	add	r3, r2
 80010f2:	4a19      	ldr	r2, [pc, #100]	; (8001158 <ST7735_WriteString+0xac>)
 80010f4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010f8:	4293      	cmp	r3, r2
 80010fa:	da24      	bge.n	8001146 <ST7735_WriteString+0x9a>
                break;
            }

            if(str[i] == ' ') {
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	4413      	add	r3, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b20      	cmp	r3, #32
 8001106:	d015      	beq.n	8001134 <ST7735_WriteString+0x88>
                // skip spaces in the beginning of the new line
                continue;
            }
        }

        ST7735_WriteChar(x, y, str[i], font, color, bgcolor);
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	4413      	add	r3, r2
 800110e:	781a      	ldrb	r2, [r3, #0]
 8001110:	89b9      	ldrh	r1, [r7, #12]
 8001112:	89f8      	ldrh	r0, [r7, #14]
 8001114:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	f7ff ff4d 	bl	8000fc0 <ST7735_WriteChar>
        x += font.width;
 8001126:	f897 3020 	ldrb.w	r3, [r7, #32]
 800112a:	b29a      	uxth	r2, r3
 800112c:	89fb      	ldrh	r3, [r7, #14]
 800112e:	4413      	add	r3, r2
 8001130:	81fb      	strh	r3, [r7, #14]
 8001132:	e000      	b.n	8001136 <ST7735_WriteString+0x8a>
                continue;
 8001134:	bf00      	nop
    for(uint32_t i = 0; i < size; i++){
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3301      	adds	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	429a      	cmp	r2, r3
 8001142:	d3c1      	bcc.n	80010c8 <ST7735_WriteString+0x1c>
 8001144:	e000      	b.n	8001148 <ST7735_WriteString+0x9c>
                break;
 8001146:	bf00      	nop
    }

    ST7735_Unselect();
 8001148:	f7ff fdaa 	bl	8000ca0 <ST7735_Unselect>
}
 800114c:	bf00      	nop
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000200 	.word	0x20000200
 8001158:	20000202 	.word	0x20000202

0800115c <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	4604      	mov	r4, r0
 8001164:	4608      	mov	r0, r1
 8001166:	4611      	mov	r1, r2
 8001168:	461a      	mov	r2, r3
 800116a:	4623      	mov	r3, r4
 800116c:	80fb      	strh	r3, [r7, #6]
 800116e:	4603      	mov	r3, r0
 8001170:	80bb      	strh	r3, [r7, #4]
 8001172:	460b      	mov	r3, r1
 8001174:	807b      	strh	r3, [r7, #2]
 8001176:	4613      	mov	r3, r2
 8001178:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	4a39      	ldr	r2, [pc, #228]	; (8001264 <ST7735_FillRectangle+0x108>)
 800117e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001182:	4293      	cmp	r3, r2
 8001184:	da6a      	bge.n	800125c <ST7735_FillRectangle+0x100>
 8001186:	88bb      	ldrh	r3, [r7, #4]
 8001188:	4a37      	ldr	r2, [pc, #220]	; (8001268 <ST7735_FillRectangle+0x10c>)
 800118a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800118e:	4293      	cmp	r3, r2
 8001190:	da64      	bge.n	800125c <ST7735_FillRectangle+0x100>
    if((x + w - 1) >= _width) w = _width - x;
 8001192:	88fa      	ldrh	r2, [r7, #6]
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	4413      	add	r3, r2
 8001198:	3b01      	subs	r3, #1
 800119a:	4a32      	ldr	r2, [pc, #200]	; (8001264 <ST7735_FillRectangle+0x108>)
 800119c:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011a0:	4293      	cmp	r3, r2
 80011a2:	db06      	blt.n	80011b2 <ST7735_FillRectangle+0x56>
 80011a4:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <ST7735_FillRectangle+0x108>)
 80011a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 80011b2:	88ba      	ldrh	r2, [r7, #4]
 80011b4:	883b      	ldrh	r3, [r7, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	3b01      	subs	r3, #1
 80011ba:	4a2b      	ldr	r2, [pc, #172]	; (8001268 <ST7735_FillRectangle+0x10c>)
 80011bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011c0:	4293      	cmp	r3, r2
 80011c2:	db06      	blt.n	80011d2 <ST7735_FillRectangle+0x76>
 80011c4:	4b28      	ldr	r3, [pc, #160]	; (8001268 <ST7735_FillRectangle+0x10c>)
 80011c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	88bb      	ldrh	r3, [r7, #4]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80011d2:	f7ff fd59 	bl	8000c88 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	b2d8      	uxtb	r0, r3
 80011da:	88bb      	ldrh	r3, [r7, #4]
 80011dc:	b2d9      	uxtb	r1, r3
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	887b      	ldrh	r3, [r7, #2]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4413      	add	r3, r2
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	3b01      	subs	r3, #1
 80011ec:	b2dc      	uxtb	r4, r3
 80011ee:	88bb      	ldrh	r3, [r7, #4]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	883b      	ldrh	r3, [r7, #0]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	4413      	add	r3, r2
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	3b01      	subs	r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	4622      	mov	r2, r4
 8001200:	f7ff fdea 	bl	8000dd8 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001204:	8c3b      	ldrh	r3, [r7, #32]
 8001206:	0a1b      	lsrs	r3, r3, #8
 8001208:	b29b      	uxth	r3, r3
 800120a:	b2db      	uxtb	r3, r3
 800120c:	733b      	strb	r3, [r7, #12]
 800120e:	8c3b      	ldrh	r3, [r7, #32]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121e:	f000 feef 	bl	8002000 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001222:	883b      	ldrh	r3, [r7, #0]
 8001224:	80bb      	strh	r3, [r7, #4]
 8001226:	e013      	b.n	8001250 <ST7735_FillRectangle+0xf4>
        for(x = w; x > 0; x--) {
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	80fb      	strh	r3, [r7, #6]
 800122c:	e00a      	b.n	8001244 <ST7735_FillRectangle+0xe8>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800122e:	f107 010c 	add.w	r1, r7, #12
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	2202      	movs	r2, #2
 8001238:	480c      	ldr	r0, [pc, #48]	; (800126c <ST7735_FillRectangle+0x110>)
 800123a:	f002 fa9a 	bl	8003772 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	3b01      	subs	r3, #1
 8001242:	80fb      	strh	r3, [r7, #6]
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f1      	bne.n	800122e <ST7735_FillRectangle+0xd2>
    for(y = h; y > 0; y--) {
 800124a:	88bb      	ldrh	r3, [r7, #4]
 800124c:	3b01      	subs	r3, #1
 800124e:	80bb      	strh	r3, [r7, #4]
 8001250:	88bb      	ldrh	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1e8      	bne.n	8001228 <ST7735_FillRectangle+0xcc>
        }
    }

    ST7735_Unselect();
 8001256:	f7ff fd23 	bl	8000ca0 <ST7735_Unselect>
 800125a:	e000      	b.n	800125e <ST7735_FillRectangle+0x102>
    if((x >= _width) || (y >= _height)) return;
 800125c:	bf00      	nop
}
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	bd90      	pop	{r4, r7, pc}
 8001264:	20000200 	.word	0x20000200
 8001268:	20000202 	.word	0x20000202
 800126c:	2000020c 	.word	0x2000020c

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	f5ad 7d29 	sub.w	sp, sp, #676	; 0x2a4
 8001276:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001278:	f000 fb9d 	bl	80019b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127c:	f000 f8a8 	bl	80013d0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001280:	f000 f9aa 	bl	80015d8 <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8001284:	f000 f930 	bl	80014e8 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8001288:	f000 f972 	bl	8001570 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  ST7735_Init(0);
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fdeb 	bl	8000e68 <ST7735_Init>
  ST7735_FillRectangle(0,0,128,160,WHITE);
 8001292:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	23a0      	movs	r3, #160	; 0xa0
 800129a:	2280      	movs	r2, #128	; 0x80
 800129c:	2100      	movs	r1, #0
 800129e:	2000      	movs	r0, #0
 80012a0:	f7ff ff5c 	bl	800115c <ST7735_FillRectangle>


  ESP8266Interface i(&huart1);
 80012a4:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80012a8:	4942      	ldr	r1, [pc, #264]	; (80013b4 <main+0x144>)
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f996 	bl	80005dc <_ZN16ESP8266InterfaceC1EP20__UART_HandleTypeDef>
  i.Reset();
 80012b0:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f9ff 	bl	80006b8 <_ZN16ESP8266Interface5ResetEv>
  i.StartUp(1);
 80012ba:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80012be:	2101      	movs	r1, #1
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f9bf 	bl	8000644 <_ZN16ESP8266Interface7StartUpEi>
  i.Connect(SSID, PASSWORD);
 80012c6:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80012ca:	4a3b      	ldr	r2, [pc, #236]	; (80013b8 <main+0x148>)
 80012cc:	493b      	ldr	r1, [pc, #236]	; (80013bc <main+0x14c>)
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fa34 	bl	800073c <_ZN16ESP8266Interface7ConnectEPKcS1_>
  i.ConnectSocket(SOCKET_TYPE, SERVER_IP, SERVER_PORT);
 80012d4:	f507 7005 	add.w	r0, r7, #532	; 0x214
 80012d8:	f241 338d 	movw	r3, #5005	; 0x138d
 80012dc:	4a38      	ldr	r2, [pc, #224]	; (80013c0 <main+0x150>)
 80012de:	4939      	ldr	r1, [pc, #228]	; (80013c4 <main+0x154>)
 80012e0:	f7ff fa6e 	bl	80007c0 <_ZN16ESP8266Interface13ConnectSocketEPKcS1_t>

  char command[] = "IP:\"%s\"";
 80012e4:	4a38      	ldr	r2, [pc, #224]	; (80013c8 <main+0x158>)
 80012e6:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80012ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ee:	e883 0003 	stmia.w	r3, {r0, r1}
  char buffer[20];
  sprintf(buffer, command, i.GetIP());
 80012f2:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fb02 	bl	8000900 <_ZN16ESP8266Interface5GetIPEv>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8001302:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001306:	4618      	mov	r0, r3
 8001308:	f003 fb8e 	bl	8004a28 <siprintf>

  i.Send(0, buffer, 20);
 800130c:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8001310:	f507 7005 	add.w	r0, r7, #532	; 0x214
 8001314:	2314      	movs	r3, #20
 8001316:	2100      	movs	r1, #0
 8001318:	f7ff fb58 	bl	80009cc <_ZN16ESP8266Interface4SendEiPKvm>
  i.DisconnectSocket();
 800131c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fabf 	bl	80008a4 <_ZN16ESP8266Interface16DisconnectSocketEv>

  i.OpenPort("UDP", 5005);
 8001326:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800132a:	f241 328d 	movw	r2, #5005	; 0x138d
 800132e:	4925      	ldr	r1, [pc, #148]	; (80013c4 <main+0x154>)
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fc37 	bl	8000ba4 <_ZN16ESP8266Interface8OpenPortEPKcm>

  ST7735_WriteString(0,0, buffer, 20 ,Font_7x10,0,WHITE);
 8001336:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 800133a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800133e:	9303      	str	r3, [sp, #12]
 8001340:	2300      	movs	r3, #0
 8001342:	9302      	str	r3, [sp, #8]
 8001344:	4921      	ldr	r1, [pc, #132]	; (80013cc <main+0x15c>)
 8001346:	466b      	mov	r3, sp
 8001348:	c903      	ldmia	r1, {r0, r1}
 800134a:	e883 0003 	stmia.w	r3, {r0, r1}
 800134e:	2314      	movs	r3, #20
 8001350:	2100      	movs	r1, #0
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff feaa 	bl	80010ac <ST7735_WriteString>

  char data[500];
  uint32_t size = 0;
 8001358:	463b      	mov	r3, r7
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]

  while(1){
	i.Receive(0, data, size);
 800135e:	463b      	mov	r3, r7
 8001360:	1d3a      	adds	r2, r7, #4
 8001362:	f507 7005 	add.w	r0, r7, #532	; 0x214
 8001366:	2100      	movs	r1, #0
 8001368:	f7ff fb8c 	bl	8000a84 <_ZN16ESP8266Interface7ReceiveEiPvRm>
	if(size > 0){
 800136c:	463b      	mov	r3, r7
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f4      	beq.n	800135e <main+0xee>
		ST7735_FillRectangle(0,0,128,160,WHITE);
 8001374:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	23a0      	movs	r3, #160	; 0xa0
 800137c:	2280      	movs	r2, #128	; 0x80
 800137e:	2100      	movs	r1, #0
 8001380:	2000      	movs	r0, #0
 8001382:	f7ff feeb 	bl	800115c <ST7735_FillRectangle>
		ST7735_WriteString(0,0, data, size ,Font_7x10,0,WHITE);
 8001386:	463b      	mov	r3, r7
 8001388:	681c      	ldr	r4, [r3, #0]
 800138a:	1d3a      	adds	r2, r7, #4
 800138c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001390:	9303      	str	r3, [sp, #12]
 8001392:	2300      	movs	r3, #0
 8001394:	9302      	str	r3, [sp, #8]
 8001396:	490d      	ldr	r1, [pc, #52]	; (80013cc <main+0x15c>)
 8001398:	466b      	mov	r3, sp
 800139a:	c903      	ldmia	r1, {r0, r1}
 800139c:	e883 0003 	stmia.w	r3, {r0, r1}
 80013a0:	4623      	mov	r3, r4
 80013a2:	2100      	movs	r1, #0
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff fe81 	bl	80010ac <ST7735_WriteString>
		size = 0;
 80013aa:	463b      	mov	r3, r7
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
	i.Receive(0, data, size);
 80013b0:	e7d5      	b.n	800135e <main+0xee>
 80013b2:	bf00      	nop
 80013b4:	20000270 	.word	0x20000270
 80013b8:	08005bb8 	.word	0x08005bb8
 80013bc:	08005bc4 	.word	0x08005bc4
 80013c0:	08005bd0 	.word	0x08005bd0
 80013c4:	08005be0 	.word	0x08005be0
 80013c8:	08005be4 	.word	0x08005be4
 80013cc:	20000000 	.word	0x20000000

080013d0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0b8      	sub	sp, #224	; 0xe0
 80013d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013da:	2244      	movs	r2, #68	; 0x44
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 fa62 	bl	80048a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f4:	463b      	mov	r3, r7
 80013f6:	2288      	movs	r2, #136	; 0x88
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f003 fa54 	bl	80048a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001400:	2310      	movs	r3, #16
 8001402:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001406:	2301      	movs	r3, #1
 8001408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001412:	2360      	movs	r3, #96	; 0x60
 8001414:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001418:	2302      	movs	r3, #2
 800141a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800141e:	2301      	movs	r3, #1
 8001420:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001424:	2301      	movs	r3, #1
 8001426:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800142a:	2328      	movs	r3, #40	; 0x28
 800142c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001430:	2307      	movs	r3, #7
 8001432:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001436:	2302      	movs	r3, #2
 8001438:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800143c:	2302      	movs	r3, #2
 800143e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001442:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001446:	4618      	mov	r0, r3
 8001448:	f000 fe56 	bl	80020f8 <HAL_RCC_OscConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	bf14      	ite	ne
 8001452:	2301      	movne	r3, #1
 8001454:	2300      	moveq	r3, #0
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <_Z18SystemClock_Configv+0x90>
  {
    Error_Handler();
 800145c:	f000 f93e 	bl	80016dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001460:	230f      	movs	r3, #15
 8001462:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001466:	2303      	movs	r3, #3
 8001468:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800147e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001482:	2104      	movs	r1, #4
 8001484:	4618      	mov	r0, r3
 8001486:	f001 fa1d 	bl	80028c4 <HAL_RCC_ClockConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	bf14      	ite	ne
 8001490:	2301      	movne	r3, #1
 8001492:	2300      	moveq	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 800149a:	f000 f91f 	bl	80016dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800149e:	2301      	movs	r3, #1
 80014a0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014a2:	2300      	movs	r3, #0
 80014a4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 fc0f 	bl	8002ccc <HAL_RCCEx_PeriphCLKConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	bf14      	ite	ne
 80014b4:	2301      	movne	r3, #1
 80014b6:	2300      	moveq	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 80014be:	f000 f90d 	bl	80016dc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014c6:	f000 fdc1 	bl	800204c <HAL_PWREx_ControlVoltageScaling>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	bf14      	ite	ne
 80014d0:	2301      	movne	r3, #1
 80014d2:	2300      	moveq	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <_Z18SystemClock_Configv+0x10e>
  {
    Error_Handler();
 80014da:	f000 f8ff 	bl	80016dc <Error_Handler>
  }
}
 80014de:	bf00      	nop
 80014e0:	37e0      	adds	r7, #224	; 0xe0
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <_ZL12MX_SPI1_Initv+0x80>)
 80014ee:	4a1f      	ldr	r2, [pc, #124]	; (800156c <_ZL12MX_SPI1_Initv+0x84>)
 80014f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <_ZL12MX_SPI1_Initv+0x80>)
 80014f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <_ZL12MX_SPI1_Initv+0x80>)
 80014fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001500:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <_ZL12MX_SPI1_Initv+0x80>)
 8001504:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001508:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <_ZL12MX_SPI1_Initv+0x80>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <_ZL12MX_SPI1_Initv+0x80>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <_ZL12MX_SPI1_Initv+0x80>)
 8001518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800151c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <_ZL12MX_SPI1_Initv+0x80>)
 8001520:	2218      	movs	r2, #24
 8001522:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001524:	4b10      	ldr	r3, [pc, #64]	; (8001568 <_ZL12MX_SPI1_Initv+0x80>)
 8001526:	2200      	movs	r2, #0
 8001528:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <_ZL12MX_SPI1_Initv+0x80>)
 800152c:	2200      	movs	r2, #0
 800152e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001530:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <_ZL12MX_SPI1_Initv+0x80>)
 8001532:	2200      	movs	r2, #0
 8001534:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <_ZL12MX_SPI1_Initv+0x80>)
 8001538:	2207      	movs	r2, #7
 800153a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <_ZL12MX_SPI1_Initv+0x80>)
 800153e:	2200      	movs	r2, #0
 8001540:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <_ZL12MX_SPI1_Initv+0x80>)
 8001544:	2208      	movs	r2, #8
 8001546:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001548:	4807      	ldr	r0, [pc, #28]	; (8001568 <_ZL12MX_SPI1_Initv+0x80>)
 800154a:	f002 f86f 	bl	800362c <HAL_SPI_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	bf14      	ite	ne
 8001554:	2301      	movne	r3, #1
 8001556:	2300      	moveq	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <_ZL12MX_SPI1_Initv+0x7a>
  {
    Error_Handler();
 800155e:	f000 f8bd 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	2000020c 	.word	0x2000020c
 800156c:	40013000 	.word	0x40013000

08001570 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001574:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001576:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <_ZL19MX_USART1_UART_Initv+0x64>)
 8001578:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 800157c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001580:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015b2:	4807      	ldr	r0, [pc, #28]	; (80015d0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80015b4:	f002 fba8 	bl	8003d08 <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	bf14      	ite	ne
 80015be:	2301      	movne	r3, #1
 80015c0:	2300      	moveq	r3, #0
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80015c8:	f000 f888 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000270 	.word	0x20000270
 80015d4:	40013800 	.word	0x40013800

080015d8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ee:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <_ZL12MX_GPIO_Initv+0xf8>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	4a37      	ldr	r2, [pc, #220]	; (80016d0 <_ZL12MX_GPIO_Initv+0xf8>)
 80015f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fa:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <_ZL12MX_GPIO_Initv+0xf8>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <_ZL12MX_GPIO_Initv+0xf8>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	4a31      	ldr	r2, [pc, #196]	; (80016d0 <_ZL12MX_GPIO_Initv+0xf8>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001612:	4b2f      	ldr	r3, [pc, #188]	; (80016d0 <_ZL12MX_GPIO_Initv+0xf8>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161e:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <_ZL12MX_GPIO_Initv+0xf8>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	4a2b      	ldr	r2, [pc, #172]	; (80016d0 <_ZL12MX_GPIO_Initv+0xf8>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162a:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <_ZL12MX_GPIO_Initv+0xf8>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <_ZL12MX_GPIO_Initv+0xf8>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	4a25      	ldr	r2, [pc, #148]	; (80016d0 <_ZL12MX_GPIO_Initv+0xf8>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001642:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <_ZL12MX_GPIO_Initv+0xf8>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	4820      	ldr	r0, [pc, #128]	; (80016d4 <_ZL12MX_GPIO_Initv+0xfc>)
 8001654:	f000 fcd4 	bl	8002000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800165e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001662:	f000 fccd 	bl	8002000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	2140      	movs	r1, #64	; 0x40
 800166a:	481b      	ldr	r0, [pc, #108]	; (80016d8 <_ZL12MX_GPIO_Initv+0x100>)
 800166c:	f000 fcc8 	bl	8002000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001674:	2301      	movs	r3, #1
 8001676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	4813      	ldr	r0, [pc, #76]	; (80016d4 <_ZL12MX_GPIO_Initv+0xfc>)
 8001688:	f000 fb12 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800168c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001692:	2301      	movs	r3, #1
 8001694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a8:	f000 fb02 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016ac:	2340      	movs	r3, #64	; 0x40
 80016ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <_ZL12MX_GPIO_Initv+0x100>)
 80016c4:	f000 faf4 	bl	8001cb0 <HAL_GPIO_Init>

}
 80016c8:	bf00      	nop
 80016ca:	3728      	adds	r7, #40	; 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000
 80016d4:	48000800 	.word	0x48000800
 80016d8:	48000400 	.word	0x48000400

080016dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <Error_Handler+0x6>

080016e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_MspInit+0x44>)
 80016ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ee:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <HAL_MspInit+0x44>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6613      	str	r3, [r2, #96]	; 0x60
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <HAL_MspInit+0x44>)
 80016f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_MspInit+0x44>)
 8001704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001706:	4a08      	ldr	r2, [pc, #32]	; (8001728 <HAL_MspInit+0x44>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	6593      	str	r3, [r2, #88]	; 0x58
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_MspInit+0x44>)
 8001710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000

0800172c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	; 0x28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a17      	ldr	r2, [pc, #92]	; (80017a8 <HAL_SPI_MspInit+0x7c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d128      	bne.n	80017a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <HAL_SPI_MspInit+0x80>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001752:	4a16      	ldr	r2, [pc, #88]	; (80017ac <HAL_SPI_MspInit+0x80>)
 8001754:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001758:	6613      	str	r3, [r2, #96]	; 0x60
 800175a:	4b14      	ldr	r3, [pc, #80]	; (80017ac <HAL_SPI_MspInit+0x80>)
 800175c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_SPI_MspInit+0x80>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	4a10      	ldr	r2, [pc, #64]	; (80017ac <HAL_SPI_MspInit+0x80>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <HAL_SPI_MspInit+0x80>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800177e:	23a0      	movs	r3, #160	; 0xa0
 8001780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800178e:	2305      	movs	r3, #5
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179c:	f000 fa88 	bl	8001cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017a0:	bf00      	nop
 80017a2:	3728      	adds	r7, #40	; 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40013000 	.word	0x40013000
 80017ac:	40021000 	.word	0x40021000

080017b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a18      	ldr	r2, [pc, #96]	; (8001830 <HAL_UART_MspInit+0x80>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d129      	bne.n	8001826 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_UART_MspInit+0x84>)
 80017d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d6:	4a17      	ldr	r2, [pc, #92]	; (8001834 <HAL_UART_MspInit+0x84>)
 80017d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017dc:	6613      	str	r3, [r2, #96]	; 0x60
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_UART_MspInit+0x84>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_UART_MspInit+0x84>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	4a11      	ldr	r2, [pc, #68]	; (8001834 <HAL_UART_MspInit+0x84>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_UART_MspInit+0x84>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001802:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001814:	2307      	movs	r3, #7
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	4619      	mov	r1, r3
 800181e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001822:	f000 fa45 	bl	8001cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001826:	bf00      	nop
 8001828:	3728      	adds	r7, #40	; 0x28
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40013800 	.word	0x40013800
 8001834:	40021000 	.word	0x40021000

08001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800183c:	e7fe      	b.n	800183c <NMI_Handler+0x4>

0800183e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <HardFault_Handler+0x4>

08001844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <MemManage_Handler+0x4>

0800184a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <BusFault_Handler+0x4>

08001850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <UsageFault_Handler+0x4>

08001856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001884:	f000 f8ec 	bl	8001a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}

0800188c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001894:	4a14      	ldr	r2, [pc, #80]	; (80018e8 <_sbrk+0x5c>)
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <_sbrk+0x60>)
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <_sbrk+0x64>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <_sbrk+0x68>)
 80018ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d207      	bcs.n	80018cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018bc:	f002 ffc2 	bl	8004844 <__errno>
 80018c0:	4602      	mov	r2, r0
 80018c2:	230c      	movs	r3, #12
 80018c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	e009      	b.n	80018e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <_sbrk+0x64>)
 80018dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20018000 	.word	0x20018000
 80018ec:	00000400 	.word	0x00000400
 80018f0:	200002f0 	.word	0x200002f0
 80018f4:	20000308 	.word	0x20000308

080018f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018fc:	4b17      	ldr	r3, [pc, #92]	; (800195c <SystemInit+0x64>)
 80018fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001902:	4a16      	ldr	r2, [pc, #88]	; (800195c <SystemInit+0x64>)
 8001904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <SystemInit+0x68>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a13      	ldr	r2, [pc, #76]	; (8001960 <SystemInit+0x68>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <SystemInit+0x68>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <SystemInit+0x68>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <SystemInit+0x68>)
 8001924:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001928:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800192c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <SystemInit+0x68>)
 8001930:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001934:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <SystemInit+0x68>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a09      	ldr	r2, [pc, #36]	; (8001960 <SystemInit+0x68>)
 800193c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001940:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <SystemInit+0x68>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <SystemInit+0x64>)
 800194a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800194e:	609a      	str	r2, [r3, #8]
#endif
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000ed00 	.word	0xe000ed00
 8001960:	40021000 	.word	0x40021000

08001964 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800199c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001968:	f7ff ffc6 	bl	80018f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800196c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800196e:	e003      	b.n	8001978 <LoopCopyDataInit>

08001970 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001972:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001974:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001976:	3104      	adds	r1, #4

08001978 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001978:	480a      	ldr	r0, [pc, #40]	; (80019a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800197c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800197e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001980:	d3f6      	bcc.n	8001970 <CopyDataInit>
	ldr	r2, =_sbss
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8001984:	e002      	b.n	800198c <LoopFillZerobss>

08001986 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001986:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001988:	f842 3b04 	str.w	r3, [r2], #4

0800198c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <LoopForever+0x16>)
	cmp	r2, r3
 800198e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001990:	d3f9      	bcc.n	8001986 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001992:	f002 ff5d 	bl	8004850 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001996:	f7ff fc6b 	bl	8001270 <main>

0800199a <LoopForever>:

LoopForever:
    b LoopForever
 800199a:	e7fe      	b.n	800199a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800199c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80019a0:	080065fc 	.word	0x080065fc
	ldr	r0, =_sdata
 80019a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80019a8:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 80019ac:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 80019b0:	20000304 	.word	0x20000304

080019b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <ADC1_2_IRQHandler>

080019b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c0:	2003      	movs	r0, #3
 80019c2:	f000 f941 	bl	8001c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019c6:	2000      	movs	r0, #0
 80019c8:	f000 f80e 	bl	80019e8 <HAL_InitTick>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	71fb      	strb	r3, [r7, #7]
 80019d6:	e001      	b.n	80019dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019d8:	f7ff fe84 	bl	80016e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019dc:	79fb      	ldrb	r3, [r7, #7]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019f4:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <HAL_InitTick+0x6c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d023      	beq.n	8001a44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019fc:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <HAL_InitTick+0x70>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <HAL_InitTick+0x6c>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4619      	mov	r1, r3
 8001a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 f93f 	bl	8001c96 <HAL_SYSTICK_Config>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10f      	bne.n	8001a3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b0f      	cmp	r3, #15
 8001a22:	d809      	bhi.n	8001a38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a24:	2200      	movs	r2, #0
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2c:	f000 f917 	bl	8001c5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a30:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <HAL_InitTick+0x74>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e007      	b.n	8001a48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	e004      	b.n	8001a48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	73fb      	strb	r3, [r7, #15]
 8001a42:	e001      	b.n	8001a48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000010 	.word	0x20000010
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	2000000c 	.word	0x2000000c

08001a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_IncTick+0x20>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_IncTick+0x24>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <HAL_IncTick+0x24>)
 8001a72:	6013      	str	r3, [r2, #0]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000010 	.word	0x20000010
 8001a84:	200002fc 	.word	0x200002fc

08001a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <HAL_GetTick+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	200002fc 	.word	0x200002fc

08001aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa8:	f7ff ffee 	bl	8001a88 <HAL_GetTick>
 8001aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab8:	d005      	beq.n	8001ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_Delay+0x40>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ac6:	bf00      	nop
 8001ac8:	f7ff ffde 	bl	8001a88 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d8f7      	bhi.n	8001ac8 <HAL_Delay+0x28>
  {
  }
}
 8001ad8:	bf00      	nop
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000010 	.word	0x20000010

08001ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b00:	4013      	ands	r3, r2
 8001b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b16:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	60d3      	str	r3, [r2, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <__NVIC_GetPriorityGrouping+0x18>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	f003 0307 	and.w	r3, r3, #7
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db0a      	blt.n	8001b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	490c      	ldr	r1, [pc, #48]	; (8001b94 <__NVIC_SetPriority+0x4c>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	0112      	lsls	r2, r2, #4
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b70:	e00a      	b.n	8001b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4908      	ldr	r1, [pc, #32]	; (8001b98 <__NVIC_SetPriority+0x50>)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	3b04      	subs	r3, #4
 8001b80:	0112      	lsls	r2, r2, #4
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	440b      	add	r3, r1
 8001b86:	761a      	strb	r2, [r3, #24]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000e100 	.word	0xe000e100
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f1c3 0307 	rsb	r3, r3, #7
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	bf28      	it	cs
 8001bba:	2304      	movcs	r3, #4
 8001bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d902      	bls.n	8001bcc <NVIC_EncodePriority+0x30>
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3b03      	subs	r3, #3
 8001bca:	e000      	b.n	8001bce <NVIC_EncodePriority+0x32>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	401a      	ands	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43d9      	mvns	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	4313      	orrs	r3, r2
         );
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3724      	adds	r7, #36	; 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c14:	d301      	bcc.n	8001c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00f      	b.n	8001c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <SysTick_Config+0x40>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c22:	210f      	movs	r1, #15
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f7ff ff8e 	bl	8001b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <SysTick_Config+0x40>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <SysTick_Config+0x40>)
 8001c34:	2207      	movs	r2, #7
 8001c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	e000e010 	.word	0xe000e010

08001c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff47 	bl	8001ae4 <__NVIC_SetPriorityGrouping>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c70:	f7ff ff5c 	bl	8001b2c <__NVIC_GetPriorityGrouping>
 8001c74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	6978      	ldr	r0, [r7, #20]
 8001c7c:	f7ff ff8e 	bl	8001b9c <NVIC_EncodePriority>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff5d 	bl	8001b48 <__NVIC_SetPriority>
}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ffb0 	bl	8001c04 <SysTick_Config>
 8001ca4:	4603      	mov	r3, r0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cbe:	e17f      	b.n	8001fc0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 8171 	beq.w	8001fba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d00b      	beq.n	8001cf8 <HAL_GPIO_Init+0x48>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d007      	beq.n	8001cf8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cec:	2b11      	cmp	r3, #17
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b12      	cmp	r3, #18
 8001cf6:	d130      	bne.n	8001d5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d2e:	2201      	movs	r2, #1
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	f003 0201 	and.w	r2, r3, #1
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d118      	bne.n	8001d98 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	08db      	lsrs	r3, r3, #3
 8001d82:	f003 0201 	and.w	r2, r3, #1
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x128>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b12      	cmp	r3, #18
 8001dd6:	d123      	bne.n	8001e20 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	08da      	lsrs	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3208      	adds	r2, #8
 8001de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	220f      	movs	r2, #15
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	08da      	lsrs	r2, r3, #3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3208      	adds	r2, #8
 8001e1a:	6939      	ldr	r1, [r7, #16]
 8001e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0203 	and.w	r2, r3, #3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80ac 	beq.w	8001fba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e62:	4b5e      	ldr	r3, [pc, #376]	; (8001fdc <HAL_GPIO_Init+0x32c>)
 8001e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e66:	4a5d      	ldr	r2, [pc, #372]	; (8001fdc <HAL_GPIO_Init+0x32c>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e6e:	4b5b      	ldr	r3, [pc, #364]	; (8001fdc <HAL_GPIO_Init+0x32c>)
 8001e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e7a:	4a59      	ldr	r2, [pc, #356]	; (8001fe0 <HAL_GPIO_Init+0x330>)
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3302      	adds	r3, #2
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ea4:	d025      	beq.n	8001ef2 <HAL_GPIO_Init+0x242>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a4e      	ldr	r2, [pc, #312]	; (8001fe4 <HAL_GPIO_Init+0x334>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d01f      	beq.n	8001eee <HAL_GPIO_Init+0x23e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a4d      	ldr	r2, [pc, #308]	; (8001fe8 <HAL_GPIO_Init+0x338>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d019      	beq.n	8001eea <HAL_GPIO_Init+0x23a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4c      	ldr	r2, [pc, #304]	; (8001fec <HAL_GPIO_Init+0x33c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d013      	beq.n	8001ee6 <HAL_GPIO_Init+0x236>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4b      	ldr	r2, [pc, #300]	; (8001ff0 <HAL_GPIO_Init+0x340>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00d      	beq.n	8001ee2 <HAL_GPIO_Init+0x232>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a4a      	ldr	r2, [pc, #296]	; (8001ff4 <HAL_GPIO_Init+0x344>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d007      	beq.n	8001ede <HAL_GPIO_Init+0x22e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a49      	ldr	r2, [pc, #292]	; (8001ff8 <HAL_GPIO_Init+0x348>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d101      	bne.n	8001eda <HAL_GPIO_Init+0x22a>
 8001ed6:	2306      	movs	r3, #6
 8001ed8:	e00c      	b.n	8001ef4 <HAL_GPIO_Init+0x244>
 8001eda:	2307      	movs	r3, #7
 8001edc:	e00a      	b.n	8001ef4 <HAL_GPIO_Init+0x244>
 8001ede:	2305      	movs	r3, #5
 8001ee0:	e008      	b.n	8001ef4 <HAL_GPIO_Init+0x244>
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x244>
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e004      	b.n	8001ef4 <HAL_GPIO_Init+0x244>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e002      	b.n	8001ef4 <HAL_GPIO_Init+0x244>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_GPIO_Init+0x244>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	f002 0203 	and.w	r2, r2, #3
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	4093      	lsls	r3, r2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f04:	4936      	ldr	r1, [pc, #216]	; (8001fe0 <HAL_GPIO_Init+0x330>)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f12:	4b3a      	ldr	r3, [pc, #232]	; (8001ffc <HAL_GPIO_Init+0x34c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f36:	4a31      	ldr	r2, [pc, #196]	; (8001ffc <HAL_GPIO_Init+0x34c>)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f3c:	4b2f      	ldr	r3, [pc, #188]	; (8001ffc <HAL_GPIO_Init+0x34c>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f60:	4a26      	ldr	r2, [pc, #152]	; (8001ffc <HAL_GPIO_Init+0x34c>)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f66:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <HAL_GPIO_Init+0x34c>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f8a:	4a1c      	ldr	r2, [pc, #112]	; (8001ffc <HAL_GPIO_Init+0x34c>)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f90:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <HAL_GPIO_Init+0x34c>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fb4:	4a11      	ldr	r2, [pc, #68]	; (8001ffc <HAL_GPIO_Init+0x34c>)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f47f ae78 	bne.w	8001cc0 <HAL_GPIO_Init+0x10>
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	371c      	adds	r7, #28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	48000400 	.word	0x48000400
 8001fe8:	48000800 	.word	0x48000800
 8001fec:	48000c00 	.word	0x48000c00
 8001ff0:	48001000 	.word	0x48001000
 8001ff4:	48001400 	.word	0x48001400
 8001ff8:	48001800 	.word	0x48001800
 8001ffc:	40010400 	.word	0x40010400

08002000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
 800200c:	4613      	mov	r3, r2
 800200e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002010:	787b      	ldrb	r3, [r7, #1]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002016:	887a      	ldrh	r2, [r7, #2]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800201c:	e002      	b.n	8002024 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800201e:	887a      	ldrh	r2, [r7, #2]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <HAL_PWREx_GetVoltageRange+0x18>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40007000 	.word	0x40007000

0800204c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800205a:	d130      	bne.n	80020be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800205c:	4b23      	ldr	r3, [pc, #140]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002068:	d038      	beq.n	80020dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800206a:	4b20      	ldr	r3, [pc, #128]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002072:	4a1e      	ldr	r2, [pc, #120]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002074:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002078:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800207a:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2232      	movs	r2, #50	; 0x32
 8002080:	fb02 f303 	mul.w	r3, r2, r3
 8002084:	4a1b      	ldr	r2, [pc, #108]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	0c9b      	lsrs	r3, r3, #18
 800208c:	3301      	adds	r3, #1
 800208e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002090:	e002      	b.n	8002098 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	3b01      	subs	r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002098:	4b14      	ldr	r3, [pc, #80]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a4:	d102      	bne.n	80020ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f2      	bne.n	8002092 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020ac:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b8:	d110      	bne.n	80020dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e00f      	b.n	80020de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ca:	d007      	beq.n	80020dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020d4:	4a05      	ldr	r2, [pc, #20]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40007000 	.word	0x40007000
 80020f0:	20000008 	.word	0x20000008
 80020f4:	431bde83 	.word	0x431bde83

080020f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e3d4      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800210a:	4ba1      	ldr	r3, [pc, #644]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002114:	4b9e      	ldr	r3, [pc, #632]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 80e4 	beq.w	80022f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d007      	beq.n	8002142 <HAL_RCC_OscConfig+0x4a>
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2b0c      	cmp	r3, #12
 8002136:	f040 808b 	bne.w	8002250 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b01      	cmp	r3, #1
 800213e:	f040 8087 	bne.w	8002250 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002142:	4b93      	ldr	r3, [pc, #588]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <HAL_RCC_OscConfig+0x62>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e3ac      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1a      	ldr	r2, [r3, #32]
 800215e:	4b8c      	ldr	r3, [pc, #560]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d004      	beq.n	8002174 <HAL_RCC_OscConfig+0x7c>
 800216a:	4b89      	ldr	r3, [pc, #548]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002172:	e005      	b.n	8002180 <HAL_RCC_OscConfig+0x88>
 8002174:	4b86      	ldr	r3, [pc, #536]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 8002176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002180:	4293      	cmp	r3, r2
 8002182:	d223      	bcs.n	80021cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4618      	mov	r0, r3
 800218a:	f000 fd3f 	bl	8002c0c <RCC_SetFlashLatencyFromMSIRange>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e38d      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002198:	4b7d      	ldr	r3, [pc, #500]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a7c      	ldr	r2, [pc, #496]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 800219e:	f043 0308 	orr.w	r3, r3, #8
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b7a      	ldr	r3, [pc, #488]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4977      	ldr	r1, [pc, #476]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021b6:	4b76      	ldr	r3, [pc, #472]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	4972      	ldr	r1, [pc, #456]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
 80021ca:	e025      	b.n	8002218 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021cc:	4b70      	ldr	r3, [pc, #448]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a6f      	ldr	r2, [pc, #444]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 80021d2:	f043 0308 	orr.w	r3, r3, #8
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	4b6d      	ldr	r3, [pc, #436]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	496a      	ldr	r1, [pc, #424]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ea:	4b69      	ldr	r3, [pc, #420]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	4965      	ldr	r1, [pc, #404]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d109      	bne.n	8002218 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4618      	mov	r0, r3
 800220a:	f000 fcff 	bl	8002c0c <RCC_SetFlashLatencyFromMSIRange>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e34d      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002218:	f000 fc36 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 800221c:	4601      	mov	r1, r0
 800221e:	4b5c      	ldr	r3, [pc, #368]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	091b      	lsrs	r3, r3, #4
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	4a5a      	ldr	r2, [pc, #360]	; (8002394 <HAL_RCC_OscConfig+0x29c>)
 800222a:	5cd3      	ldrb	r3, [r2, r3]
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	fa21 f303 	lsr.w	r3, r1, r3
 8002234:	4a58      	ldr	r2, [pc, #352]	; (8002398 <HAL_RCC_OscConfig+0x2a0>)
 8002236:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002238:	4b58      	ldr	r3, [pc, #352]	; (800239c <HAL_RCC_OscConfig+0x2a4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fbd3 	bl	80019e8 <HAL_InitTick>
 8002242:	4603      	mov	r3, r0
 8002244:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d052      	beq.n	80022f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	e331      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d032      	beq.n	80022be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002258:	4b4d      	ldr	r3, [pc, #308]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a4c      	ldr	r2, [pc, #304]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002264:	f7ff fc10 	bl	8001a88 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800226c:	f7ff fc0c 	bl	8001a88 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e31a      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800227e:	4b44      	ldr	r3, [pc, #272]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800228a:	4b41      	ldr	r3, [pc, #260]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a40      	ldr	r2, [pc, #256]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 8002290:	f043 0308 	orr.w	r3, r3, #8
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	4b3e      	ldr	r3, [pc, #248]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	493b      	ldr	r1, [pc, #236]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022a8:	4b39      	ldr	r3, [pc, #228]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	4936      	ldr	r1, [pc, #216]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	604b      	str	r3, [r1, #4]
 80022bc:	e01a      	b.n	80022f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022be:	4b34      	ldr	r3, [pc, #208]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a33      	ldr	r2, [pc, #204]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 80022c4:	f023 0301 	bic.w	r3, r3, #1
 80022c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022ca:	f7ff fbdd 	bl	8001a88 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022d2:	f7ff fbd9 	bl	8001a88 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e2e7      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022e4:	4b2a      	ldr	r3, [pc, #168]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1f0      	bne.n	80022d2 <HAL_RCC_OscConfig+0x1da>
 80022f0:	e000      	b.n	80022f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d074      	beq.n	80023ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b08      	cmp	r3, #8
 8002304:	d005      	beq.n	8002312 <HAL_RCC_OscConfig+0x21a>
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	2b0c      	cmp	r3, #12
 800230a:	d10e      	bne.n	800232a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d10b      	bne.n	800232a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002312:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d064      	beq.n	80023e8 <HAL_RCC_OscConfig+0x2f0>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d160      	bne.n	80023e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e2c4      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002332:	d106      	bne.n	8002342 <HAL_RCC_OscConfig+0x24a>
 8002334:	4b16      	ldr	r3, [pc, #88]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a15      	ldr	r2, [pc, #84]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 800233a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	e01d      	b.n	800237e <HAL_RCC_OscConfig+0x286>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800234a:	d10c      	bne.n	8002366 <HAL_RCC_OscConfig+0x26e>
 800234c:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0f      	ldr	r2, [pc, #60]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 8002352:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0c      	ldr	r2, [pc, #48]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 800235e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	e00b      	b.n	800237e <HAL_RCC_OscConfig+0x286>
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a09      	ldr	r2, [pc, #36]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 800236c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b07      	ldr	r3, [pc, #28]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a06      	ldr	r2, [pc, #24]	; (8002390 <HAL_RCC_OscConfig+0x298>)
 8002378:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800237c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d01c      	beq.n	80023c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7ff fb7f 	bl	8001a88 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800238c:	e011      	b.n	80023b2 <HAL_RCC_OscConfig+0x2ba>
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000
 8002394:	080063e8 	.word	0x080063e8
 8002398:	20000008 	.word	0x20000008
 800239c:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a0:	f7ff fb72 	bl	8001a88 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	; 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e280      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023b2:	4baf      	ldr	r3, [pc, #700]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x2a8>
 80023be:	e014      	b.n	80023ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7ff fb62 	bl	8001a88 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c8:	f7ff fb5e 	bl	8001a88 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e26c      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023da:	4ba5      	ldr	r3, [pc, #660]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x2d0>
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d060      	beq.n	80024b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_OscConfig+0x310>
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2b0c      	cmp	r3, #12
 8002400:	d119      	bne.n	8002436 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d116      	bne.n	8002436 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002408:	4b99      	ldr	r3, [pc, #612]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_OscConfig+0x328>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e249      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002420:	4b93      	ldr	r3, [pc, #588]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	061b      	lsls	r3, r3, #24
 800242e:	4990      	ldr	r1, [pc, #576]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002434:	e040      	b.n	80024b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d023      	beq.n	8002486 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800243e:	4b8c      	ldr	r3, [pc, #560]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a8b      	ldr	r2, [pc, #556]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 8002444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7ff fb1d 	bl	8001a88 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002452:	f7ff fb19 	bl	8001a88 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e227      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002464:	4b82      	ldr	r3, [pc, #520]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002470:	4b7f      	ldr	r3, [pc, #508]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	061b      	lsls	r3, r3, #24
 800247e:	497c      	ldr	r1, [pc, #496]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 8002480:	4313      	orrs	r3, r2
 8002482:	604b      	str	r3, [r1, #4]
 8002484:	e018      	b.n	80024b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002486:	4b7a      	ldr	r3, [pc, #488]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a79      	ldr	r2, [pc, #484]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 800248c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7ff faf9 	bl	8001a88 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800249a:	f7ff faf5 	bl	8001a88 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e203      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024ac:	4b70      	ldr	r3, [pc, #448]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f0      	bne.n	800249a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d03c      	beq.n	800253e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d01c      	beq.n	8002506 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024cc:	4b68      	ldr	r3, [pc, #416]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 80024ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024d2:	4a67      	ldr	r2, [pc, #412]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024dc:	f7ff fad4 	bl	8001a88 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e4:	f7ff fad0 	bl	8001a88 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e1de      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024f6:	4b5e      	ldr	r3, [pc, #376]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 80024f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0ef      	beq.n	80024e4 <HAL_RCC_OscConfig+0x3ec>
 8002504:	e01b      	b.n	800253e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002506:	4b5a      	ldr	r3, [pc, #360]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 8002508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800250c:	4a58      	ldr	r2, [pc, #352]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 800250e:	f023 0301 	bic.w	r3, r3, #1
 8002512:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002516:	f7ff fab7 	bl	8001a88 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800251e:	f7ff fab3 	bl	8001a88 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e1c1      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002530:	4b4f      	ldr	r3, [pc, #316]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 8002532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1ef      	bne.n	800251e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 80a6 	beq.w	8002698 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254c:	2300      	movs	r3, #0
 800254e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002550:	4b47      	ldr	r3, [pc, #284]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 8002552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10d      	bne.n	8002578 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800255c:	4b44      	ldr	r3, [pc, #272]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 800255e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002560:	4a43      	ldr	r2, [pc, #268]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 8002562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002566:	6593      	str	r3, [r2, #88]	; 0x58
 8002568:	4b41      	ldr	r3, [pc, #260]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 800256a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002574:	2301      	movs	r3, #1
 8002576:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002578:	4b3e      	ldr	r3, [pc, #248]	; (8002674 <HAL_RCC_OscConfig+0x57c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d118      	bne.n	80025b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002584:	4b3b      	ldr	r3, [pc, #236]	; (8002674 <HAL_RCC_OscConfig+0x57c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a3a      	ldr	r2, [pc, #232]	; (8002674 <HAL_RCC_OscConfig+0x57c>)
 800258a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002590:	f7ff fa7a 	bl	8001a88 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002598:	f7ff fa76 	bl	8001a88 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e184      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025aa:	4b32      	ldr	r3, [pc, #200]	; (8002674 <HAL_RCC_OscConfig+0x57c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d108      	bne.n	80025d0 <HAL_RCC_OscConfig+0x4d8>
 80025be:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 80025c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c4:	4a2a      	ldr	r2, [pc, #168]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025ce:	e024      	b.n	800261a <HAL_RCC_OscConfig+0x522>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b05      	cmp	r3, #5
 80025d6:	d110      	bne.n	80025fa <HAL_RCC_OscConfig+0x502>
 80025d8:	4b25      	ldr	r3, [pc, #148]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 80025da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025de:	4a24      	ldr	r2, [pc, #144]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 80025e0:	f043 0304 	orr.w	r3, r3, #4
 80025e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025e8:	4b21      	ldr	r3, [pc, #132]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ee:	4a20      	ldr	r2, [pc, #128]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025f8:	e00f      	b.n	800261a <HAL_RCC_OscConfig+0x522>
 80025fa:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 80025fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002600:	4a1b      	ldr	r2, [pc, #108]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 8002602:	f023 0301 	bic.w	r3, r3, #1
 8002606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800260a:	4b19      	ldr	r3, [pc, #100]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 800260c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002610:	4a17      	ldr	r2, [pc, #92]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 8002612:	f023 0304 	bic.w	r3, r3, #4
 8002616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d016      	beq.n	8002650 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002622:	f7ff fa31 	bl	8001a88 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002628:	e00a      	b.n	8002640 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262a:	f7ff fa2d 	bl	8001a88 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	f241 3288 	movw	r2, #5000	; 0x1388
 8002638:	4293      	cmp	r3, r2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e139      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_RCC_OscConfig+0x578>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0ed      	beq.n	800262a <HAL_RCC_OscConfig+0x532>
 800264e:	e01a      	b.n	8002686 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002650:	f7ff fa1a 	bl	8001a88 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002656:	e00f      	b.n	8002678 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002658:	f7ff fa16 	bl	8001a88 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	; 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d906      	bls.n	8002678 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e122      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
 800266e:	bf00      	nop
 8002670:	40021000 	.word	0x40021000
 8002674:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002678:	4b90      	ldr	r3, [pc, #576]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1e8      	bne.n	8002658 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002686:	7ffb      	ldrb	r3, [r7, #31]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d105      	bne.n	8002698 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800268c:	4b8b      	ldr	r3, [pc, #556]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 800268e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002690:	4a8a      	ldr	r2, [pc, #552]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 8002692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002696:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 8108 	beq.w	80028b2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	f040 80d0 	bne.w	800284c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026ac:	4b83      	ldr	r3, [pc, #524]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f003 0203 	and.w	r2, r3, #3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	429a      	cmp	r2, r3
 80026be:	d130      	bne.n	8002722 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	3b01      	subs	r3, #1
 80026cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d127      	bne.n	8002722 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d11f      	bne.n	8002722 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026ec:	2a07      	cmp	r2, #7
 80026ee:	bf14      	ite	ne
 80026f0:	2201      	movne	r2, #1
 80026f2:	2200      	moveq	r2, #0
 80026f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d113      	bne.n	8002722 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002704:	085b      	lsrs	r3, r3, #1
 8002706:	3b01      	subs	r3, #1
 8002708:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800270a:	429a      	cmp	r2, r3
 800270c:	d109      	bne.n	8002722 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	085b      	lsrs	r3, r3, #1
 800271a:	3b01      	subs	r3, #1
 800271c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800271e:	429a      	cmp	r2, r3
 8002720:	d06e      	beq.n	8002800 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	2b0c      	cmp	r3, #12
 8002726:	d069      	beq.n	80027fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002728:	4b64      	ldr	r3, [pc, #400]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d105      	bne.n	8002740 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002734:	4b61      	ldr	r3, [pc, #388]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0b7      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002744:	4b5d      	ldr	r3, [pc, #372]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a5c      	ldr	r2, [pc, #368]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 800274a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800274e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002750:	f7ff f99a 	bl	8001a88 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002758:	f7ff f996 	bl	8001a88 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e0a4      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800276a:	4b54      	ldr	r3, [pc, #336]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002776:	4b51      	ldr	r3, [pc, #324]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	4b51      	ldr	r3, [pc, #324]	; (80028c0 <HAL_RCC_OscConfig+0x7c8>)
 800277c:	4013      	ands	r3, r2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002786:	3a01      	subs	r2, #1
 8002788:	0112      	lsls	r2, r2, #4
 800278a:	4311      	orrs	r1, r2
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002790:	0212      	lsls	r2, r2, #8
 8002792:	4311      	orrs	r1, r2
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002798:	0852      	lsrs	r2, r2, #1
 800279a:	3a01      	subs	r2, #1
 800279c:	0552      	lsls	r2, r2, #21
 800279e:	4311      	orrs	r1, r2
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027a4:	0852      	lsrs	r2, r2, #1
 80027a6:	3a01      	subs	r2, #1
 80027a8:	0652      	lsls	r2, r2, #25
 80027aa:	4311      	orrs	r1, r2
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027b0:	0912      	lsrs	r2, r2, #4
 80027b2:	0452      	lsls	r2, r2, #17
 80027b4:	430a      	orrs	r2, r1
 80027b6:	4941      	ldr	r1, [pc, #260]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027bc:	4b3f      	ldr	r3, [pc, #252]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a3e      	ldr	r2, [pc, #248]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 80027c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027c8:	4b3c      	ldr	r3, [pc, #240]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4a3b      	ldr	r2, [pc, #236]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 80027ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027d4:	f7ff f958 	bl	8001a88 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027dc:	f7ff f954 	bl	8001a88 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e062      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ee:	4b33      	ldr	r3, [pc, #204]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027fa:	e05a      	b.n	80028b2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e059      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002800:	4b2e      	ldr	r3, [pc, #184]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d152      	bne.n	80028b2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800280c:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a2a      	ldr	r2, [pc, #168]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 8002812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002816:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002818:	4b28      	ldr	r3, [pc, #160]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4a27      	ldr	r2, [pc, #156]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 800281e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002822:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002824:	f7ff f930 	bl	8001a88 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282c:	f7ff f92c 	bl	8001a88 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e03a      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800283e:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0x734>
 800284a:	e032      	b.n	80028b2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b0c      	cmp	r3, #12
 8002850:	d02d      	beq.n	80028ae <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002852:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a19      	ldr	r2, [pc, #100]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 8002858:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800285c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800285e:	4b17      	ldr	r3, [pc, #92]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d105      	bne.n	8002876 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800286a:	4b14      	ldr	r3, [pc, #80]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	4a13      	ldr	r2, [pc, #76]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 8002870:	f023 0303 	bic.w	r3, r3, #3
 8002874:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	4a10      	ldr	r2, [pc, #64]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 800287c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002884:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002886:	f7ff f8ff 	bl	8001a88 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288e:	f7ff f8fb 	bl	8001a88 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e009      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_RCC_OscConfig+0x7c4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f0      	bne.n	800288e <HAL_RCC_OscConfig+0x796>
 80028ac:	e001      	b.n	80028b2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3720      	adds	r7, #32
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40021000 	.word	0x40021000
 80028c0:	f99d808c 	.word	0xf99d808c

080028c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0c8      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d8:	4b66      	ldr	r3, [pc, #408]	; (8002a74 <HAL_RCC_ClockConfig+0x1b0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d910      	bls.n	8002908 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b63      	ldr	r3, [pc, #396]	; (8002a74 <HAL_RCC_ClockConfig+0x1b0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 0207 	bic.w	r2, r3, #7
 80028ee:	4961      	ldr	r1, [pc, #388]	; (8002a74 <HAL_RCC_ClockConfig+0x1b0>)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b5f      	ldr	r3, [pc, #380]	; (8002a74 <HAL_RCC_ClockConfig+0x1b0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0b0      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d04c      	beq.n	80029ae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b03      	cmp	r3, #3
 800291a:	d107      	bne.n	800292c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291c:	4b56      	ldr	r3, [pc, #344]	; (8002a78 <HAL_RCC_ClockConfig+0x1b4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d121      	bne.n	800296c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e09e      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d107      	bne.n	8002944 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002934:	4b50      	ldr	r3, [pc, #320]	; (8002a78 <HAL_RCC_ClockConfig+0x1b4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d115      	bne.n	800296c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e092      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d107      	bne.n	800295c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800294c:	4b4a      	ldr	r3, [pc, #296]	; (8002a78 <HAL_RCC_ClockConfig+0x1b4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d109      	bne.n	800296c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e086      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800295c:	4b46      	ldr	r3, [pc, #280]	; (8002a78 <HAL_RCC_ClockConfig+0x1b4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e07e      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800296c:	4b42      	ldr	r3, [pc, #264]	; (8002a78 <HAL_RCC_ClockConfig+0x1b4>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f023 0203 	bic.w	r2, r3, #3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	493f      	ldr	r1, [pc, #252]	; (8002a78 <HAL_RCC_ClockConfig+0x1b4>)
 800297a:	4313      	orrs	r3, r2
 800297c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800297e:	f7ff f883 	bl	8001a88 <HAL_GetTick>
 8002982:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002984:	e00a      	b.n	800299c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002986:	f7ff f87f 	bl	8001a88 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f241 3288 	movw	r2, #5000	; 0x1388
 8002994:	4293      	cmp	r3, r2
 8002996:	d901      	bls.n	800299c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e066      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299c:	4b36      	ldr	r3, [pc, #216]	; (8002a78 <HAL_RCC_ClockConfig+0x1b4>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 020c 	and.w	r2, r3, #12
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d1eb      	bne.n	8002986 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ba:	4b2f      	ldr	r3, [pc, #188]	; (8002a78 <HAL_RCC_ClockConfig+0x1b4>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	492c      	ldr	r1, [pc, #176]	; (8002a78 <HAL_RCC_ClockConfig+0x1b4>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029cc:	4b29      	ldr	r3, [pc, #164]	; (8002a74 <HAL_RCC_ClockConfig+0x1b0>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d210      	bcs.n	80029fc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029da:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <HAL_RCC_ClockConfig+0x1b0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 0207 	bic.w	r2, r3, #7
 80029e2:	4924      	ldr	r1, [pc, #144]	; (8002a74 <HAL_RCC_ClockConfig+0x1b0>)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <HAL_RCC_ClockConfig+0x1b0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e036      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a08:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <HAL_RCC_ClockConfig+0x1b4>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4918      	ldr	r1, [pc, #96]	; (8002a78 <HAL_RCC_ClockConfig+0x1b4>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d009      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a26:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <HAL_RCC_ClockConfig+0x1b4>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4910      	ldr	r1, [pc, #64]	; (8002a78 <HAL_RCC_ClockConfig+0x1b4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a3a:	f000 f825 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8002a3e:	4601      	mov	r1, r0
 8002a40:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <HAL_RCC_ClockConfig+0x1b4>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	4a0c      	ldr	r2, [pc, #48]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 8002a4c:	5cd3      	ldrb	r3, [r2, r3]
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	fa21 f303 	lsr.w	r3, r1, r3
 8002a56:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe ffc2 	bl	80019e8 <HAL_InitTick>
 8002a64:	4603      	mov	r3, r0
 8002a66:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a68:	7afb      	ldrb	r3, [r7, #11]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40022000 	.word	0x40022000
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	080063e8 	.word	0x080063e8
 8002a80:	20000008 	.word	0x20000008
 8002a84:	2000000c 	.word	0x2000000c

08002a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b089      	sub	sp, #36	; 0x24
 8002a8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a96:	4b3d      	ldr	r3, [pc, #244]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x104>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aa0:	4b3a      	ldr	r3, [pc, #232]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x104>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x34>
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	2b0c      	cmp	r3, #12
 8002ab4:	d121      	bne.n	8002afa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d11e      	bne.n	8002afa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002abc:	4b33      	ldr	r3, [pc, #204]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x104>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d107      	bne.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ac8:	4b30      	ldr	r3, [pc, #192]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x104>)
 8002aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ace:	0a1b      	lsrs	r3, r3, #8
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	e005      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ad8:	4b2c      	ldr	r3, [pc, #176]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x104>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	091b      	lsrs	r3, r3, #4
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ae4:	4a2a      	ldr	r2, [pc, #168]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10d      	bne.n	8002b10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002af8:	e00a      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d102      	bne.n	8002b06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b00:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	e004      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b0c:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	2b0c      	cmp	r3, #12
 8002b14:	d133      	bne.n	8002b7e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b16:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x104>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d002      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0xa4>
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d003      	beq.n	8002b32 <HAL_RCC_GetSysClockFreq+0xaa>
 8002b2a:	e005      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b2c:	4b19      	ldr	r3, [pc, #100]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b2e:	617b      	str	r3, [r7, #20]
      break;
 8002b30:	e005      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b32:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b34:	617b      	str	r3, [r7, #20]
      break;
 8002b36:	e002      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	617b      	str	r3, [r7, #20]
      break;
 8002b3c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b3e:	4b13      	ldr	r3, [pc, #76]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x104>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	091b      	lsrs	r3, r3, #4
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	3301      	adds	r3, #1
 8002b4a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b4c:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x104>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	fb02 f203 	mul.w	r2, r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b62:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b64:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x104>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	0e5b      	lsrs	r3, r3, #25
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b7e:	69bb      	ldr	r3, [r7, #24]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3724      	adds	r7, #36	; 0x24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	08006400 	.word	0x08006400
 8002b94:	00f42400 	.word	0x00f42400
 8002b98:	007a1200 	.word	0x007a1200

08002b9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000008 	.word	0x20000008

08002bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bb8:	f7ff fff0 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8002bbc:	4601      	mov	r1, r0
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	4a04      	ldr	r2, [pc, #16]	; (8002bdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bca:	5cd3      	ldrb	r3, [r2, r3]
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	080063f8 	.word	0x080063f8

08002be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002be4:	f7ff ffda 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8002be8:	4601      	mov	r1, r0
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	0adb      	lsrs	r3, r3, #11
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bf6:	5cd3      	ldrb	r3, [r2, r3]
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40021000 	.word	0x40021000
 8002c08:	080063f8 	.word	0x080063f8

08002c0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c14:	2300      	movs	r3, #0
 8002c16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c18:	4b2a      	ldr	r3, [pc, #168]	; (8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c24:	f7ff fa04 	bl	8002030 <HAL_PWREx_GetVoltageRange>
 8002c28:	6178      	str	r0, [r7, #20]
 8002c2a:	e014      	b.n	8002c56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c2c:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c30:	4a24      	ldr	r2, [pc, #144]	; (8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c36:	6593      	str	r3, [r2, #88]	; 0x58
 8002c38:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c44:	f7ff f9f4 	bl	8002030 <HAL_PWREx_GetVoltageRange>
 8002c48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4e:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c5c:	d10b      	bne.n	8002c76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b80      	cmp	r3, #128	; 0x80
 8002c62:	d919      	bls.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2ba0      	cmp	r3, #160	; 0xa0
 8002c68:	d902      	bls.n	8002c70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	e013      	b.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c70:	2301      	movs	r3, #1
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	e010      	b.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b80      	cmp	r3, #128	; 0x80
 8002c7a:	d902      	bls.n	8002c82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	e00a      	b.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b80      	cmp	r3, #128	; 0x80
 8002c86:	d102      	bne.n	8002c8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c88:	2302      	movs	r3, #2
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	e004      	b.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b70      	cmp	r3, #112	; 0x70
 8002c92:	d101      	bne.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c94:	2301      	movs	r3, #1
 8002c96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f023 0207 	bic.w	r2, r3, #7
 8002ca0:	4909      	ldr	r1, [pc, #36]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ca8:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d001      	beq.n	8002cba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40022000 	.word	0x40022000

08002ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cd8:	2300      	movs	r3, #0
 8002cda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d03f      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf0:	d01c      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf6:	d802      	bhi.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00e      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002cfc:	e01f      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002cfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d02:	d003      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002d04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d08:	d01c      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002d0a:	e018      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d0c:	4b85      	ldr	r3, [pc, #532]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4a84      	ldr	r2, [pc, #528]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d18:	e015      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 fab9 	bl	8003298 <RCCEx_PLLSAI1_Config>
 8002d26:	4603      	mov	r3, r0
 8002d28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d2a:	e00c      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3320      	adds	r3, #32
 8002d30:	2100      	movs	r1, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fba0 	bl	8003478 <RCCEx_PLLSAI2_Config>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d3c:	e003      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	74fb      	strb	r3, [r7, #19]
      break;
 8002d42:	e000      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d46:	7cfb      	ldrb	r3, [r7, #19]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10b      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d4c:	4b75      	ldr	r3, [pc, #468]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d5a:	4972      	ldr	r1, [pc, #456]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d62:	e001      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d03f      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d7c:	d01c      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002d7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d82:	d802      	bhi.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00e      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002d88:	e01f      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002d8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d8e:	d003      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002d90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d94:	d01c      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002d96:	e018      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d98:	4b62      	ldr	r3, [pc, #392]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	4a61      	ldr	r2, [pc, #388]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002da4:	e015      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3304      	adds	r3, #4
 8002daa:	2100      	movs	r1, #0
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 fa73 	bl	8003298 <RCCEx_PLLSAI1_Config>
 8002db2:	4603      	mov	r3, r0
 8002db4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002db6:	e00c      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3320      	adds	r3, #32
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fb5a 	bl	8003478 <RCCEx_PLLSAI2_Config>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dc8:	e003      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	74fb      	strb	r3, [r7, #19]
      break;
 8002dce:	e000      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dd2:	7cfb      	ldrb	r3, [r7, #19]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10b      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dd8:	4b52      	ldr	r3, [pc, #328]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dde:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002de6:	494f      	ldr	r1, [pc, #316]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002dee:	e001      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 80a0 	beq.w	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e02:	2300      	movs	r3, #0
 8002e04:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e06:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002e16:	2300      	movs	r3, #0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00d      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1c:	4b41      	ldr	r3, [pc, #260]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e20:	4a40      	ldr	r2, [pc, #256]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e26:	6593      	str	r3, [r2, #88]	; 0x58
 8002e28:	4b3e      	ldr	r3, [pc, #248]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e34:	2301      	movs	r3, #1
 8002e36:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e38:	4b3b      	ldr	r3, [pc, #236]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a3a      	ldr	r2, [pc, #232]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e44:	f7fe fe20 	bl	8001a88 <HAL_GetTick>
 8002e48:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e4a:	e009      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4c:	f7fe fe1c 	bl	8001a88 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d902      	bls.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	74fb      	strb	r3, [r7, #19]
        break;
 8002e5e:	e005      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e60:	4b31      	ldr	r3, [pc, #196]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0ef      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002e6c:	7cfb      	ldrb	r3, [r7, #19]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d15c      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e72:	4b2c      	ldr	r3, [pc, #176]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d01f      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d019      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e90:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e9c:	4b21      	ldr	r3, [pc, #132]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea2:	4a20      	ldr	r2, [pc, #128]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002eac:	4b1d      	ldr	r3, [pc, #116]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	4a1c      	ldr	r2, [pc, #112]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ebc:	4a19      	ldr	r2, [pc, #100]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d016      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ece:	f7fe fddb 	bl	8001a88 <HAL_GetTick>
 8002ed2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed4:	e00b      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed6:	f7fe fdd7 	bl	8001a88 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d902      	bls.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	74fb      	strb	r3, [r7, #19]
            break;
 8002eec:	e006      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0ec      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002efc:	7cfb      	ldrb	r3, [r7, #19]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f12:	4904      	ldr	r1, [pc, #16]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f1a:	e009      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f1c:	7cfb      	ldrb	r3, [r7, #19]
 8002f1e:	74bb      	strb	r3, [r7, #18]
 8002f20:	e006      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002f22:	bf00      	nop
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2c:	7cfb      	ldrb	r3, [r7, #19]
 8002f2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f30:	7c7b      	ldrb	r3, [r7, #17]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d105      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f36:	4b9e      	ldr	r3, [pc, #632]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3a:	4a9d      	ldr	r2, [pc, #628]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f4e:	4b98      	ldr	r3, [pc, #608]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f54:	f023 0203 	bic.w	r2, r3, #3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	4994      	ldr	r1, [pc, #592]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f70:	4b8f      	ldr	r3, [pc, #572]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f76:	f023 020c 	bic.w	r2, r3, #12
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7e:	498c      	ldr	r1, [pc, #560]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f92:	4b87      	ldr	r3, [pc, #540]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	4983      	ldr	r1, [pc, #524]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fb4:	4b7e      	ldr	r3, [pc, #504]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	497b      	ldr	r1, [pc, #492]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fd6:	4b76      	ldr	r3, [pc, #472]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe4:	4972      	ldr	r1, [pc, #456]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ff8:	4b6d      	ldr	r3, [pc, #436]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003006:	496a      	ldr	r1, [pc, #424]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800301a:	4b65      	ldr	r3, [pc, #404]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800301c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003020:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003028:	4961      	ldr	r1, [pc, #388]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800303c:	4b5c      	ldr	r3, [pc, #368]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800303e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003042:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800304a:	4959      	ldr	r1, [pc, #356]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800305e:	4b54      	ldr	r3, [pc, #336]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003064:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800306c:	4950      	ldr	r1, [pc, #320]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003080:	4b4b      	ldr	r3, [pc, #300]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003086:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308e:	4948      	ldr	r1, [pc, #288]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030a2:	4b43      	ldr	r3, [pc, #268]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b0:	493f      	ldr	r1, [pc, #252]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d028      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030c4:	4b3a      	ldr	r3, [pc, #232]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d2:	4937      	ldr	r1, [pc, #220]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030e2:	d106      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030e4:	4b32      	ldr	r3, [pc, #200]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4a31      	ldr	r2, [pc, #196]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80030ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ee:	60d3      	str	r3, [r2, #12]
 80030f0:	e011      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030fa:	d10c      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	2101      	movs	r1, #1
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f8c8 	bl	8003298 <RCCEx_PLLSAI1_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800310c:	7cfb      	ldrb	r3, [r7, #19]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003112:	7cfb      	ldrb	r3, [r7, #19]
 8003114:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d028      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003122:	4b23      	ldr	r3, [pc, #140]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003130:	491f      	ldr	r1, [pc, #124]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003140:	d106      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003142:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	4a1a      	ldr	r2, [pc, #104]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003148:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800314c:	60d3      	str	r3, [r2, #12]
 800314e:	e011      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003154:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003158:	d10c      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3304      	adds	r3, #4
 800315e:	2101      	movs	r1, #1
 8003160:	4618      	mov	r0, r3
 8003162:	f000 f899 	bl	8003298 <RCCEx_PLLSAI1_Config>
 8003166:	4603      	mov	r3, r0
 8003168:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800316a:	7cfb      	ldrb	r3, [r7, #19]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003170:	7cfb      	ldrb	r3, [r7, #19]
 8003172:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d02b      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003186:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318e:	4908      	ldr	r1, [pc, #32]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800319e:	d109      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4a02      	ldr	r2, [pc, #8]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031aa:	60d3      	str	r3, [r2, #12]
 80031ac:	e014      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3304      	adds	r3, #4
 80031c2:	2101      	movs	r1, #1
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 f867 	bl	8003298 <RCCEx_PLLSAI1_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031ce:	7cfb      	ldrb	r3, [r7, #19]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80031d4:	7cfb      	ldrb	r3, [r7, #19]
 80031d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d02f      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031e4:	4b2b      	ldr	r3, [pc, #172]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031f2:	4928      	ldr	r1, [pc, #160]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003202:	d10d      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3304      	adds	r3, #4
 8003208:	2102      	movs	r1, #2
 800320a:	4618      	mov	r0, r3
 800320c:	f000 f844 	bl	8003298 <RCCEx_PLLSAI1_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003214:	7cfb      	ldrb	r3, [r7, #19]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d014      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800321a:	7cfb      	ldrb	r3, [r7, #19]
 800321c:	74bb      	strb	r3, [r7, #18]
 800321e:	e011      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003228:	d10c      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3320      	adds	r3, #32
 800322e:	2102      	movs	r1, #2
 8003230:	4618      	mov	r0, r3
 8003232:	f000 f921 	bl	8003478 <RCCEx_PLLSAI2_Config>
 8003236:	4603      	mov	r3, r0
 8003238:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800323a:	7cfb      	ldrb	r3, [r7, #19]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003250:	4b10      	ldr	r3, [pc, #64]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003256:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800325e:	490d      	ldr	r1, [pc, #52]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00b      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003272:	4b08      	ldr	r3, [pc, #32]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003278:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003282:	4904      	ldr	r1, [pc, #16]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800328a:	7cbb      	ldrb	r3, [r7, #18]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40021000 	.word	0x40021000

08003298 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032a6:	4b73      	ldr	r3, [pc, #460]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d018      	beq.n	80032e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032b2:	4b70      	ldr	r3, [pc, #448]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f003 0203 	and.w	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d10d      	bne.n	80032de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
       ||
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032ca:	4b6a      	ldr	r3, [pc, #424]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	091b      	lsrs	r3, r3, #4
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
       ||
 80032da:	429a      	cmp	r2, r3
 80032dc:	d044      	beq.n	8003368 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	73fb      	strb	r3, [r7, #15]
 80032e2:	e041      	b.n	8003368 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d00c      	beq.n	8003306 <RCCEx_PLLSAI1_Config+0x6e>
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d013      	beq.n	8003318 <RCCEx_PLLSAI1_Config+0x80>
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d120      	bne.n	8003336 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032f4:	4b5f      	ldr	r3, [pc, #380]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d11d      	bne.n	800333c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003304:	e01a      	b.n	800333c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003306:	4b5b      	ldr	r3, [pc, #364]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330e:	2b00      	cmp	r3, #0
 8003310:	d116      	bne.n	8003340 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003316:	e013      	b.n	8003340 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003318:	4b56      	ldr	r3, [pc, #344]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10f      	bne.n	8003344 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003324:	4b53      	ldr	r3, [pc, #332]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d109      	bne.n	8003344 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003334:	e006      	b.n	8003344 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
      break;
 800333a:	e004      	b.n	8003346 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800333c:	bf00      	nop
 800333e:	e002      	b.n	8003346 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003340:	bf00      	nop
 8003342:	e000      	b.n	8003346 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003344:	bf00      	nop
    }

    if(status == HAL_OK)
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10d      	bne.n	8003368 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800334c:	4b49      	ldr	r3, [pc, #292]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6819      	ldr	r1, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	3b01      	subs	r3, #1
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	430b      	orrs	r3, r1
 8003362:	4944      	ldr	r1, [pc, #272]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003364:	4313      	orrs	r3, r2
 8003366:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d17d      	bne.n	800346a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800336e:	4b41      	ldr	r3, [pc, #260]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a40      	ldr	r2, [pc, #256]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003374:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800337a:	f7fe fb85 	bl	8001a88 <HAL_GetTick>
 800337e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003380:	e009      	b.n	8003396 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003382:	f7fe fb81 	bl	8001a88 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d902      	bls.n	8003396 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	73fb      	strb	r3, [r7, #15]
        break;
 8003394:	e005      	b.n	80033a2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003396:	4b37      	ldr	r3, [pc, #220]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1ef      	bne.n	8003382 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d160      	bne.n	800346a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d111      	bne.n	80033d2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033ae:	4b31      	ldr	r3, [pc, #196]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6892      	ldr	r2, [r2, #8]
 80033be:	0211      	lsls	r1, r2, #8
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68d2      	ldr	r2, [r2, #12]
 80033c4:	0912      	lsrs	r2, r2, #4
 80033c6:	0452      	lsls	r2, r2, #17
 80033c8:	430a      	orrs	r2, r1
 80033ca:	492a      	ldr	r1, [pc, #168]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	610b      	str	r3, [r1, #16]
 80033d0:	e027      	b.n	8003422 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d112      	bne.n	80033fe <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033d8:	4b26      	ldr	r3, [pc, #152]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80033e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6892      	ldr	r2, [r2, #8]
 80033e8:	0211      	lsls	r1, r2, #8
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6912      	ldr	r2, [r2, #16]
 80033ee:	0852      	lsrs	r2, r2, #1
 80033f0:	3a01      	subs	r2, #1
 80033f2:	0552      	lsls	r2, r2, #21
 80033f4:	430a      	orrs	r2, r1
 80033f6:	491f      	ldr	r1, [pc, #124]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	610b      	str	r3, [r1, #16]
 80033fc:	e011      	b.n	8003422 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033fe:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003406:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6892      	ldr	r2, [r2, #8]
 800340e:	0211      	lsls	r1, r2, #8
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6952      	ldr	r2, [r2, #20]
 8003414:	0852      	lsrs	r2, r2, #1
 8003416:	3a01      	subs	r2, #1
 8003418:	0652      	lsls	r2, r2, #25
 800341a:	430a      	orrs	r2, r1
 800341c:	4915      	ldr	r1, [pc, #84]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 800341e:	4313      	orrs	r3, r2
 8003420:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003422:	4b14      	ldr	r3, [pc, #80]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a13      	ldr	r2, [pc, #76]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003428:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800342c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342e:	f7fe fb2b 	bl	8001a88 <HAL_GetTick>
 8003432:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003434:	e009      	b.n	800344a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003436:	f7fe fb27 	bl	8001a88 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d902      	bls.n	800344a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	73fb      	strb	r3, [r7, #15]
          break;
 8003448:	e005      	b.n	8003456 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800344a:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0ef      	beq.n	8003436 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d106      	bne.n	800346a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	4903      	ldr	r1, [pc, #12]	; (8003474 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003466:	4313      	orrs	r3, r2
 8003468:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800346a:	7bfb      	ldrb	r3, [r7, #15]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40021000 	.word	0x40021000

08003478 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003486:	4b68      	ldr	r3, [pc, #416]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d018      	beq.n	80034c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003492:	4b65      	ldr	r3, [pc, #404]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f003 0203 	and.w	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d10d      	bne.n	80034be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
       ||
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d009      	beq.n	80034be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034aa:	4b5f      	ldr	r3, [pc, #380]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	091b      	lsrs	r3, r3, #4
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
       ||
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d044      	beq.n	8003548 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	73fb      	strb	r3, [r7, #15]
 80034c2:	e041      	b.n	8003548 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d00c      	beq.n	80034e6 <RCCEx_PLLSAI2_Config+0x6e>
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d013      	beq.n	80034f8 <RCCEx_PLLSAI2_Config+0x80>
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d120      	bne.n	8003516 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034d4:	4b54      	ldr	r3, [pc, #336]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d11d      	bne.n	800351c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e4:	e01a      	b.n	800351c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034e6:	4b50      	ldr	r3, [pc, #320]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d116      	bne.n	8003520 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034f6:	e013      	b.n	8003520 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034f8:	4b4b      	ldr	r3, [pc, #300]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10f      	bne.n	8003524 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003504:	4b48      	ldr	r3, [pc, #288]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d109      	bne.n	8003524 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003514:	e006      	b.n	8003524 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	73fb      	strb	r3, [r7, #15]
      break;
 800351a:	e004      	b.n	8003526 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800351c:	bf00      	nop
 800351e:	e002      	b.n	8003526 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003520:	bf00      	nop
 8003522:	e000      	b.n	8003526 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003524:	bf00      	nop
    }

    if(status == HAL_OK)
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10d      	bne.n	8003548 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800352c:	4b3e      	ldr	r3, [pc, #248]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b0>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6819      	ldr	r1, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	3b01      	subs	r3, #1
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	430b      	orrs	r3, r1
 8003542:	4939      	ldr	r1, [pc, #228]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003544:	4313      	orrs	r3, r2
 8003546:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d167      	bne.n	800361e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800354e:	4b36      	ldr	r3, [pc, #216]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a35      	ldr	r2, [pc, #212]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003558:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800355a:	f7fe fa95 	bl	8001a88 <HAL_GetTick>
 800355e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003560:	e009      	b.n	8003576 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003562:	f7fe fa91 	bl	8001a88 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d902      	bls.n	8003576 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	73fb      	strb	r3, [r7, #15]
        break;
 8003574:	e005      	b.n	8003582 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003576:	4b2c      	ldr	r3, [pc, #176]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1ef      	bne.n	8003562 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d14a      	bne.n	800361e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d111      	bne.n	80035b2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800358e:	4b26      	ldr	r3, [pc, #152]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6892      	ldr	r2, [r2, #8]
 800359e:	0211      	lsls	r1, r2, #8
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	68d2      	ldr	r2, [r2, #12]
 80035a4:	0912      	lsrs	r2, r2, #4
 80035a6:	0452      	lsls	r2, r2, #17
 80035a8:	430a      	orrs	r2, r1
 80035aa:	491f      	ldr	r1, [pc, #124]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	614b      	str	r3, [r1, #20]
 80035b0:	e011      	b.n	80035d6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035b2:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6892      	ldr	r2, [r2, #8]
 80035c2:	0211      	lsls	r1, r2, #8
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6912      	ldr	r2, [r2, #16]
 80035c8:	0852      	lsrs	r2, r2, #1
 80035ca:	3a01      	subs	r2, #1
 80035cc:	0652      	lsls	r2, r2, #25
 80035ce:	430a      	orrs	r2, r1
 80035d0:	4915      	ldr	r1, [pc, #84]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035d6:	4b14      	ldr	r3, [pc, #80]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a13      	ldr	r2, [pc, #76]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b0>)
 80035dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e2:	f7fe fa51 	bl	8001a88 <HAL_GetTick>
 80035e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035e8:	e009      	b.n	80035fe <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035ea:	f7fe fa4d 	bl	8001a88 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d902      	bls.n	80035fe <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	73fb      	strb	r3, [r7, #15]
          break;
 80035fc:	e005      	b.n	800360a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035fe:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0ef      	beq.n	80035ea <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800360a:	7bfb      	ldrb	r3, [r7, #15]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d106      	bne.n	800361e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003612:	695a      	ldr	r2, [r3, #20]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	4903      	ldr	r1, [pc, #12]	; (8003628 <RCCEx_PLLSAI2_Config+0x1b0>)
 800361a:	4313      	orrs	r3, r2
 800361c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800361e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40021000 	.word	0x40021000

0800362c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e095      	b.n	800376a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	2b00      	cmp	r3, #0
 8003644:	d108      	bne.n	8003658 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800364e:	d009      	beq.n	8003664 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	61da      	str	r2, [r3, #28]
 8003656:	e005      	b.n	8003664 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d106      	bne.n	8003684 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7fe f854 	bl	800172c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800369a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036a4:	d902      	bls.n	80036ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	e002      	b.n	80036b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80036ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80036ba:	d007      	beq.n	80036cc <HAL_SPI_Init+0xa0>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036c4:	d002      	beq.n	80036cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370e:	ea42 0103 	orr.w	r1, r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	0c1b      	lsrs	r3, r3, #16
 8003728:	f003 0204 	and.w	r2, r3, #4
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003748:	ea42 0103 	orr.w	r1, r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b088      	sub	sp, #32
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	603b      	str	r3, [r7, #0]
 800377e:	4613      	mov	r3, r2
 8003780:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_SPI_Transmit+0x22>
 8003790:	2302      	movs	r3, #2
 8003792:	e158      	b.n	8003a46 <HAL_SPI_Transmit+0x2d4>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800379c:	f7fe f974 	bl	8001a88 <HAL_GetTick>
 80037a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d002      	beq.n	80037b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037b2:	2302      	movs	r3, #2
 80037b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037b6:	e13d      	b.n	8003a34 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <HAL_SPI_Transmit+0x52>
 80037be:	88fb      	ldrh	r3, [r7, #6]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d102      	bne.n	80037ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037c8:	e134      	b.n	8003a34 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2203      	movs	r2, #3
 80037ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	88fa      	ldrh	r2, [r7, #6]
 80037e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	88fa      	ldrh	r2, [r7, #6]
 80037e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003814:	d10f      	bne.n	8003836 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003824:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003834:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003840:	2b40      	cmp	r3, #64	; 0x40
 8003842:	d007      	beq.n	8003854 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003852:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800385c:	d94b      	bls.n	80038f6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_SPI_Transmit+0xfa>
 8003866:	8afb      	ldrh	r3, [r7, #22]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d13e      	bne.n	80038ea <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003870:	881a      	ldrh	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	1c9a      	adds	r2, r3, #2
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003890:	e02b      	b.n	80038ea <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b02      	cmp	r3, #2
 800389e:	d112      	bne.n	80038c6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	881a      	ldrh	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	1c9a      	adds	r2, r3, #2
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038c4:	e011      	b.n	80038ea <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038c6:	f7fe f8df 	bl	8001a88 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d803      	bhi.n	80038de <HAL_SPI_Transmit+0x16c>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038dc:	d102      	bne.n	80038e4 <HAL_SPI_Transmit+0x172>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d102      	bne.n	80038ea <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038e8:	e0a4      	b.n	8003a34 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1ce      	bne.n	8003892 <HAL_SPI_Transmit+0x120>
 80038f4:	e07c      	b.n	80039f0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <HAL_SPI_Transmit+0x192>
 80038fe:	8afb      	ldrh	r3, [r7, #22]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d170      	bne.n	80039e6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b01      	cmp	r3, #1
 800390c:	d912      	bls.n	8003934 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003912:	881a      	ldrh	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	1c9a      	adds	r2, r3, #2
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b02      	subs	r3, #2
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003932:	e058      	b.n	80039e6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	330c      	adds	r3, #12
 800393e:	7812      	ldrb	r2, [r2, #0]
 8003940:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800395a:	e044      	b.n	80039e6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b02      	cmp	r3, #2
 8003968:	d12b      	bne.n	80039c2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b01      	cmp	r3, #1
 8003972:	d912      	bls.n	800399a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	881a      	ldrh	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003984:	1c9a      	adds	r2, r3, #2
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b02      	subs	r3, #2
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003998:	e025      	b.n	80039e6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	330c      	adds	r3, #12
 80039a4:	7812      	ldrb	r2, [r2, #0]
 80039a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039c0:	e011      	b.n	80039e6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039c2:	f7fe f861 	bl	8001a88 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d803      	bhi.n	80039da <HAL_SPI_Transmit+0x268>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d8:	d102      	bne.n	80039e0 <HAL_SPI_Transmit+0x26e>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d102      	bne.n	80039e6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039e4:	e026      	b.n	8003a34 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1b5      	bne.n	800395c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	6839      	ldr	r1, [r7, #0]
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f941 	bl	8003c7c <SPI_EndRxTxTransaction>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	613b      	str	r3, [r7, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	77fb      	strb	r3, [r7, #31]
 8003a30:	e000      	b.n	8003a34 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003a32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003a44:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3720      	adds	r7, #32
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a60:	f7fe f812 	bl	8001a88 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a70:	f7fe f80a 	bl	8001a88 <HAL_GetTick>
 8003a74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a76:	4b39      	ldr	r3, [pc, #228]	; (8003b5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	015b      	lsls	r3, r3, #5
 8003a7c:	0d1b      	lsrs	r3, r3, #20
 8003a7e:	69fa      	ldr	r2, [r7, #28]
 8003a80:	fb02 f303 	mul.w	r3, r2, r3
 8003a84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a86:	e054      	b.n	8003b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8e:	d050      	beq.n	8003b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a90:	f7fd fffa 	bl	8001a88 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d902      	bls.n	8003aa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d13d      	bne.n	8003b22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ab4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003abe:	d111      	bne.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ac8:	d004      	beq.n	8003ad4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad2:	d107      	bne.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ae2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aec:	d10f      	bne.n	8003b0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e017      	b.n	8003b52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	bf0c      	ite	eq
 8003b42:	2301      	moveq	r3, #1
 8003b44:	2300      	movne	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d19b      	bne.n	8003a88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3720      	adds	r7, #32
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000008 	.word	0x20000008

08003b60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b6e:	f7fd ff8b 	bl	8001a88 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b7e:	f7fd ff83 	bl	8001a88 <HAL_GetTick>
 8003b82:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b84:	4b3c      	ldr	r3, [pc, #240]	; (8003c78 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	00da      	lsls	r2, r3, #3
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	0d1b      	lsrs	r3, r3, #20
 8003b94:	69fa      	ldr	r2, [r7, #28]
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b9c:	e05f      	b.n	8003c5e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ba4:	d106      	bne.n	8003bb4 <SPI_WaitFifoStateUntilTimeout+0x54>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d103      	bne.n	8003bb4 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	330c      	adds	r3, #12
 8003bb2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bba:	d050      	beq.n	8003c5e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bbc:	f7fd ff64 	bl	8001a88 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	69fa      	ldr	r2, [r7, #28]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d902      	bls.n	8003bd2 <SPI_WaitFifoStateUntilTimeout+0x72>
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d13d      	bne.n	8003c4e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003be0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bea:	d111      	bne.n	8003c10 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf4:	d004      	beq.n	8003c00 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfe:	d107      	bne.n	8003c10 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c18:	d10f      	bne.n	8003c3a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e010      	b.n	8003c70 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4013      	ands	r3, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d197      	bne.n	8003b9e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3720      	adds	r7, #32
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000008 	.word	0x20000008

08003c7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f7ff ff63 	bl	8003b60 <SPI_WaitFifoStateUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d007      	beq.n	8003cb0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca4:	f043 0220 	orr.w	r2, r3, #32
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e027      	b.n	8003d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2180      	movs	r1, #128	; 0x80
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f7ff fec8 	bl	8003a50 <SPI_WaitFlagStateUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cca:	f043 0220 	orr.w	r2, r3, #32
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e014      	b.n	8003d00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f7ff ff3c 	bl	8003b60 <SPI_WaitFifoStateUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d007      	beq.n	8003cfe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf2:	f043 0220 	orr.w	r2, r3, #32
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e000      	b.n	8003d00 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e040      	b.n	8003d9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fd fd40 	bl	80017b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2224      	movs	r2, #36	; 0x24
 8003d34:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0201 	bic.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f98c 	bl	8004064 <UART_SetConfig>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e022      	b.n	8003d9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fc0a 	bl	8004578 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 fc91 	bl	80046bc <UART_CheckIdleState>
 8003d9a:	4603      	mov	r3, r0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08a      	sub	sp, #40	; 0x28
 8003da8:	af02      	add	r7, sp, #8
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	4613      	mov	r3, r2
 8003db2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	f040 8081 	bne.w	8003ec0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <HAL_UART_Transmit+0x26>
 8003dc4:	88fb      	ldrh	r3, [r7, #6]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e079      	b.n	8003ec2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_UART_Transmit+0x38>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e072      	b.n	8003ec2 <HAL_UART_Transmit+0x11e>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2221      	movs	r2, #33	; 0x21
 8003dee:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003df0:	f7fd fe4a 	bl	8001a88 <HAL_GetTick>
 8003df4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	88fa      	ldrh	r2, [r7, #6]
 8003dfa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	88fa      	ldrh	r2, [r7, #6]
 8003e02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0e:	d108      	bne.n	8003e22 <HAL_UART_Transmit+0x7e>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d104      	bne.n	8003e22 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	e003      	b.n	8003e2a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003e32:	e02d      	b.n	8003e90 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2180      	movs	r1, #128	; 0x80
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 fc81 	bl	8004746 <UART_WaitOnFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e039      	b.n	8003ec2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10b      	bne.n	8003e6c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	881a      	ldrh	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e60:	b292      	uxth	r2, r2
 8003e62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	3302      	adds	r3, #2
 8003e68:	61bb      	str	r3, [r7, #24]
 8003e6a:	e008      	b.n	8003e7e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	781a      	ldrb	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	b292      	uxth	r2, r2
 8003e76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1cb      	bne.n	8003e34 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	2140      	movs	r1, #64	; 0x40
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 fc4d 	bl	8004746 <UART_WaitOnFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e005      	b.n	8003ec2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e000      	b.n	8003ec2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003ec0:	2302      	movs	r3, #2
  }
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b08a      	sub	sp, #40	; 0x28
 8003ece:	af02      	add	r7, sp, #8
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	f040 80bb 	bne.w	800405a <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <HAL_UART_Receive+0x26>
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e0b3      	b.n	800405c <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_UART_Receive+0x38>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e0ac      	b.n	800405c <HAL_UART_Receive+0x192>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2222      	movs	r2, #34	; 0x22
 8003f14:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003f16:	f7fd fdb7 	bl	8001a88 <HAL_GetTick>
 8003f1a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	88fa      	ldrh	r2, [r7, #6]
 8003f20:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	88fa      	ldrh	r2, [r7, #6]
 8003f28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f34:	d10e      	bne.n	8003f54 <HAL_UART_Receive+0x8a>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d105      	bne.n	8003f4a <HAL_UART_Receive+0x80>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003f44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f48:	e02d      	b.n	8003fa6 <HAL_UART_Receive+0xdc>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	22ff      	movs	r2, #255	; 0xff
 8003f4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f52:	e028      	b.n	8003fa6 <HAL_UART_Receive+0xdc>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10d      	bne.n	8003f78 <HAL_UART_Receive+0xae>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d104      	bne.n	8003f6e <HAL_UART_Receive+0xa4>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	22ff      	movs	r2, #255	; 0xff
 8003f68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f6c:	e01b      	b.n	8003fa6 <HAL_UART_Receive+0xdc>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	227f      	movs	r2, #127	; 0x7f
 8003f72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f76:	e016      	b.n	8003fa6 <HAL_UART_Receive+0xdc>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f80:	d10d      	bne.n	8003f9e <HAL_UART_Receive+0xd4>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d104      	bne.n	8003f94 <HAL_UART_Receive+0xca>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	227f      	movs	r2, #127	; 0x7f
 8003f8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f92:	e008      	b.n	8003fa6 <HAL_UART_Receive+0xdc>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	223f      	movs	r2, #63	; 0x3f
 8003f98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f9c:	e003      	b.n	8003fa6 <HAL_UART_Receive+0xdc>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003fac:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb6:	d108      	bne.n	8003fca <HAL_UART_Receive+0x100>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d104      	bne.n	8003fca <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	61bb      	str	r3, [r7, #24]
 8003fc8:	e003      	b.n	8003fd2 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003fda:	e033      	b.n	8004044 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2120      	movs	r1, #32
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 fbad 	bl	8004746 <UART_WaitOnFlagUntilTimeout>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e032      	b.n	800405c <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10c      	bne.n	8004016 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004002:	b29a      	uxth	r2, r3
 8004004:	8a7b      	ldrh	r3, [r7, #18]
 8004006:	4013      	ands	r3, r2
 8004008:	b29a      	uxth	r2, r3
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	3302      	adds	r3, #2
 8004012:	61bb      	str	r3, [r7, #24]
 8004014:	e00d      	b.n	8004032 <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800401c:	b29b      	uxth	r3, r3
 800401e:	b2da      	uxtb	r2, r3
 8004020:	8a7b      	ldrh	r3, [r7, #18]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	4013      	ands	r3, r2
 8004026:	b2da      	uxtb	r2, r3
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	3301      	adds	r3, #1
 8004030:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004038:	b29b      	uxth	r3, r3
 800403a:	3b01      	subs	r3, #1
 800403c:	b29a      	uxth	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1c5      	bne.n	8003fdc <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	e000      	b.n	800405c <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 800405a:	2302      	movs	r3, #2
  }
}
 800405c:	4618      	mov	r0, r3
 800405e:	3720      	adds	r7, #32
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004064:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004068:	b088      	sub	sp, #32
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	4313      	orrs	r3, r2
 8004088:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	4bac      	ldr	r3, [pc, #688]	; (8004344 <UART_SetConfig+0x2e0>)
 8004092:	4013      	ands	r3, r2
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	69f9      	ldr	r1, [r7, #28]
 800409a:	430b      	orrs	r3, r1
 800409c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4aa2      	ldr	r2, [pc, #648]	; (8004348 <UART_SetConfig+0x2e4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d004      	beq.n	80040ce <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	430a      	orrs	r2, r1
 80040e0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a99      	ldr	r2, [pc, #612]	; (800434c <UART_SetConfig+0x2e8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d121      	bne.n	8004130 <UART_SetConfig+0xcc>
 80040ec:	4b98      	ldr	r3, [pc, #608]	; (8004350 <UART_SetConfig+0x2ec>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d816      	bhi.n	8004128 <UART_SetConfig+0xc4>
 80040fa:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <UART_SetConfig+0x9c>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	08004111 	.word	0x08004111
 8004104:	0800411d 	.word	0x0800411d
 8004108:	08004117 	.word	0x08004117
 800410c:	08004123 	.word	0x08004123
 8004110:	2301      	movs	r3, #1
 8004112:	76fb      	strb	r3, [r7, #27]
 8004114:	e0e8      	b.n	80042e8 <UART_SetConfig+0x284>
 8004116:	2302      	movs	r3, #2
 8004118:	76fb      	strb	r3, [r7, #27]
 800411a:	e0e5      	b.n	80042e8 <UART_SetConfig+0x284>
 800411c:	2304      	movs	r3, #4
 800411e:	76fb      	strb	r3, [r7, #27]
 8004120:	e0e2      	b.n	80042e8 <UART_SetConfig+0x284>
 8004122:	2308      	movs	r3, #8
 8004124:	76fb      	strb	r3, [r7, #27]
 8004126:	e0df      	b.n	80042e8 <UART_SetConfig+0x284>
 8004128:	2310      	movs	r3, #16
 800412a:	76fb      	strb	r3, [r7, #27]
 800412c:	bf00      	nop
 800412e:	e0db      	b.n	80042e8 <UART_SetConfig+0x284>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a87      	ldr	r2, [pc, #540]	; (8004354 <UART_SetConfig+0x2f0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d134      	bne.n	80041a4 <UART_SetConfig+0x140>
 800413a:	4b85      	ldr	r3, [pc, #532]	; (8004350 <UART_SetConfig+0x2ec>)
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004140:	f003 030c 	and.w	r3, r3, #12
 8004144:	2b0c      	cmp	r3, #12
 8004146:	d829      	bhi.n	800419c <UART_SetConfig+0x138>
 8004148:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <UART_SetConfig+0xec>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004185 	.word	0x08004185
 8004154:	0800419d 	.word	0x0800419d
 8004158:	0800419d 	.word	0x0800419d
 800415c:	0800419d 	.word	0x0800419d
 8004160:	08004191 	.word	0x08004191
 8004164:	0800419d 	.word	0x0800419d
 8004168:	0800419d 	.word	0x0800419d
 800416c:	0800419d 	.word	0x0800419d
 8004170:	0800418b 	.word	0x0800418b
 8004174:	0800419d 	.word	0x0800419d
 8004178:	0800419d 	.word	0x0800419d
 800417c:	0800419d 	.word	0x0800419d
 8004180:	08004197 	.word	0x08004197
 8004184:	2300      	movs	r3, #0
 8004186:	76fb      	strb	r3, [r7, #27]
 8004188:	e0ae      	b.n	80042e8 <UART_SetConfig+0x284>
 800418a:	2302      	movs	r3, #2
 800418c:	76fb      	strb	r3, [r7, #27]
 800418e:	e0ab      	b.n	80042e8 <UART_SetConfig+0x284>
 8004190:	2304      	movs	r3, #4
 8004192:	76fb      	strb	r3, [r7, #27]
 8004194:	e0a8      	b.n	80042e8 <UART_SetConfig+0x284>
 8004196:	2308      	movs	r3, #8
 8004198:	76fb      	strb	r3, [r7, #27]
 800419a:	e0a5      	b.n	80042e8 <UART_SetConfig+0x284>
 800419c:	2310      	movs	r3, #16
 800419e:	76fb      	strb	r3, [r7, #27]
 80041a0:	bf00      	nop
 80041a2:	e0a1      	b.n	80042e8 <UART_SetConfig+0x284>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a6b      	ldr	r2, [pc, #428]	; (8004358 <UART_SetConfig+0x2f4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d120      	bne.n	80041f0 <UART_SetConfig+0x18c>
 80041ae:	4b68      	ldr	r3, [pc, #416]	; (8004350 <UART_SetConfig+0x2ec>)
 80041b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041b8:	2b10      	cmp	r3, #16
 80041ba:	d00f      	beq.n	80041dc <UART_SetConfig+0x178>
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d802      	bhi.n	80041c6 <UART_SetConfig+0x162>
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <UART_SetConfig+0x16c>
 80041c4:	e010      	b.n	80041e8 <UART_SetConfig+0x184>
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d005      	beq.n	80041d6 <UART_SetConfig+0x172>
 80041ca:	2b30      	cmp	r3, #48	; 0x30
 80041cc:	d009      	beq.n	80041e2 <UART_SetConfig+0x17e>
 80041ce:	e00b      	b.n	80041e8 <UART_SetConfig+0x184>
 80041d0:	2300      	movs	r3, #0
 80041d2:	76fb      	strb	r3, [r7, #27]
 80041d4:	e088      	b.n	80042e8 <UART_SetConfig+0x284>
 80041d6:	2302      	movs	r3, #2
 80041d8:	76fb      	strb	r3, [r7, #27]
 80041da:	e085      	b.n	80042e8 <UART_SetConfig+0x284>
 80041dc:	2304      	movs	r3, #4
 80041de:	76fb      	strb	r3, [r7, #27]
 80041e0:	e082      	b.n	80042e8 <UART_SetConfig+0x284>
 80041e2:	2308      	movs	r3, #8
 80041e4:	76fb      	strb	r3, [r7, #27]
 80041e6:	e07f      	b.n	80042e8 <UART_SetConfig+0x284>
 80041e8:	2310      	movs	r3, #16
 80041ea:	76fb      	strb	r3, [r7, #27]
 80041ec:	bf00      	nop
 80041ee:	e07b      	b.n	80042e8 <UART_SetConfig+0x284>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a59      	ldr	r2, [pc, #356]	; (800435c <UART_SetConfig+0x2f8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d120      	bne.n	800423c <UART_SetConfig+0x1d8>
 80041fa:	4b55      	ldr	r3, [pc, #340]	; (8004350 <UART_SetConfig+0x2ec>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004200:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004204:	2b40      	cmp	r3, #64	; 0x40
 8004206:	d00f      	beq.n	8004228 <UART_SetConfig+0x1c4>
 8004208:	2b40      	cmp	r3, #64	; 0x40
 800420a:	d802      	bhi.n	8004212 <UART_SetConfig+0x1ae>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <UART_SetConfig+0x1b8>
 8004210:	e010      	b.n	8004234 <UART_SetConfig+0x1d0>
 8004212:	2b80      	cmp	r3, #128	; 0x80
 8004214:	d005      	beq.n	8004222 <UART_SetConfig+0x1be>
 8004216:	2bc0      	cmp	r3, #192	; 0xc0
 8004218:	d009      	beq.n	800422e <UART_SetConfig+0x1ca>
 800421a:	e00b      	b.n	8004234 <UART_SetConfig+0x1d0>
 800421c:	2300      	movs	r3, #0
 800421e:	76fb      	strb	r3, [r7, #27]
 8004220:	e062      	b.n	80042e8 <UART_SetConfig+0x284>
 8004222:	2302      	movs	r3, #2
 8004224:	76fb      	strb	r3, [r7, #27]
 8004226:	e05f      	b.n	80042e8 <UART_SetConfig+0x284>
 8004228:	2304      	movs	r3, #4
 800422a:	76fb      	strb	r3, [r7, #27]
 800422c:	e05c      	b.n	80042e8 <UART_SetConfig+0x284>
 800422e:	2308      	movs	r3, #8
 8004230:	76fb      	strb	r3, [r7, #27]
 8004232:	e059      	b.n	80042e8 <UART_SetConfig+0x284>
 8004234:	2310      	movs	r3, #16
 8004236:	76fb      	strb	r3, [r7, #27]
 8004238:	bf00      	nop
 800423a:	e055      	b.n	80042e8 <UART_SetConfig+0x284>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a47      	ldr	r2, [pc, #284]	; (8004360 <UART_SetConfig+0x2fc>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d124      	bne.n	8004290 <UART_SetConfig+0x22c>
 8004246:	4b42      	ldr	r3, [pc, #264]	; (8004350 <UART_SetConfig+0x2ec>)
 8004248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004254:	d012      	beq.n	800427c <UART_SetConfig+0x218>
 8004256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800425a:	d802      	bhi.n	8004262 <UART_SetConfig+0x1fe>
 800425c:	2b00      	cmp	r3, #0
 800425e:	d007      	beq.n	8004270 <UART_SetConfig+0x20c>
 8004260:	e012      	b.n	8004288 <UART_SetConfig+0x224>
 8004262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004266:	d006      	beq.n	8004276 <UART_SetConfig+0x212>
 8004268:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800426c:	d009      	beq.n	8004282 <UART_SetConfig+0x21e>
 800426e:	e00b      	b.n	8004288 <UART_SetConfig+0x224>
 8004270:	2300      	movs	r3, #0
 8004272:	76fb      	strb	r3, [r7, #27]
 8004274:	e038      	b.n	80042e8 <UART_SetConfig+0x284>
 8004276:	2302      	movs	r3, #2
 8004278:	76fb      	strb	r3, [r7, #27]
 800427a:	e035      	b.n	80042e8 <UART_SetConfig+0x284>
 800427c:	2304      	movs	r3, #4
 800427e:	76fb      	strb	r3, [r7, #27]
 8004280:	e032      	b.n	80042e8 <UART_SetConfig+0x284>
 8004282:	2308      	movs	r3, #8
 8004284:	76fb      	strb	r3, [r7, #27]
 8004286:	e02f      	b.n	80042e8 <UART_SetConfig+0x284>
 8004288:	2310      	movs	r3, #16
 800428a:	76fb      	strb	r3, [r7, #27]
 800428c:	bf00      	nop
 800428e:	e02b      	b.n	80042e8 <UART_SetConfig+0x284>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a2c      	ldr	r2, [pc, #176]	; (8004348 <UART_SetConfig+0x2e4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d124      	bne.n	80042e4 <UART_SetConfig+0x280>
 800429a:	4b2d      	ldr	r3, [pc, #180]	; (8004350 <UART_SetConfig+0x2ec>)
 800429c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a8:	d012      	beq.n	80042d0 <UART_SetConfig+0x26c>
 80042aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ae:	d802      	bhi.n	80042b6 <UART_SetConfig+0x252>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d007      	beq.n	80042c4 <UART_SetConfig+0x260>
 80042b4:	e012      	b.n	80042dc <UART_SetConfig+0x278>
 80042b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ba:	d006      	beq.n	80042ca <UART_SetConfig+0x266>
 80042bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042c0:	d009      	beq.n	80042d6 <UART_SetConfig+0x272>
 80042c2:	e00b      	b.n	80042dc <UART_SetConfig+0x278>
 80042c4:	2300      	movs	r3, #0
 80042c6:	76fb      	strb	r3, [r7, #27]
 80042c8:	e00e      	b.n	80042e8 <UART_SetConfig+0x284>
 80042ca:	2302      	movs	r3, #2
 80042cc:	76fb      	strb	r3, [r7, #27]
 80042ce:	e00b      	b.n	80042e8 <UART_SetConfig+0x284>
 80042d0:	2304      	movs	r3, #4
 80042d2:	76fb      	strb	r3, [r7, #27]
 80042d4:	e008      	b.n	80042e8 <UART_SetConfig+0x284>
 80042d6:	2308      	movs	r3, #8
 80042d8:	76fb      	strb	r3, [r7, #27]
 80042da:	e005      	b.n	80042e8 <UART_SetConfig+0x284>
 80042dc:	2310      	movs	r3, #16
 80042de:	76fb      	strb	r3, [r7, #27]
 80042e0:	bf00      	nop
 80042e2:	e001      	b.n	80042e8 <UART_SetConfig+0x284>
 80042e4:	2310      	movs	r3, #16
 80042e6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a16      	ldr	r2, [pc, #88]	; (8004348 <UART_SetConfig+0x2e4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	f040 8087 	bne.w	8004402 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042f4:	7efb      	ldrb	r3, [r7, #27]
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d836      	bhi.n	8004368 <UART_SetConfig+0x304>
 80042fa:	a201      	add	r2, pc, #4	; (adr r2, 8004300 <UART_SetConfig+0x29c>)
 80042fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004300:	08004325 	.word	0x08004325
 8004304:	08004369 	.word	0x08004369
 8004308:	0800432d 	.word	0x0800432d
 800430c:	08004369 	.word	0x08004369
 8004310:	08004333 	.word	0x08004333
 8004314:	08004369 	.word	0x08004369
 8004318:	08004369 	.word	0x08004369
 800431c:	08004369 	.word	0x08004369
 8004320:	0800433b 	.word	0x0800433b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004324:	f7fe fc46 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 8004328:	6178      	str	r0, [r7, #20]
        break;
 800432a:	e022      	b.n	8004372 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800432c:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <UART_SetConfig+0x300>)
 800432e:	617b      	str	r3, [r7, #20]
        break;
 8004330:	e01f      	b.n	8004372 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004332:	f7fe fba9 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8004336:	6178      	str	r0, [r7, #20]
        break;
 8004338:	e01b      	b.n	8004372 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800433a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800433e:	617b      	str	r3, [r7, #20]
        break;
 8004340:	e017      	b.n	8004372 <UART_SetConfig+0x30e>
 8004342:	bf00      	nop
 8004344:	efff69f3 	.word	0xefff69f3
 8004348:	40008000 	.word	0x40008000
 800434c:	40013800 	.word	0x40013800
 8004350:	40021000 	.word	0x40021000
 8004354:	40004400 	.word	0x40004400
 8004358:	40004800 	.word	0x40004800
 800435c:	40004c00 	.word	0x40004c00
 8004360:	40005000 	.word	0x40005000
 8004364:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	76bb      	strb	r3, [r7, #26]
        break;
 8004370:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 80f1 	beq.w	800455c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4413      	add	r3, r2
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	429a      	cmp	r2, r3
 8004388:	d305      	bcc.n	8004396 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	429a      	cmp	r2, r3
 8004394:	d902      	bls.n	800439c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	76bb      	strb	r3, [r7, #26]
 800439a:	e0df      	b.n	800455c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	4619      	mov	r1, r3
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	f04f 0400 	mov.w	r4, #0
 80043ac:	0214      	lsls	r4, r2, #8
 80043ae:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80043b2:	020b      	lsls	r3, r1, #8
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6852      	ldr	r2, [r2, #4]
 80043b8:	0852      	lsrs	r2, r2, #1
 80043ba:	4611      	mov	r1, r2
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	eb13 0b01 	adds.w	fp, r3, r1
 80043c4:	eb44 0c02 	adc.w	ip, r4, r2
 80043c8:	4658      	mov	r0, fp
 80043ca:	4661      	mov	r1, ip
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f04f 0400 	mov.w	r4, #0
 80043d4:	461a      	mov	r2, r3
 80043d6:	4623      	mov	r3, r4
 80043d8:	f7fb ff52 	bl	8000280 <__aeabi_uldivmod>
 80043dc:	4603      	mov	r3, r0
 80043de:	460c      	mov	r4, r1
 80043e0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e8:	d308      	bcc.n	80043fc <UART_SetConfig+0x398>
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f0:	d204      	bcs.n	80043fc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	60da      	str	r2, [r3, #12]
 80043fa:	e0af      	b.n	800455c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	76bb      	strb	r3, [r7, #26]
 8004400:	e0ac      	b.n	800455c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800440a:	d15b      	bne.n	80044c4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800440c:	7efb      	ldrb	r3, [r7, #27]
 800440e:	2b08      	cmp	r3, #8
 8004410:	d827      	bhi.n	8004462 <UART_SetConfig+0x3fe>
 8004412:	a201      	add	r2, pc, #4	; (adr r2, 8004418 <UART_SetConfig+0x3b4>)
 8004414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004418:	0800443d 	.word	0x0800443d
 800441c:	08004445 	.word	0x08004445
 8004420:	0800444d 	.word	0x0800444d
 8004424:	08004463 	.word	0x08004463
 8004428:	08004453 	.word	0x08004453
 800442c:	08004463 	.word	0x08004463
 8004430:	08004463 	.word	0x08004463
 8004434:	08004463 	.word	0x08004463
 8004438:	0800445b 	.word	0x0800445b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800443c:	f7fe fbba 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 8004440:	6178      	str	r0, [r7, #20]
        break;
 8004442:	e013      	b.n	800446c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004444:	f7fe fbcc 	bl	8002be0 <HAL_RCC_GetPCLK2Freq>
 8004448:	6178      	str	r0, [r7, #20]
        break;
 800444a:	e00f      	b.n	800446c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800444c:	4b49      	ldr	r3, [pc, #292]	; (8004574 <UART_SetConfig+0x510>)
 800444e:	617b      	str	r3, [r7, #20]
        break;
 8004450:	e00c      	b.n	800446c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004452:	f7fe fb19 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8004456:	6178      	str	r0, [r7, #20]
        break;
 8004458:	e008      	b.n	800446c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800445a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800445e:	617b      	str	r3, [r7, #20]
        break;
 8004460:	e004      	b.n	800446c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	76bb      	strb	r3, [r7, #26]
        break;
 800446a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d074      	beq.n	800455c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	005a      	lsls	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	085b      	lsrs	r3, r3, #1
 800447c:	441a      	add	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	fbb2 f3f3 	udiv	r3, r2, r3
 8004486:	b29b      	uxth	r3, r3
 8004488:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b0f      	cmp	r3, #15
 800448e:	d916      	bls.n	80044be <UART_SetConfig+0x45a>
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004496:	d212      	bcs.n	80044be <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	b29b      	uxth	r3, r3
 800449c:	f023 030f 	bic.w	r3, r3, #15
 80044a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	085b      	lsrs	r3, r3, #1
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	89fb      	ldrh	r3, [r7, #14]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	89fa      	ldrh	r2, [r7, #14]
 80044ba:	60da      	str	r2, [r3, #12]
 80044bc:	e04e      	b.n	800455c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	76bb      	strb	r3, [r7, #26]
 80044c2:	e04b      	b.n	800455c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044c4:	7efb      	ldrb	r3, [r7, #27]
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d827      	bhi.n	800451a <UART_SetConfig+0x4b6>
 80044ca:	a201      	add	r2, pc, #4	; (adr r2, 80044d0 <UART_SetConfig+0x46c>)
 80044cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d0:	080044f5 	.word	0x080044f5
 80044d4:	080044fd 	.word	0x080044fd
 80044d8:	08004505 	.word	0x08004505
 80044dc:	0800451b 	.word	0x0800451b
 80044e0:	0800450b 	.word	0x0800450b
 80044e4:	0800451b 	.word	0x0800451b
 80044e8:	0800451b 	.word	0x0800451b
 80044ec:	0800451b 	.word	0x0800451b
 80044f0:	08004513 	.word	0x08004513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f4:	f7fe fb5e 	bl	8002bb4 <HAL_RCC_GetPCLK1Freq>
 80044f8:	6178      	str	r0, [r7, #20]
        break;
 80044fa:	e013      	b.n	8004524 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044fc:	f7fe fb70 	bl	8002be0 <HAL_RCC_GetPCLK2Freq>
 8004500:	6178      	str	r0, [r7, #20]
        break;
 8004502:	e00f      	b.n	8004524 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004504:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <UART_SetConfig+0x510>)
 8004506:	617b      	str	r3, [r7, #20]
        break;
 8004508:	e00c      	b.n	8004524 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800450a:	f7fe fabd 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 800450e:	6178      	str	r0, [r7, #20]
        break;
 8004510:	e008      	b.n	8004524 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004516:	617b      	str	r3, [r7, #20]
        break;
 8004518:	e004      	b.n	8004524 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	76bb      	strb	r3, [r7, #26]
        break;
 8004522:	bf00      	nop
    }

    if (pclk != 0U)
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d018      	beq.n	800455c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	085a      	lsrs	r2, r3, #1
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	441a      	add	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	fbb2 f3f3 	udiv	r3, r2, r3
 800453c:	b29b      	uxth	r3, r3
 800453e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b0f      	cmp	r3, #15
 8004544:	d908      	bls.n	8004558 <UART_SetConfig+0x4f4>
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800454c:	d204      	bcs.n	8004558 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	60da      	str	r2, [r3, #12]
 8004556:	e001      	b.n	800455c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004568:	7ebb      	ldrb	r3, [r7, #26]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3720      	adds	r7, #32
 800456e:	46bd      	mov	sp, r7
 8004570:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004574:	00f42400 	.word	0x00f42400

08004578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01a      	beq.n	800468e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004676:	d10a      	bne.n	800468e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	605a      	str	r2, [r3, #4]
  }
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80046ca:	f7fd f9dd 	bl	8001a88 <HAL_GetTick>
 80046ce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d10e      	bne.n	80046fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f82a 	bl	8004746 <UART_WaitOnFlagUntilTimeout>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e020      	b.n	800473e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	2b04      	cmp	r3, #4
 8004708:	d10e      	bne.n	8004728 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800470a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f814 	bl	8004746 <UART_WaitOnFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e00a      	b.n	800473e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	603b      	str	r3, [r7, #0]
 8004752:	4613      	mov	r3, r2
 8004754:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004756:	e05d      	b.n	8004814 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475e:	d059      	beq.n	8004814 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004760:	f7fd f992 	bl	8001a88 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	429a      	cmp	r2, r3
 800476e:	d302      	bcc.n	8004776 <UART_WaitOnFlagUntilTimeout+0x30>
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d11b      	bne.n	80047ae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004784:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0201 	bic.w	r2, r2, #1
 8004794:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2220      	movs	r2, #32
 80047a0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e042      	b.n	8004834 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d02b      	beq.n	8004814 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ca:	d123      	bne.n	8004814 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047e4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0201 	bic.w	r2, r2, #1
 80047f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2220      	movs	r2, #32
 80047fa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2220      	movs	r2, #32
 8004800:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e00f      	b.n	8004834 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	69da      	ldr	r2, [r3, #28]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	4013      	ands	r3, r2
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	429a      	cmp	r2, r3
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	461a      	mov	r2, r3
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	429a      	cmp	r2, r3
 8004830:	d092      	beq.n	8004758 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <_ZdlPvj>:
 800483c:	f000 b800 	b.w	8004840 <_ZdlPv>

08004840 <_ZdlPv>:
 8004840:	f000 b82a 	b.w	8004898 <free>

08004844 <__errno>:
 8004844:	4b01      	ldr	r3, [pc, #4]	; (800484c <__errno+0x8>)
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	20000014 	.word	0x20000014

08004850 <__libc_init_array>:
 8004850:	b570      	push	{r4, r5, r6, lr}
 8004852:	4e0d      	ldr	r6, [pc, #52]	; (8004888 <__libc_init_array+0x38>)
 8004854:	4c0d      	ldr	r4, [pc, #52]	; (800488c <__libc_init_array+0x3c>)
 8004856:	1ba4      	subs	r4, r4, r6
 8004858:	10a4      	asrs	r4, r4, #2
 800485a:	2500      	movs	r5, #0
 800485c:	42a5      	cmp	r5, r4
 800485e:	d109      	bne.n	8004874 <__libc_init_array+0x24>
 8004860:	4e0b      	ldr	r6, [pc, #44]	; (8004890 <__libc_init_array+0x40>)
 8004862:	4c0c      	ldr	r4, [pc, #48]	; (8004894 <__libc_init_array+0x44>)
 8004864:	f001 f92e 	bl	8005ac4 <_init>
 8004868:	1ba4      	subs	r4, r4, r6
 800486a:	10a4      	asrs	r4, r4, #2
 800486c:	2500      	movs	r5, #0
 800486e:	42a5      	cmp	r5, r4
 8004870:	d105      	bne.n	800487e <__libc_init_array+0x2e>
 8004872:	bd70      	pop	{r4, r5, r6, pc}
 8004874:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004878:	4798      	blx	r3
 800487a:	3501      	adds	r5, #1
 800487c:	e7ee      	b.n	800485c <__libc_init_array+0xc>
 800487e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004882:	4798      	blx	r3
 8004884:	3501      	adds	r5, #1
 8004886:	e7f2      	b.n	800486e <__libc_init_array+0x1e>
 8004888:	080065f4 	.word	0x080065f4
 800488c:	080065f4 	.word	0x080065f4
 8004890:	080065f4 	.word	0x080065f4
 8004894:	080065f8 	.word	0x080065f8

08004898 <free>:
 8004898:	4b02      	ldr	r3, [pc, #8]	; (80048a4 <free+0xc>)
 800489a:	4601      	mov	r1, r0
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	f000 b80b 	b.w	80048b8 <_free_r>
 80048a2:	bf00      	nop
 80048a4:	20000014 	.word	0x20000014

080048a8 <memset>:
 80048a8:	4402      	add	r2, r0
 80048aa:	4603      	mov	r3, r0
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d100      	bne.n	80048b2 <memset+0xa>
 80048b0:	4770      	bx	lr
 80048b2:	f803 1b01 	strb.w	r1, [r3], #1
 80048b6:	e7f9      	b.n	80048ac <memset+0x4>

080048b8 <_free_r>:
 80048b8:	b538      	push	{r3, r4, r5, lr}
 80048ba:	4605      	mov	r5, r0
 80048bc:	2900      	cmp	r1, #0
 80048be:	d045      	beq.n	800494c <_free_r+0x94>
 80048c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048c4:	1f0c      	subs	r4, r1, #4
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bfb8      	it	lt
 80048ca:	18e4      	addlt	r4, r4, r3
 80048cc:	f000 f912 	bl	8004af4 <__malloc_lock>
 80048d0:	4a1f      	ldr	r2, [pc, #124]	; (8004950 <_free_r+0x98>)
 80048d2:	6813      	ldr	r3, [r2, #0]
 80048d4:	4610      	mov	r0, r2
 80048d6:	b933      	cbnz	r3, 80048e6 <_free_r+0x2e>
 80048d8:	6063      	str	r3, [r4, #4]
 80048da:	6014      	str	r4, [r2, #0]
 80048dc:	4628      	mov	r0, r5
 80048de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048e2:	f000 b908 	b.w	8004af6 <__malloc_unlock>
 80048e6:	42a3      	cmp	r3, r4
 80048e8:	d90c      	bls.n	8004904 <_free_r+0x4c>
 80048ea:	6821      	ldr	r1, [r4, #0]
 80048ec:	1862      	adds	r2, r4, r1
 80048ee:	4293      	cmp	r3, r2
 80048f0:	bf04      	itt	eq
 80048f2:	681a      	ldreq	r2, [r3, #0]
 80048f4:	685b      	ldreq	r3, [r3, #4]
 80048f6:	6063      	str	r3, [r4, #4]
 80048f8:	bf04      	itt	eq
 80048fa:	1852      	addeq	r2, r2, r1
 80048fc:	6022      	streq	r2, [r4, #0]
 80048fe:	6004      	str	r4, [r0, #0]
 8004900:	e7ec      	b.n	80048dc <_free_r+0x24>
 8004902:	4613      	mov	r3, r2
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	b10a      	cbz	r2, 800490c <_free_r+0x54>
 8004908:	42a2      	cmp	r2, r4
 800490a:	d9fa      	bls.n	8004902 <_free_r+0x4a>
 800490c:	6819      	ldr	r1, [r3, #0]
 800490e:	1858      	adds	r0, r3, r1
 8004910:	42a0      	cmp	r0, r4
 8004912:	d10b      	bne.n	800492c <_free_r+0x74>
 8004914:	6820      	ldr	r0, [r4, #0]
 8004916:	4401      	add	r1, r0
 8004918:	1858      	adds	r0, r3, r1
 800491a:	4282      	cmp	r2, r0
 800491c:	6019      	str	r1, [r3, #0]
 800491e:	d1dd      	bne.n	80048dc <_free_r+0x24>
 8004920:	6810      	ldr	r0, [r2, #0]
 8004922:	6852      	ldr	r2, [r2, #4]
 8004924:	605a      	str	r2, [r3, #4]
 8004926:	4401      	add	r1, r0
 8004928:	6019      	str	r1, [r3, #0]
 800492a:	e7d7      	b.n	80048dc <_free_r+0x24>
 800492c:	d902      	bls.n	8004934 <_free_r+0x7c>
 800492e:	230c      	movs	r3, #12
 8004930:	602b      	str	r3, [r5, #0]
 8004932:	e7d3      	b.n	80048dc <_free_r+0x24>
 8004934:	6820      	ldr	r0, [r4, #0]
 8004936:	1821      	adds	r1, r4, r0
 8004938:	428a      	cmp	r2, r1
 800493a:	bf04      	itt	eq
 800493c:	6811      	ldreq	r1, [r2, #0]
 800493e:	6852      	ldreq	r2, [r2, #4]
 8004940:	6062      	str	r2, [r4, #4]
 8004942:	bf04      	itt	eq
 8004944:	1809      	addeq	r1, r1, r0
 8004946:	6021      	streq	r1, [r4, #0]
 8004948:	605c      	str	r4, [r3, #4]
 800494a:	e7c7      	b.n	80048dc <_free_r+0x24>
 800494c:	bd38      	pop	{r3, r4, r5, pc}
 800494e:	bf00      	nop
 8004950:	200002f4 	.word	0x200002f4

08004954 <_malloc_r>:
 8004954:	b570      	push	{r4, r5, r6, lr}
 8004956:	1ccd      	adds	r5, r1, #3
 8004958:	f025 0503 	bic.w	r5, r5, #3
 800495c:	3508      	adds	r5, #8
 800495e:	2d0c      	cmp	r5, #12
 8004960:	bf38      	it	cc
 8004962:	250c      	movcc	r5, #12
 8004964:	2d00      	cmp	r5, #0
 8004966:	4606      	mov	r6, r0
 8004968:	db01      	blt.n	800496e <_malloc_r+0x1a>
 800496a:	42a9      	cmp	r1, r5
 800496c:	d903      	bls.n	8004976 <_malloc_r+0x22>
 800496e:	230c      	movs	r3, #12
 8004970:	6033      	str	r3, [r6, #0]
 8004972:	2000      	movs	r0, #0
 8004974:	bd70      	pop	{r4, r5, r6, pc}
 8004976:	f000 f8bd 	bl	8004af4 <__malloc_lock>
 800497a:	4a21      	ldr	r2, [pc, #132]	; (8004a00 <_malloc_r+0xac>)
 800497c:	6814      	ldr	r4, [r2, #0]
 800497e:	4621      	mov	r1, r4
 8004980:	b991      	cbnz	r1, 80049a8 <_malloc_r+0x54>
 8004982:	4c20      	ldr	r4, [pc, #128]	; (8004a04 <_malloc_r+0xb0>)
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	b91b      	cbnz	r3, 8004990 <_malloc_r+0x3c>
 8004988:	4630      	mov	r0, r6
 800498a:	f000 f83d 	bl	8004a08 <_sbrk_r>
 800498e:	6020      	str	r0, [r4, #0]
 8004990:	4629      	mov	r1, r5
 8004992:	4630      	mov	r0, r6
 8004994:	f000 f838 	bl	8004a08 <_sbrk_r>
 8004998:	1c43      	adds	r3, r0, #1
 800499a:	d124      	bne.n	80049e6 <_malloc_r+0x92>
 800499c:	230c      	movs	r3, #12
 800499e:	6033      	str	r3, [r6, #0]
 80049a0:	4630      	mov	r0, r6
 80049a2:	f000 f8a8 	bl	8004af6 <__malloc_unlock>
 80049a6:	e7e4      	b.n	8004972 <_malloc_r+0x1e>
 80049a8:	680b      	ldr	r3, [r1, #0]
 80049aa:	1b5b      	subs	r3, r3, r5
 80049ac:	d418      	bmi.n	80049e0 <_malloc_r+0x8c>
 80049ae:	2b0b      	cmp	r3, #11
 80049b0:	d90f      	bls.n	80049d2 <_malloc_r+0x7e>
 80049b2:	600b      	str	r3, [r1, #0]
 80049b4:	50cd      	str	r5, [r1, r3]
 80049b6:	18cc      	adds	r4, r1, r3
 80049b8:	4630      	mov	r0, r6
 80049ba:	f000 f89c 	bl	8004af6 <__malloc_unlock>
 80049be:	f104 000b 	add.w	r0, r4, #11
 80049c2:	1d23      	adds	r3, r4, #4
 80049c4:	f020 0007 	bic.w	r0, r0, #7
 80049c8:	1ac3      	subs	r3, r0, r3
 80049ca:	d0d3      	beq.n	8004974 <_malloc_r+0x20>
 80049cc:	425a      	negs	r2, r3
 80049ce:	50e2      	str	r2, [r4, r3]
 80049d0:	e7d0      	b.n	8004974 <_malloc_r+0x20>
 80049d2:	428c      	cmp	r4, r1
 80049d4:	684b      	ldr	r3, [r1, #4]
 80049d6:	bf16      	itet	ne
 80049d8:	6063      	strne	r3, [r4, #4]
 80049da:	6013      	streq	r3, [r2, #0]
 80049dc:	460c      	movne	r4, r1
 80049de:	e7eb      	b.n	80049b8 <_malloc_r+0x64>
 80049e0:	460c      	mov	r4, r1
 80049e2:	6849      	ldr	r1, [r1, #4]
 80049e4:	e7cc      	b.n	8004980 <_malloc_r+0x2c>
 80049e6:	1cc4      	adds	r4, r0, #3
 80049e8:	f024 0403 	bic.w	r4, r4, #3
 80049ec:	42a0      	cmp	r0, r4
 80049ee:	d005      	beq.n	80049fc <_malloc_r+0xa8>
 80049f0:	1a21      	subs	r1, r4, r0
 80049f2:	4630      	mov	r0, r6
 80049f4:	f000 f808 	bl	8004a08 <_sbrk_r>
 80049f8:	3001      	adds	r0, #1
 80049fa:	d0cf      	beq.n	800499c <_malloc_r+0x48>
 80049fc:	6025      	str	r5, [r4, #0]
 80049fe:	e7db      	b.n	80049b8 <_malloc_r+0x64>
 8004a00:	200002f4 	.word	0x200002f4
 8004a04:	200002f8 	.word	0x200002f8

08004a08 <_sbrk_r>:
 8004a08:	b538      	push	{r3, r4, r5, lr}
 8004a0a:	4c06      	ldr	r4, [pc, #24]	; (8004a24 <_sbrk_r+0x1c>)
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	4605      	mov	r5, r0
 8004a10:	4608      	mov	r0, r1
 8004a12:	6023      	str	r3, [r4, #0]
 8004a14:	f7fc ff3a 	bl	800188c <_sbrk>
 8004a18:	1c43      	adds	r3, r0, #1
 8004a1a:	d102      	bne.n	8004a22 <_sbrk_r+0x1a>
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	b103      	cbz	r3, 8004a22 <_sbrk_r+0x1a>
 8004a20:	602b      	str	r3, [r5, #0]
 8004a22:	bd38      	pop	{r3, r4, r5, pc}
 8004a24:	20000300 	.word	0x20000300

08004a28 <siprintf>:
 8004a28:	b40e      	push	{r1, r2, r3}
 8004a2a:	b500      	push	{lr}
 8004a2c:	b09c      	sub	sp, #112	; 0x70
 8004a2e:	ab1d      	add	r3, sp, #116	; 0x74
 8004a30:	9002      	str	r0, [sp, #8]
 8004a32:	9006      	str	r0, [sp, #24]
 8004a34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a38:	4809      	ldr	r0, [pc, #36]	; (8004a60 <siprintf+0x38>)
 8004a3a:	9107      	str	r1, [sp, #28]
 8004a3c:	9104      	str	r1, [sp, #16]
 8004a3e:	4909      	ldr	r1, [pc, #36]	; (8004a64 <siprintf+0x3c>)
 8004a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a44:	9105      	str	r1, [sp, #20]
 8004a46:	6800      	ldr	r0, [r0, #0]
 8004a48:	9301      	str	r3, [sp, #4]
 8004a4a:	a902      	add	r1, sp, #8
 8004a4c:	f000 f8ae 	bl	8004bac <_svfiprintf_r>
 8004a50:	9b02      	ldr	r3, [sp, #8]
 8004a52:	2200      	movs	r2, #0
 8004a54:	701a      	strb	r2, [r3, #0]
 8004a56:	b01c      	add	sp, #112	; 0x70
 8004a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a5c:	b003      	add	sp, #12
 8004a5e:	4770      	bx	lr
 8004a60:	20000014 	.word	0x20000014
 8004a64:	ffff0208 	.word	0xffff0208

08004a68 <siscanf>:
 8004a68:	b40e      	push	{r1, r2, r3}
 8004a6a:	b530      	push	{r4, r5, lr}
 8004a6c:	b09c      	sub	sp, #112	; 0x70
 8004a6e:	ac1f      	add	r4, sp, #124	; 0x7c
 8004a70:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004a74:	f854 5b04 	ldr.w	r5, [r4], #4
 8004a78:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004a7c:	9002      	str	r0, [sp, #8]
 8004a7e:	9006      	str	r0, [sp, #24]
 8004a80:	f7fb fba6 	bl	80001d0 <strlen>
 8004a84:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <siscanf+0x4c>)
 8004a86:	9003      	str	r0, [sp, #12]
 8004a88:	9007      	str	r0, [sp, #28]
 8004a8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a8c:	480a      	ldr	r0, [pc, #40]	; (8004ab8 <siscanf+0x50>)
 8004a8e:	9401      	str	r4, [sp, #4]
 8004a90:	2300      	movs	r3, #0
 8004a92:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a94:	9314      	str	r3, [sp, #80]	; 0x50
 8004a96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a9a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004a9e:	462a      	mov	r2, r5
 8004aa0:	4623      	mov	r3, r4
 8004aa2:	a902      	add	r1, sp, #8
 8004aa4:	6800      	ldr	r0, [r0, #0]
 8004aa6:	f000 f9d3 	bl	8004e50 <__ssvfiscanf_r>
 8004aaa:	b01c      	add	sp, #112	; 0x70
 8004aac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ab0:	b003      	add	sp, #12
 8004ab2:	4770      	bx	lr
 8004ab4:	08004abd 	.word	0x08004abd
 8004ab8:	20000014 	.word	0x20000014

08004abc <__seofread>:
 8004abc:	2000      	movs	r0, #0
 8004abe:	4770      	bx	lr

08004ac0 <strstr>:
 8004ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ac2:	7803      	ldrb	r3, [r0, #0]
 8004ac4:	b17b      	cbz	r3, 8004ae6 <strstr+0x26>
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	7823      	ldrb	r3, [r4, #0]
 8004aca:	4620      	mov	r0, r4
 8004acc:	1c66      	adds	r6, r4, #1
 8004ace:	b17b      	cbz	r3, 8004af0 <strstr+0x30>
 8004ad0:	1e4a      	subs	r2, r1, #1
 8004ad2:	1e63      	subs	r3, r4, #1
 8004ad4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8004ad8:	b14d      	cbz	r5, 8004aee <strstr+0x2e>
 8004ada:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004ade:	42af      	cmp	r7, r5
 8004ae0:	4634      	mov	r4, r6
 8004ae2:	d0f7      	beq.n	8004ad4 <strstr+0x14>
 8004ae4:	e7f0      	b.n	8004ac8 <strstr+0x8>
 8004ae6:	780b      	ldrb	r3, [r1, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	bf18      	it	ne
 8004aec:	2000      	movne	r0, #0
 8004aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004af0:	4618      	mov	r0, r3
 8004af2:	e7fc      	b.n	8004aee <strstr+0x2e>

08004af4 <__malloc_lock>:
 8004af4:	4770      	bx	lr

08004af6 <__malloc_unlock>:
 8004af6:	4770      	bx	lr

08004af8 <__ssputs_r>:
 8004af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004afc:	688e      	ldr	r6, [r1, #8]
 8004afe:	429e      	cmp	r6, r3
 8004b00:	4682      	mov	sl, r0
 8004b02:	460c      	mov	r4, r1
 8004b04:	4690      	mov	r8, r2
 8004b06:	4699      	mov	r9, r3
 8004b08:	d837      	bhi.n	8004b7a <__ssputs_r+0x82>
 8004b0a:	898a      	ldrh	r2, [r1, #12]
 8004b0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b10:	d031      	beq.n	8004b76 <__ssputs_r+0x7e>
 8004b12:	6825      	ldr	r5, [r4, #0]
 8004b14:	6909      	ldr	r1, [r1, #16]
 8004b16:	1a6f      	subs	r7, r5, r1
 8004b18:	6965      	ldr	r5, [r4, #20]
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b20:	fb95 f5f3 	sdiv	r5, r5, r3
 8004b24:	f109 0301 	add.w	r3, r9, #1
 8004b28:	443b      	add	r3, r7
 8004b2a:	429d      	cmp	r5, r3
 8004b2c:	bf38      	it	cc
 8004b2e:	461d      	movcc	r5, r3
 8004b30:	0553      	lsls	r3, r2, #21
 8004b32:	d530      	bpl.n	8004b96 <__ssputs_r+0x9e>
 8004b34:	4629      	mov	r1, r5
 8004b36:	f7ff ff0d 	bl	8004954 <_malloc_r>
 8004b3a:	4606      	mov	r6, r0
 8004b3c:	b950      	cbnz	r0, 8004b54 <__ssputs_r+0x5c>
 8004b3e:	230c      	movs	r3, #12
 8004b40:	f8ca 3000 	str.w	r3, [sl]
 8004b44:	89a3      	ldrh	r3, [r4, #12]
 8004b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b4a:	81a3      	strh	r3, [r4, #12]
 8004b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b54:	463a      	mov	r2, r7
 8004b56:	6921      	ldr	r1, [r4, #16]
 8004b58:	f000 ff54 	bl	8005a04 <memcpy>
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b66:	81a3      	strh	r3, [r4, #12]
 8004b68:	6126      	str	r6, [r4, #16]
 8004b6a:	6165      	str	r5, [r4, #20]
 8004b6c:	443e      	add	r6, r7
 8004b6e:	1bed      	subs	r5, r5, r7
 8004b70:	6026      	str	r6, [r4, #0]
 8004b72:	60a5      	str	r5, [r4, #8]
 8004b74:	464e      	mov	r6, r9
 8004b76:	454e      	cmp	r6, r9
 8004b78:	d900      	bls.n	8004b7c <__ssputs_r+0x84>
 8004b7a:	464e      	mov	r6, r9
 8004b7c:	4632      	mov	r2, r6
 8004b7e:	4641      	mov	r1, r8
 8004b80:	6820      	ldr	r0, [r4, #0]
 8004b82:	f000 ff4a 	bl	8005a1a <memmove>
 8004b86:	68a3      	ldr	r3, [r4, #8]
 8004b88:	1b9b      	subs	r3, r3, r6
 8004b8a:	60a3      	str	r3, [r4, #8]
 8004b8c:	6823      	ldr	r3, [r4, #0]
 8004b8e:	441e      	add	r6, r3
 8004b90:	6026      	str	r6, [r4, #0]
 8004b92:	2000      	movs	r0, #0
 8004b94:	e7dc      	b.n	8004b50 <__ssputs_r+0x58>
 8004b96:	462a      	mov	r2, r5
 8004b98:	f000 ff58 	bl	8005a4c <_realloc_r>
 8004b9c:	4606      	mov	r6, r0
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	d1e2      	bne.n	8004b68 <__ssputs_r+0x70>
 8004ba2:	6921      	ldr	r1, [r4, #16]
 8004ba4:	4650      	mov	r0, sl
 8004ba6:	f7ff fe87 	bl	80048b8 <_free_r>
 8004baa:	e7c8      	b.n	8004b3e <__ssputs_r+0x46>

08004bac <_svfiprintf_r>:
 8004bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb0:	461d      	mov	r5, r3
 8004bb2:	898b      	ldrh	r3, [r1, #12]
 8004bb4:	061f      	lsls	r7, r3, #24
 8004bb6:	b09d      	sub	sp, #116	; 0x74
 8004bb8:	4680      	mov	r8, r0
 8004bba:	460c      	mov	r4, r1
 8004bbc:	4616      	mov	r6, r2
 8004bbe:	d50f      	bpl.n	8004be0 <_svfiprintf_r+0x34>
 8004bc0:	690b      	ldr	r3, [r1, #16]
 8004bc2:	b96b      	cbnz	r3, 8004be0 <_svfiprintf_r+0x34>
 8004bc4:	2140      	movs	r1, #64	; 0x40
 8004bc6:	f7ff fec5 	bl	8004954 <_malloc_r>
 8004bca:	6020      	str	r0, [r4, #0]
 8004bcc:	6120      	str	r0, [r4, #16]
 8004bce:	b928      	cbnz	r0, 8004bdc <_svfiprintf_r+0x30>
 8004bd0:	230c      	movs	r3, #12
 8004bd2:	f8c8 3000 	str.w	r3, [r8]
 8004bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bda:	e0c8      	b.n	8004d6e <_svfiprintf_r+0x1c2>
 8004bdc:	2340      	movs	r3, #64	; 0x40
 8004bde:	6163      	str	r3, [r4, #20]
 8004be0:	2300      	movs	r3, #0
 8004be2:	9309      	str	r3, [sp, #36]	; 0x24
 8004be4:	2320      	movs	r3, #32
 8004be6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bea:	2330      	movs	r3, #48	; 0x30
 8004bec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bf0:	9503      	str	r5, [sp, #12]
 8004bf2:	f04f 0b01 	mov.w	fp, #1
 8004bf6:	4637      	mov	r7, r6
 8004bf8:	463d      	mov	r5, r7
 8004bfa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004bfe:	b10b      	cbz	r3, 8004c04 <_svfiprintf_r+0x58>
 8004c00:	2b25      	cmp	r3, #37	; 0x25
 8004c02:	d13e      	bne.n	8004c82 <_svfiprintf_r+0xd6>
 8004c04:	ebb7 0a06 	subs.w	sl, r7, r6
 8004c08:	d00b      	beq.n	8004c22 <_svfiprintf_r+0x76>
 8004c0a:	4653      	mov	r3, sl
 8004c0c:	4632      	mov	r2, r6
 8004c0e:	4621      	mov	r1, r4
 8004c10:	4640      	mov	r0, r8
 8004c12:	f7ff ff71 	bl	8004af8 <__ssputs_r>
 8004c16:	3001      	adds	r0, #1
 8004c18:	f000 80a4 	beq.w	8004d64 <_svfiprintf_r+0x1b8>
 8004c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c1e:	4453      	add	r3, sl
 8004c20:	9309      	str	r3, [sp, #36]	; 0x24
 8004c22:	783b      	ldrb	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 809d 	beq.w	8004d64 <_svfiprintf_r+0x1b8>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c34:	9304      	str	r3, [sp, #16]
 8004c36:	9307      	str	r3, [sp, #28]
 8004c38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c3c:	931a      	str	r3, [sp, #104]	; 0x68
 8004c3e:	462f      	mov	r7, r5
 8004c40:	2205      	movs	r2, #5
 8004c42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004c46:	4850      	ldr	r0, [pc, #320]	; (8004d88 <_svfiprintf_r+0x1dc>)
 8004c48:	f7fb faca 	bl	80001e0 <memchr>
 8004c4c:	9b04      	ldr	r3, [sp, #16]
 8004c4e:	b9d0      	cbnz	r0, 8004c86 <_svfiprintf_r+0xda>
 8004c50:	06d9      	lsls	r1, r3, #27
 8004c52:	bf44      	itt	mi
 8004c54:	2220      	movmi	r2, #32
 8004c56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c5a:	071a      	lsls	r2, r3, #28
 8004c5c:	bf44      	itt	mi
 8004c5e:	222b      	movmi	r2, #43	; 0x2b
 8004c60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004c64:	782a      	ldrb	r2, [r5, #0]
 8004c66:	2a2a      	cmp	r2, #42	; 0x2a
 8004c68:	d015      	beq.n	8004c96 <_svfiprintf_r+0xea>
 8004c6a:	9a07      	ldr	r2, [sp, #28]
 8004c6c:	462f      	mov	r7, r5
 8004c6e:	2000      	movs	r0, #0
 8004c70:	250a      	movs	r5, #10
 8004c72:	4639      	mov	r1, r7
 8004c74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c78:	3b30      	subs	r3, #48	; 0x30
 8004c7a:	2b09      	cmp	r3, #9
 8004c7c:	d94d      	bls.n	8004d1a <_svfiprintf_r+0x16e>
 8004c7e:	b1b8      	cbz	r0, 8004cb0 <_svfiprintf_r+0x104>
 8004c80:	e00f      	b.n	8004ca2 <_svfiprintf_r+0xf6>
 8004c82:	462f      	mov	r7, r5
 8004c84:	e7b8      	b.n	8004bf8 <_svfiprintf_r+0x4c>
 8004c86:	4a40      	ldr	r2, [pc, #256]	; (8004d88 <_svfiprintf_r+0x1dc>)
 8004c88:	1a80      	subs	r0, r0, r2
 8004c8a:	fa0b f000 	lsl.w	r0, fp, r0
 8004c8e:	4318      	orrs	r0, r3
 8004c90:	9004      	str	r0, [sp, #16]
 8004c92:	463d      	mov	r5, r7
 8004c94:	e7d3      	b.n	8004c3e <_svfiprintf_r+0x92>
 8004c96:	9a03      	ldr	r2, [sp, #12]
 8004c98:	1d11      	adds	r1, r2, #4
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	9103      	str	r1, [sp, #12]
 8004c9e:	2a00      	cmp	r2, #0
 8004ca0:	db01      	blt.n	8004ca6 <_svfiprintf_r+0xfa>
 8004ca2:	9207      	str	r2, [sp, #28]
 8004ca4:	e004      	b.n	8004cb0 <_svfiprintf_r+0x104>
 8004ca6:	4252      	negs	r2, r2
 8004ca8:	f043 0302 	orr.w	r3, r3, #2
 8004cac:	9207      	str	r2, [sp, #28]
 8004cae:	9304      	str	r3, [sp, #16]
 8004cb0:	783b      	ldrb	r3, [r7, #0]
 8004cb2:	2b2e      	cmp	r3, #46	; 0x2e
 8004cb4:	d10c      	bne.n	8004cd0 <_svfiprintf_r+0x124>
 8004cb6:	787b      	ldrb	r3, [r7, #1]
 8004cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8004cba:	d133      	bne.n	8004d24 <_svfiprintf_r+0x178>
 8004cbc:	9b03      	ldr	r3, [sp, #12]
 8004cbe:	1d1a      	adds	r2, r3, #4
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	9203      	str	r2, [sp, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	bfb8      	it	lt
 8004cc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ccc:	3702      	adds	r7, #2
 8004cce:	9305      	str	r3, [sp, #20]
 8004cd0:	4d2e      	ldr	r5, [pc, #184]	; (8004d8c <_svfiprintf_r+0x1e0>)
 8004cd2:	7839      	ldrb	r1, [r7, #0]
 8004cd4:	2203      	movs	r2, #3
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f7fb fa82 	bl	80001e0 <memchr>
 8004cdc:	b138      	cbz	r0, 8004cee <_svfiprintf_r+0x142>
 8004cde:	2340      	movs	r3, #64	; 0x40
 8004ce0:	1b40      	subs	r0, r0, r5
 8004ce2:	fa03 f000 	lsl.w	r0, r3, r0
 8004ce6:	9b04      	ldr	r3, [sp, #16]
 8004ce8:	4303      	orrs	r3, r0
 8004cea:	3701      	adds	r7, #1
 8004cec:	9304      	str	r3, [sp, #16]
 8004cee:	7839      	ldrb	r1, [r7, #0]
 8004cf0:	4827      	ldr	r0, [pc, #156]	; (8004d90 <_svfiprintf_r+0x1e4>)
 8004cf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cf6:	2206      	movs	r2, #6
 8004cf8:	1c7e      	adds	r6, r7, #1
 8004cfa:	f7fb fa71 	bl	80001e0 <memchr>
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	d038      	beq.n	8004d74 <_svfiprintf_r+0x1c8>
 8004d02:	4b24      	ldr	r3, [pc, #144]	; (8004d94 <_svfiprintf_r+0x1e8>)
 8004d04:	bb13      	cbnz	r3, 8004d4c <_svfiprintf_r+0x1a0>
 8004d06:	9b03      	ldr	r3, [sp, #12]
 8004d08:	3307      	adds	r3, #7
 8004d0a:	f023 0307 	bic.w	r3, r3, #7
 8004d0e:	3308      	adds	r3, #8
 8004d10:	9303      	str	r3, [sp, #12]
 8004d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d14:	444b      	add	r3, r9
 8004d16:	9309      	str	r3, [sp, #36]	; 0x24
 8004d18:	e76d      	b.n	8004bf6 <_svfiprintf_r+0x4a>
 8004d1a:	fb05 3202 	mla	r2, r5, r2, r3
 8004d1e:	2001      	movs	r0, #1
 8004d20:	460f      	mov	r7, r1
 8004d22:	e7a6      	b.n	8004c72 <_svfiprintf_r+0xc6>
 8004d24:	2300      	movs	r3, #0
 8004d26:	3701      	adds	r7, #1
 8004d28:	9305      	str	r3, [sp, #20]
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	250a      	movs	r5, #10
 8004d2e:	4638      	mov	r0, r7
 8004d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d34:	3a30      	subs	r2, #48	; 0x30
 8004d36:	2a09      	cmp	r2, #9
 8004d38:	d903      	bls.n	8004d42 <_svfiprintf_r+0x196>
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0c8      	beq.n	8004cd0 <_svfiprintf_r+0x124>
 8004d3e:	9105      	str	r1, [sp, #20]
 8004d40:	e7c6      	b.n	8004cd0 <_svfiprintf_r+0x124>
 8004d42:	fb05 2101 	mla	r1, r5, r1, r2
 8004d46:	2301      	movs	r3, #1
 8004d48:	4607      	mov	r7, r0
 8004d4a:	e7f0      	b.n	8004d2e <_svfiprintf_r+0x182>
 8004d4c:	ab03      	add	r3, sp, #12
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	4622      	mov	r2, r4
 8004d52:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <_svfiprintf_r+0x1ec>)
 8004d54:	a904      	add	r1, sp, #16
 8004d56:	4640      	mov	r0, r8
 8004d58:	f3af 8000 	nop.w
 8004d5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004d60:	4681      	mov	r9, r0
 8004d62:	d1d6      	bne.n	8004d12 <_svfiprintf_r+0x166>
 8004d64:	89a3      	ldrh	r3, [r4, #12]
 8004d66:	065b      	lsls	r3, r3, #25
 8004d68:	f53f af35 	bmi.w	8004bd6 <_svfiprintf_r+0x2a>
 8004d6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d6e:	b01d      	add	sp, #116	; 0x74
 8004d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d74:	ab03      	add	r3, sp, #12
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	4622      	mov	r2, r4
 8004d7a:	4b07      	ldr	r3, [pc, #28]	; (8004d98 <_svfiprintf_r+0x1ec>)
 8004d7c:	a904      	add	r1, sp, #16
 8004d7e:	4640      	mov	r0, r8
 8004d80:	f000 fa2c 	bl	80051dc <_printf_i>
 8004d84:	e7ea      	b.n	8004d5c <_svfiprintf_r+0x1b0>
 8004d86:	bf00      	nop
 8004d88:	08006430 	.word	0x08006430
 8004d8c:	08006436 	.word	0x08006436
 8004d90:	0800643a 	.word	0x0800643a
 8004d94:	00000000 	.word	0x00000000
 8004d98:	08004af9 	.word	0x08004af9

08004d9c <_sungetc_r>:
 8004d9c:	b538      	push	{r3, r4, r5, lr}
 8004d9e:	1c4b      	adds	r3, r1, #1
 8004da0:	4614      	mov	r4, r2
 8004da2:	d103      	bne.n	8004dac <_sungetc_r+0x10>
 8004da4:	f04f 35ff 	mov.w	r5, #4294967295
 8004da8:	4628      	mov	r0, r5
 8004daa:	bd38      	pop	{r3, r4, r5, pc}
 8004dac:	8993      	ldrh	r3, [r2, #12]
 8004dae:	f023 0320 	bic.w	r3, r3, #32
 8004db2:	8193      	strh	r3, [r2, #12]
 8004db4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004db6:	6852      	ldr	r2, [r2, #4]
 8004db8:	b2cd      	uxtb	r5, r1
 8004dba:	b18b      	cbz	r3, 8004de0 <_sungetc_r+0x44>
 8004dbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	dd08      	ble.n	8004dd4 <_sungetc_r+0x38>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	1e5a      	subs	r2, r3, #1
 8004dc6:	6022      	str	r2, [r4, #0]
 8004dc8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004dcc:	6863      	ldr	r3, [r4, #4]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	6063      	str	r3, [r4, #4]
 8004dd2:	e7e9      	b.n	8004da8 <_sungetc_r+0xc>
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	f000 fdb7 	bl	8005948 <__submore>
 8004dda:	2800      	cmp	r0, #0
 8004ddc:	d0f1      	beq.n	8004dc2 <_sungetc_r+0x26>
 8004dde:	e7e1      	b.n	8004da4 <_sungetc_r+0x8>
 8004de0:	6921      	ldr	r1, [r4, #16]
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	b151      	cbz	r1, 8004dfc <_sungetc_r+0x60>
 8004de6:	4299      	cmp	r1, r3
 8004de8:	d208      	bcs.n	8004dfc <_sungetc_r+0x60>
 8004dea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004dee:	42a9      	cmp	r1, r5
 8004df0:	d104      	bne.n	8004dfc <_sungetc_r+0x60>
 8004df2:	3b01      	subs	r3, #1
 8004df4:	3201      	adds	r2, #1
 8004df6:	6023      	str	r3, [r4, #0]
 8004df8:	6062      	str	r2, [r4, #4]
 8004dfa:	e7d5      	b.n	8004da8 <_sungetc_r+0xc>
 8004dfc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004e00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e04:	6363      	str	r3, [r4, #52]	; 0x34
 8004e06:	2303      	movs	r3, #3
 8004e08:	63a3      	str	r3, [r4, #56]	; 0x38
 8004e0a:	4623      	mov	r3, r4
 8004e0c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004e10:	6023      	str	r3, [r4, #0]
 8004e12:	2301      	movs	r3, #1
 8004e14:	e7dc      	b.n	8004dd0 <_sungetc_r+0x34>

08004e16 <__ssrefill_r>:
 8004e16:	b510      	push	{r4, lr}
 8004e18:	460c      	mov	r4, r1
 8004e1a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004e1c:	b169      	cbz	r1, 8004e3a <__ssrefill_r+0x24>
 8004e1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e22:	4299      	cmp	r1, r3
 8004e24:	d001      	beq.n	8004e2a <__ssrefill_r+0x14>
 8004e26:	f7ff fd47 	bl	80048b8 <_free_r>
 8004e2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e2c:	6063      	str	r3, [r4, #4]
 8004e2e:	2000      	movs	r0, #0
 8004e30:	6360      	str	r0, [r4, #52]	; 0x34
 8004e32:	b113      	cbz	r3, 8004e3a <__ssrefill_r+0x24>
 8004e34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e36:	6023      	str	r3, [r4, #0]
 8004e38:	bd10      	pop	{r4, pc}
 8004e3a:	6923      	ldr	r3, [r4, #16]
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	6063      	str	r3, [r4, #4]
 8004e42:	89a3      	ldrh	r3, [r4, #12]
 8004e44:	f043 0320 	orr.w	r3, r3, #32
 8004e48:	81a3      	strh	r3, [r4, #12]
 8004e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e4e:	e7f3      	b.n	8004e38 <__ssrefill_r+0x22>

08004e50 <__ssvfiscanf_r>:
 8004e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e54:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8004e58:	460c      	mov	r4, r1
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	9144      	str	r1, [sp, #272]	; 0x110
 8004e5e:	9145      	str	r1, [sp, #276]	; 0x114
 8004e60:	499f      	ldr	r1, [pc, #636]	; (80050e0 <__ssvfiscanf_r+0x290>)
 8004e62:	91a0      	str	r1, [sp, #640]	; 0x280
 8004e64:	f10d 0804 	add.w	r8, sp, #4
 8004e68:	499e      	ldr	r1, [pc, #632]	; (80050e4 <__ssvfiscanf_r+0x294>)
 8004e6a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80050e8 <__ssvfiscanf_r+0x298>
 8004e6e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004e72:	4606      	mov	r6, r0
 8004e74:	4692      	mov	sl, r2
 8004e76:	91a1      	str	r1, [sp, #644]	; 0x284
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	270a      	movs	r7, #10
 8004e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 812a 	beq.w	80050da <__ssvfiscanf_r+0x28a>
 8004e86:	4655      	mov	r5, sl
 8004e88:	f000 fd9c 	bl	80059c4 <__locale_ctype_ptr>
 8004e8c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8004e90:	4458      	add	r0, fp
 8004e92:	7843      	ldrb	r3, [r0, #1]
 8004e94:	f013 0308 	ands.w	r3, r3, #8
 8004e98:	d01c      	beq.n	8004ed4 <__ssvfiscanf_r+0x84>
 8004e9a:	6863      	ldr	r3, [r4, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	dd12      	ble.n	8004ec6 <__ssvfiscanf_r+0x76>
 8004ea0:	f000 fd90 	bl	80059c4 <__locale_ctype_ptr>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	781a      	ldrb	r2, [r3, #0]
 8004ea8:	4410      	add	r0, r2
 8004eaa:	7842      	ldrb	r2, [r0, #1]
 8004eac:	0712      	lsls	r2, r2, #28
 8004eae:	d401      	bmi.n	8004eb4 <__ssvfiscanf_r+0x64>
 8004eb0:	46aa      	mov	sl, r5
 8004eb2:	e7e3      	b.n	8004e7c <__ssvfiscanf_r+0x2c>
 8004eb4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004eb6:	3201      	adds	r2, #1
 8004eb8:	9245      	str	r2, [sp, #276]	; 0x114
 8004eba:	6862      	ldr	r2, [r4, #4]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	3a01      	subs	r2, #1
 8004ec0:	6062      	str	r2, [r4, #4]
 8004ec2:	6023      	str	r3, [r4, #0]
 8004ec4:	e7e9      	b.n	8004e9a <__ssvfiscanf_r+0x4a>
 8004ec6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004ec8:	4621      	mov	r1, r4
 8004eca:	4630      	mov	r0, r6
 8004ecc:	4798      	blx	r3
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	d0e6      	beq.n	8004ea0 <__ssvfiscanf_r+0x50>
 8004ed2:	e7ed      	b.n	8004eb0 <__ssvfiscanf_r+0x60>
 8004ed4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8004ed8:	f040 8082 	bne.w	8004fe0 <__ssvfiscanf_r+0x190>
 8004edc:	9343      	str	r3, [sp, #268]	; 0x10c
 8004ede:	9341      	str	r3, [sp, #260]	; 0x104
 8004ee0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8004ee4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ee6:	d103      	bne.n	8004ef0 <__ssvfiscanf_r+0xa0>
 8004ee8:	2310      	movs	r3, #16
 8004eea:	9341      	str	r3, [sp, #260]	; 0x104
 8004eec:	f10a 0502 	add.w	r5, sl, #2
 8004ef0:	46aa      	mov	sl, r5
 8004ef2:	f815 1b01 	ldrb.w	r1, [r5], #1
 8004ef6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004efa:	2a09      	cmp	r2, #9
 8004efc:	d922      	bls.n	8004f44 <__ssvfiscanf_r+0xf4>
 8004efe:	2203      	movs	r2, #3
 8004f00:	4879      	ldr	r0, [pc, #484]	; (80050e8 <__ssvfiscanf_r+0x298>)
 8004f02:	f7fb f96d 	bl	80001e0 <memchr>
 8004f06:	b138      	cbz	r0, 8004f18 <__ssvfiscanf_r+0xc8>
 8004f08:	eba0 0309 	sub.w	r3, r0, r9
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	4098      	lsls	r0, r3
 8004f10:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004f12:	4318      	orrs	r0, r3
 8004f14:	9041      	str	r0, [sp, #260]	; 0x104
 8004f16:	46aa      	mov	sl, r5
 8004f18:	f89a 3000 	ldrb.w	r3, [sl]
 8004f1c:	2b67      	cmp	r3, #103	; 0x67
 8004f1e:	f10a 0501 	add.w	r5, sl, #1
 8004f22:	d82b      	bhi.n	8004f7c <__ssvfiscanf_r+0x12c>
 8004f24:	2b65      	cmp	r3, #101	; 0x65
 8004f26:	f080 809f 	bcs.w	8005068 <__ssvfiscanf_r+0x218>
 8004f2a:	2b47      	cmp	r3, #71	; 0x47
 8004f2c:	d810      	bhi.n	8004f50 <__ssvfiscanf_r+0x100>
 8004f2e:	2b45      	cmp	r3, #69	; 0x45
 8004f30:	f080 809a 	bcs.w	8005068 <__ssvfiscanf_r+0x218>
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d06c      	beq.n	8005012 <__ssvfiscanf_r+0x1c2>
 8004f38:	2b25      	cmp	r3, #37	; 0x25
 8004f3a:	d051      	beq.n	8004fe0 <__ssvfiscanf_r+0x190>
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	9347      	str	r3, [sp, #284]	; 0x11c
 8004f40:	9742      	str	r7, [sp, #264]	; 0x108
 8004f42:	e027      	b.n	8004f94 <__ssvfiscanf_r+0x144>
 8004f44:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8004f46:	fb07 1303 	mla	r3, r7, r3, r1
 8004f4a:	3b30      	subs	r3, #48	; 0x30
 8004f4c:	9343      	str	r3, [sp, #268]	; 0x10c
 8004f4e:	e7cf      	b.n	8004ef0 <__ssvfiscanf_r+0xa0>
 8004f50:	2b5b      	cmp	r3, #91	; 0x5b
 8004f52:	d06a      	beq.n	800502a <__ssvfiscanf_r+0x1da>
 8004f54:	d80c      	bhi.n	8004f70 <__ssvfiscanf_r+0x120>
 8004f56:	2b58      	cmp	r3, #88	; 0x58
 8004f58:	d1f0      	bne.n	8004f3c <__ssvfiscanf_r+0xec>
 8004f5a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f60:	9241      	str	r2, [sp, #260]	; 0x104
 8004f62:	2210      	movs	r2, #16
 8004f64:	9242      	str	r2, [sp, #264]	; 0x108
 8004f66:	2b6e      	cmp	r3, #110	; 0x6e
 8004f68:	bf8c      	ite	hi
 8004f6a:	2304      	movhi	r3, #4
 8004f6c:	2303      	movls	r3, #3
 8004f6e:	e010      	b.n	8004f92 <__ssvfiscanf_r+0x142>
 8004f70:	2b63      	cmp	r3, #99	; 0x63
 8004f72:	d065      	beq.n	8005040 <__ssvfiscanf_r+0x1f0>
 8004f74:	2b64      	cmp	r3, #100	; 0x64
 8004f76:	d1e1      	bne.n	8004f3c <__ssvfiscanf_r+0xec>
 8004f78:	9742      	str	r7, [sp, #264]	; 0x108
 8004f7a:	e7f4      	b.n	8004f66 <__ssvfiscanf_r+0x116>
 8004f7c:	2b70      	cmp	r3, #112	; 0x70
 8004f7e:	d04b      	beq.n	8005018 <__ssvfiscanf_r+0x1c8>
 8004f80:	d826      	bhi.n	8004fd0 <__ssvfiscanf_r+0x180>
 8004f82:	2b6e      	cmp	r3, #110	; 0x6e
 8004f84:	d062      	beq.n	800504c <__ssvfiscanf_r+0x1fc>
 8004f86:	d84c      	bhi.n	8005022 <__ssvfiscanf_r+0x1d2>
 8004f88:	2b69      	cmp	r3, #105	; 0x69
 8004f8a:	d1d7      	bne.n	8004f3c <__ssvfiscanf_r+0xec>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	9342      	str	r3, [sp, #264]	; 0x108
 8004f90:	2303      	movs	r3, #3
 8004f92:	9347      	str	r3, [sp, #284]	; 0x11c
 8004f94:	6863      	ldr	r3, [r4, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	dd68      	ble.n	800506c <__ssvfiscanf_r+0x21c>
 8004f9a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004f9c:	0659      	lsls	r1, r3, #25
 8004f9e:	d407      	bmi.n	8004fb0 <__ssvfiscanf_r+0x160>
 8004fa0:	f000 fd10 	bl	80059c4 <__locale_ctype_ptr>
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	781a      	ldrb	r2, [r3, #0]
 8004fa8:	4410      	add	r0, r2
 8004faa:	7842      	ldrb	r2, [r0, #1]
 8004fac:	0712      	lsls	r2, r2, #28
 8004fae:	d464      	bmi.n	800507a <__ssvfiscanf_r+0x22a>
 8004fb0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	dc73      	bgt.n	800509e <__ssvfiscanf_r+0x24e>
 8004fb6:	466b      	mov	r3, sp
 8004fb8:	4622      	mov	r2, r4
 8004fba:	a941      	add	r1, sp, #260	; 0x104
 8004fbc:	4630      	mov	r0, r6
 8004fbe:	f000 fa1f 	bl	8005400 <_scanf_chars>
 8004fc2:	2801      	cmp	r0, #1
 8004fc4:	f000 8089 	beq.w	80050da <__ssvfiscanf_r+0x28a>
 8004fc8:	2802      	cmp	r0, #2
 8004fca:	f47f af71 	bne.w	8004eb0 <__ssvfiscanf_r+0x60>
 8004fce:	e01d      	b.n	800500c <__ssvfiscanf_r+0x1bc>
 8004fd0:	2b75      	cmp	r3, #117	; 0x75
 8004fd2:	d0d1      	beq.n	8004f78 <__ssvfiscanf_r+0x128>
 8004fd4:	2b78      	cmp	r3, #120	; 0x78
 8004fd6:	d0c0      	beq.n	8004f5a <__ssvfiscanf_r+0x10a>
 8004fd8:	2b73      	cmp	r3, #115	; 0x73
 8004fda:	d1af      	bne.n	8004f3c <__ssvfiscanf_r+0xec>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e7d8      	b.n	8004f92 <__ssvfiscanf_r+0x142>
 8004fe0:	6863      	ldr	r3, [r4, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	dd0c      	ble.n	8005000 <__ssvfiscanf_r+0x1b0>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	781a      	ldrb	r2, [r3, #0]
 8004fea:	455a      	cmp	r2, fp
 8004fec:	d175      	bne.n	80050da <__ssvfiscanf_r+0x28a>
 8004fee:	3301      	adds	r3, #1
 8004ff0:	6862      	ldr	r2, [r4, #4]
 8004ff2:	6023      	str	r3, [r4, #0]
 8004ff4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004ff6:	3a01      	subs	r2, #1
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	6062      	str	r2, [r4, #4]
 8004ffc:	9345      	str	r3, [sp, #276]	; 0x114
 8004ffe:	e757      	b.n	8004eb0 <__ssvfiscanf_r+0x60>
 8005000:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005002:	4621      	mov	r1, r4
 8005004:	4630      	mov	r0, r6
 8005006:	4798      	blx	r3
 8005008:	2800      	cmp	r0, #0
 800500a:	d0ec      	beq.n	8004fe6 <__ssvfiscanf_r+0x196>
 800500c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800500e:	2800      	cmp	r0, #0
 8005010:	d159      	bne.n	80050c6 <__ssvfiscanf_r+0x276>
 8005012:	f04f 30ff 	mov.w	r0, #4294967295
 8005016:	e05c      	b.n	80050d2 <__ssvfiscanf_r+0x282>
 8005018:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800501a:	f042 0220 	orr.w	r2, r2, #32
 800501e:	9241      	str	r2, [sp, #260]	; 0x104
 8005020:	e79b      	b.n	8004f5a <__ssvfiscanf_r+0x10a>
 8005022:	2308      	movs	r3, #8
 8005024:	9342      	str	r3, [sp, #264]	; 0x108
 8005026:	2304      	movs	r3, #4
 8005028:	e7b3      	b.n	8004f92 <__ssvfiscanf_r+0x142>
 800502a:	4629      	mov	r1, r5
 800502c:	4640      	mov	r0, r8
 800502e:	f000 fb3f 	bl	80056b0 <__sccl>
 8005032:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005038:	9341      	str	r3, [sp, #260]	; 0x104
 800503a:	4605      	mov	r5, r0
 800503c:	2301      	movs	r3, #1
 800503e:	e7a8      	b.n	8004f92 <__ssvfiscanf_r+0x142>
 8005040:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005046:	9341      	str	r3, [sp, #260]	; 0x104
 8005048:	2300      	movs	r3, #0
 800504a:	e7a2      	b.n	8004f92 <__ssvfiscanf_r+0x142>
 800504c:	9841      	ldr	r0, [sp, #260]	; 0x104
 800504e:	06c3      	lsls	r3, r0, #27
 8005050:	f53f af2e 	bmi.w	8004eb0 <__ssvfiscanf_r+0x60>
 8005054:	9b00      	ldr	r3, [sp, #0]
 8005056:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005058:	1d19      	adds	r1, r3, #4
 800505a:	9100      	str	r1, [sp, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	07c0      	lsls	r0, r0, #31
 8005060:	bf4c      	ite	mi
 8005062:	801a      	strhmi	r2, [r3, #0]
 8005064:	601a      	strpl	r2, [r3, #0]
 8005066:	e723      	b.n	8004eb0 <__ssvfiscanf_r+0x60>
 8005068:	2305      	movs	r3, #5
 800506a:	e792      	b.n	8004f92 <__ssvfiscanf_r+0x142>
 800506c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800506e:	4621      	mov	r1, r4
 8005070:	4630      	mov	r0, r6
 8005072:	4798      	blx	r3
 8005074:	2800      	cmp	r0, #0
 8005076:	d090      	beq.n	8004f9a <__ssvfiscanf_r+0x14a>
 8005078:	e7c8      	b.n	800500c <__ssvfiscanf_r+0x1bc>
 800507a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800507c:	3201      	adds	r2, #1
 800507e:	9245      	str	r2, [sp, #276]	; 0x114
 8005080:	6862      	ldr	r2, [r4, #4]
 8005082:	3a01      	subs	r2, #1
 8005084:	2a00      	cmp	r2, #0
 8005086:	6062      	str	r2, [r4, #4]
 8005088:	dd02      	ble.n	8005090 <__ssvfiscanf_r+0x240>
 800508a:	3301      	adds	r3, #1
 800508c:	6023      	str	r3, [r4, #0]
 800508e:	e787      	b.n	8004fa0 <__ssvfiscanf_r+0x150>
 8005090:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005092:	4621      	mov	r1, r4
 8005094:	4630      	mov	r0, r6
 8005096:	4798      	blx	r3
 8005098:	2800      	cmp	r0, #0
 800509a:	d081      	beq.n	8004fa0 <__ssvfiscanf_r+0x150>
 800509c:	e7b6      	b.n	800500c <__ssvfiscanf_r+0x1bc>
 800509e:	2b04      	cmp	r3, #4
 80050a0:	dc06      	bgt.n	80050b0 <__ssvfiscanf_r+0x260>
 80050a2:	466b      	mov	r3, sp
 80050a4:	4622      	mov	r2, r4
 80050a6:	a941      	add	r1, sp, #260	; 0x104
 80050a8:	4630      	mov	r0, r6
 80050aa:	f000 fa0d 	bl	80054c8 <_scanf_i>
 80050ae:	e788      	b.n	8004fc2 <__ssvfiscanf_r+0x172>
 80050b0:	4b0e      	ldr	r3, [pc, #56]	; (80050ec <__ssvfiscanf_r+0x29c>)
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f43f aefc 	beq.w	8004eb0 <__ssvfiscanf_r+0x60>
 80050b8:	466b      	mov	r3, sp
 80050ba:	4622      	mov	r2, r4
 80050bc:	a941      	add	r1, sp, #260	; 0x104
 80050be:	4630      	mov	r0, r6
 80050c0:	f3af 8000 	nop.w
 80050c4:	e77d      	b.n	8004fc2 <__ssvfiscanf_r+0x172>
 80050c6:	89a3      	ldrh	r3, [r4, #12]
 80050c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80050cc:	bf18      	it	ne
 80050ce:	f04f 30ff 	movne.w	r0, #4294967295
 80050d2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80050d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050da:	9844      	ldr	r0, [sp, #272]	; 0x110
 80050dc:	e7f9      	b.n	80050d2 <__ssvfiscanf_r+0x282>
 80050de:	bf00      	nop
 80050e0:	08004d9d 	.word	0x08004d9d
 80050e4:	08004e17 	.word	0x08004e17
 80050e8:	08006436 	.word	0x08006436
 80050ec:	00000000 	.word	0x00000000

080050f0 <_printf_common>:
 80050f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050f4:	4691      	mov	r9, r2
 80050f6:	461f      	mov	r7, r3
 80050f8:	688a      	ldr	r2, [r1, #8]
 80050fa:	690b      	ldr	r3, [r1, #16]
 80050fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005100:	4293      	cmp	r3, r2
 8005102:	bfb8      	it	lt
 8005104:	4613      	movlt	r3, r2
 8005106:	f8c9 3000 	str.w	r3, [r9]
 800510a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800510e:	4606      	mov	r6, r0
 8005110:	460c      	mov	r4, r1
 8005112:	b112      	cbz	r2, 800511a <_printf_common+0x2a>
 8005114:	3301      	adds	r3, #1
 8005116:	f8c9 3000 	str.w	r3, [r9]
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	0699      	lsls	r1, r3, #26
 800511e:	bf42      	ittt	mi
 8005120:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005124:	3302      	addmi	r3, #2
 8005126:	f8c9 3000 	strmi.w	r3, [r9]
 800512a:	6825      	ldr	r5, [r4, #0]
 800512c:	f015 0506 	ands.w	r5, r5, #6
 8005130:	d107      	bne.n	8005142 <_printf_common+0x52>
 8005132:	f104 0a19 	add.w	sl, r4, #25
 8005136:	68e3      	ldr	r3, [r4, #12]
 8005138:	f8d9 2000 	ldr.w	r2, [r9]
 800513c:	1a9b      	subs	r3, r3, r2
 800513e:	42ab      	cmp	r3, r5
 8005140:	dc28      	bgt.n	8005194 <_printf_common+0xa4>
 8005142:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005146:	6822      	ldr	r2, [r4, #0]
 8005148:	3300      	adds	r3, #0
 800514a:	bf18      	it	ne
 800514c:	2301      	movne	r3, #1
 800514e:	0692      	lsls	r2, r2, #26
 8005150:	d42d      	bmi.n	80051ae <_printf_common+0xbe>
 8005152:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005156:	4639      	mov	r1, r7
 8005158:	4630      	mov	r0, r6
 800515a:	47c0      	blx	r8
 800515c:	3001      	adds	r0, #1
 800515e:	d020      	beq.n	80051a2 <_printf_common+0xb2>
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	68e5      	ldr	r5, [r4, #12]
 8005164:	f8d9 2000 	ldr.w	r2, [r9]
 8005168:	f003 0306 	and.w	r3, r3, #6
 800516c:	2b04      	cmp	r3, #4
 800516e:	bf08      	it	eq
 8005170:	1aad      	subeq	r5, r5, r2
 8005172:	68a3      	ldr	r3, [r4, #8]
 8005174:	6922      	ldr	r2, [r4, #16]
 8005176:	bf0c      	ite	eq
 8005178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800517c:	2500      	movne	r5, #0
 800517e:	4293      	cmp	r3, r2
 8005180:	bfc4      	itt	gt
 8005182:	1a9b      	subgt	r3, r3, r2
 8005184:	18ed      	addgt	r5, r5, r3
 8005186:	f04f 0900 	mov.w	r9, #0
 800518a:	341a      	adds	r4, #26
 800518c:	454d      	cmp	r5, r9
 800518e:	d11a      	bne.n	80051c6 <_printf_common+0xd6>
 8005190:	2000      	movs	r0, #0
 8005192:	e008      	b.n	80051a6 <_printf_common+0xb6>
 8005194:	2301      	movs	r3, #1
 8005196:	4652      	mov	r2, sl
 8005198:	4639      	mov	r1, r7
 800519a:	4630      	mov	r0, r6
 800519c:	47c0      	blx	r8
 800519e:	3001      	adds	r0, #1
 80051a0:	d103      	bne.n	80051aa <_printf_common+0xba>
 80051a2:	f04f 30ff 	mov.w	r0, #4294967295
 80051a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051aa:	3501      	adds	r5, #1
 80051ac:	e7c3      	b.n	8005136 <_printf_common+0x46>
 80051ae:	18e1      	adds	r1, r4, r3
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	2030      	movs	r0, #48	; 0x30
 80051b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051b8:	4422      	add	r2, r4
 80051ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051c2:	3302      	adds	r3, #2
 80051c4:	e7c5      	b.n	8005152 <_printf_common+0x62>
 80051c6:	2301      	movs	r3, #1
 80051c8:	4622      	mov	r2, r4
 80051ca:	4639      	mov	r1, r7
 80051cc:	4630      	mov	r0, r6
 80051ce:	47c0      	blx	r8
 80051d0:	3001      	adds	r0, #1
 80051d2:	d0e6      	beq.n	80051a2 <_printf_common+0xb2>
 80051d4:	f109 0901 	add.w	r9, r9, #1
 80051d8:	e7d8      	b.n	800518c <_printf_common+0x9c>
	...

080051dc <_printf_i>:
 80051dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80051e4:	460c      	mov	r4, r1
 80051e6:	7e09      	ldrb	r1, [r1, #24]
 80051e8:	b085      	sub	sp, #20
 80051ea:	296e      	cmp	r1, #110	; 0x6e
 80051ec:	4617      	mov	r7, r2
 80051ee:	4606      	mov	r6, r0
 80051f0:	4698      	mov	r8, r3
 80051f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051f4:	f000 80b3 	beq.w	800535e <_printf_i+0x182>
 80051f8:	d822      	bhi.n	8005240 <_printf_i+0x64>
 80051fa:	2963      	cmp	r1, #99	; 0x63
 80051fc:	d036      	beq.n	800526c <_printf_i+0x90>
 80051fe:	d80a      	bhi.n	8005216 <_printf_i+0x3a>
 8005200:	2900      	cmp	r1, #0
 8005202:	f000 80b9 	beq.w	8005378 <_printf_i+0x19c>
 8005206:	2958      	cmp	r1, #88	; 0x58
 8005208:	f000 8083 	beq.w	8005312 <_printf_i+0x136>
 800520c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005210:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005214:	e032      	b.n	800527c <_printf_i+0xa0>
 8005216:	2964      	cmp	r1, #100	; 0x64
 8005218:	d001      	beq.n	800521e <_printf_i+0x42>
 800521a:	2969      	cmp	r1, #105	; 0x69
 800521c:	d1f6      	bne.n	800520c <_printf_i+0x30>
 800521e:	6820      	ldr	r0, [r4, #0]
 8005220:	6813      	ldr	r3, [r2, #0]
 8005222:	0605      	lsls	r5, r0, #24
 8005224:	f103 0104 	add.w	r1, r3, #4
 8005228:	d52a      	bpl.n	8005280 <_printf_i+0xa4>
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6011      	str	r1, [r2, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	da03      	bge.n	800523a <_printf_i+0x5e>
 8005232:	222d      	movs	r2, #45	; 0x2d
 8005234:	425b      	negs	r3, r3
 8005236:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800523a:	486f      	ldr	r0, [pc, #444]	; (80053f8 <_printf_i+0x21c>)
 800523c:	220a      	movs	r2, #10
 800523e:	e039      	b.n	80052b4 <_printf_i+0xd8>
 8005240:	2973      	cmp	r1, #115	; 0x73
 8005242:	f000 809d 	beq.w	8005380 <_printf_i+0x1a4>
 8005246:	d808      	bhi.n	800525a <_printf_i+0x7e>
 8005248:	296f      	cmp	r1, #111	; 0x6f
 800524a:	d020      	beq.n	800528e <_printf_i+0xb2>
 800524c:	2970      	cmp	r1, #112	; 0x70
 800524e:	d1dd      	bne.n	800520c <_printf_i+0x30>
 8005250:	6823      	ldr	r3, [r4, #0]
 8005252:	f043 0320 	orr.w	r3, r3, #32
 8005256:	6023      	str	r3, [r4, #0]
 8005258:	e003      	b.n	8005262 <_printf_i+0x86>
 800525a:	2975      	cmp	r1, #117	; 0x75
 800525c:	d017      	beq.n	800528e <_printf_i+0xb2>
 800525e:	2978      	cmp	r1, #120	; 0x78
 8005260:	d1d4      	bne.n	800520c <_printf_i+0x30>
 8005262:	2378      	movs	r3, #120	; 0x78
 8005264:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005268:	4864      	ldr	r0, [pc, #400]	; (80053fc <_printf_i+0x220>)
 800526a:	e055      	b.n	8005318 <_printf_i+0x13c>
 800526c:	6813      	ldr	r3, [r2, #0]
 800526e:	1d19      	adds	r1, r3, #4
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6011      	str	r1, [r2, #0]
 8005274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005278:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800527c:	2301      	movs	r3, #1
 800527e:	e08c      	b.n	800539a <_printf_i+0x1be>
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6011      	str	r1, [r2, #0]
 8005284:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005288:	bf18      	it	ne
 800528a:	b21b      	sxthne	r3, r3
 800528c:	e7cf      	b.n	800522e <_printf_i+0x52>
 800528e:	6813      	ldr	r3, [r2, #0]
 8005290:	6825      	ldr	r5, [r4, #0]
 8005292:	1d18      	adds	r0, r3, #4
 8005294:	6010      	str	r0, [r2, #0]
 8005296:	0628      	lsls	r0, r5, #24
 8005298:	d501      	bpl.n	800529e <_printf_i+0xc2>
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	e002      	b.n	80052a4 <_printf_i+0xc8>
 800529e:	0668      	lsls	r0, r5, #25
 80052a0:	d5fb      	bpl.n	800529a <_printf_i+0xbe>
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	4854      	ldr	r0, [pc, #336]	; (80053f8 <_printf_i+0x21c>)
 80052a6:	296f      	cmp	r1, #111	; 0x6f
 80052a8:	bf14      	ite	ne
 80052aa:	220a      	movne	r2, #10
 80052ac:	2208      	moveq	r2, #8
 80052ae:	2100      	movs	r1, #0
 80052b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052b4:	6865      	ldr	r5, [r4, #4]
 80052b6:	60a5      	str	r5, [r4, #8]
 80052b8:	2d00      	cmp	r5, #0
 80052ba:	f2c0 8095 	blt.w	80053e8 <_printf_i+0x20c>
 80052be:	6821      	ldr	r1, [r4, #0]
 80052c0:	f021 0104 	bic.w	r1, r1, #4
 80052c4:	6021      	str	r1, [r4, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d13d      	bne.n	8005346 <_printf_i+0x16a>
 80052ca:	2d00      	cmp	r5, #0
 80052cc:	f040 808e 	bne.w	80053ec <_printf_i+0x210>
 80052d0:	4665      	mov	r5, ip
 80052d2:	2a08      	cmp	r2, #8
 80052d4:	d10b      	bne.n	80052ee <_printf_i+0x112>
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	07db      	lsls	r3, r3, #31
 80052da:	d508      	bpl.n	80052ee <_printf_i+0x112>
 80052dc:	6923      	ldr	r3, [r4, #16]
 80052de:	6862      	ldr	r2, [r4, #4]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	bfde      	ittt	le
 80052e4:	2330      	movle	r3, #48	; 0x30
 80052e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052ee:	ebac 0305 	sub.w	r3, ip, r5
 80052f2:	6123      	str	r3, [r4, #16]
 80052f4:	f8cd 8000 	str.w	r8, [sp]
 80052f8:	463b      	mov	r3, r7
 80052fa:	aa03      	add	r2, sp, #12
 80052fc:	4621      	mov	r1, r4
 80052fe:	4630      	mov	r0, r6
 8005300:	f7ff fef6 	bl	80050f0 <_printf_common>
 8005304:	3001      	adds	r0, #1
 8005306:	d14d      	bne.n	80053a4 <_printf_i+0x1c8>
 8005308:	f04f 30ff 	mov.w	r0, #4294967295
 800530c:	b005      	add	sp, #20
 800530e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005312:	4839      	ldr	r0, [pc, #228]	; (80053f8 <_printf_i+0x21c>)
 8005314:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005318:	6813      	ldr	r3, [r2, #0]
 800531a:	6821      	ldr	r1, [r4, #0]
 800531c:	1d1d      	adds	r5, r3, #4
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6015      	str	r5, [r2, #0]
 8005322:	060a      	lsls	r2, r1, #24
 8005324:	d50b      	bpl.n	800533e <_printf_i+0x162>
 8005326:	07ca      	lsls	r2, r1, #31
 8005328:	bf44      	itt	mi
 800532a:	f041 0120 	orrmi.w	r1, r1, #32
 800532e:	6021      	strmi	r1, [r4, #0]
 8005330:	b91b      	cbnz	r3, 800533a <_printf_i+0x15e>
 8005332:	6822      	ldr	r2, [r4, #0]
 8005334:	f022 0220 	bic.w	r2, r2, #32
 8005338:	6022      	str	r2, [r4, #0]
 800533a:	2210      	movs	r2, #16
 800533c:	e7b7      	b.n	80052ae <_printf_i+0xd2>
 800533e:	064d      	lsls	r5, r1, #25
 8005340:	bf48      	it	mi
 8005342:	b29b      	uxthmi	r3, r3
 8005344:	e7ef      	b.n	8005326 <_printf_i+0x14a>
 8005346:	4665      	mov	r5, ip
 8005348:	fbb3 f1f2 	udiv	r1, r3, r2
 800534c:	fb02 3311 	mls	r3, r2, r1, r3
 8005350:	5cc3      	ldrb	r3, [r0, r3]
 8005352:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005356:	460b      	mov	r3, r1
 8005358:	2900      	cmp	r1, #0
 800535a:	d1f5      	bne.n	8005348 <_printf_i+0x16c>
 800535c:	e7b9      	b.n	80052d2 <_printf_i+0xf6>
 800535e:	6813      	ldr	r3, [r2, #0]
 8005360:	6825      	ldr	r5, [r4, #0]
 8005362:	6961      	ldr	r1, [r4, #20]
 8005364:	1d18      	adds	r0, r3, #4
 8005366:	6010      	str	r0, [r2, #0]
 8005368:	0628      	lsls	r0, r5, #24
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	d501      	bpl.n	8005372 <_printf_i+0x196>
 800536e:	6019      	str	r1, [r3, #0]
 8005370:	e002      	b.n	8005378 <_printf_i+0x19c>
 8005372:	066a      	lsls	r2, r5, #25
 8005374:	d5fb      	bpl.n	800536e <_printf_i+0x192>
 8005376:	8019      	strh	r1, [r3, #0]
 8005378:	2300      	movs	r3, #0
 800537a:	6123      	str	r3, [r4, #16]
 800537c:	4665      	mov	r5, ip
 800537e:	e7b9      	b.n	80052f4 <_printf_i+0x118>
 8005380:	6813      	ldr	r3, [r2, #0]
 8005382:	1d19      	adds	r1, r3, #4
 8005384:	6011      	str	r1, [r2, #0]
 8005386:	681d      	ldr	r5, [r3, #0]
 8005388:	6862      	ldr	r2, [r4, #4]
 800538a:	2100      	movs	r1, #0
 800538c:	4628      	mov	r0, r5
 800538e:	f7fa ff27 	bl	80001e0 <memchr>
 8005392:	b108      	cbz	r0, 8005398 <_printf_i+0x1bc>
 8005394:	1b40      	subs	r0, r0, r5
 8005396:	6060      	str	r0, [r4, #4]
 8005398:	6863      	ldr	r3, [r4, #4]
 800539a:	6123      	str	r3, [r4, #16]
 800539c:	2300      	movs	r3, #0
 800539e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053a2:	e7a7      	b.n	80052f4 <_printf_i+0x118>
 80053a4:	6923      	ldr	r3, [r4, #16]
 80053a6:	462a      	mov	r2, r5
 80053a8:	4639      	mov	r1, r7
 80053aa:	4630      	mov	r0, r6
 80053ac:	47c0      	blx	r8
 80053ae:	3001      	adds	r0, #1
 80053b0:	d0aa      	beq.n	8005308 <_printf_i+0x12c>
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	079b      	lsls	r3, r3, #30
 80053b6:	d413      	bmi.n	80053e0 <_printf_i+0x204>
 80053b8:	68e0      	ldr	r0, [r4, #12]
 80053ba:	9b03      	ldr	r3, [sp, #12]
 80053bc:	4298      	cmp	r0, r3
 80053be:	bfb8      	it	lt
 80053c0:	4618      	movlt	r0, r3
 80053c2:	e7a3      	b.n	800530c <_printf_i+0x130>
 80053c4:	2301      	movs	r3, #1
 80053c6:	464a      	mov	r2, r9
 80053c8:	4639      	mov	r1, r7
 80053ca:	4630      	mov	r0, r6
 80053cc:	47c0      	blx	r8
 80053ce:	3001      	adds	r0, #1
 80053d0:	d09a      	beq.n	8005308 <_printf_i+0x12c>
 80053d2:	3501      	adds	r5, #1
 80053d4:	68e3      	ldr	r3, [r4, #12]
 80053d6:	9a03      	ldr	r2, [sp, #12]
 80053d8:	1a9b      	subs	r3, r3, r2
 80053da:	42ab      	cmp	r3, r5
 80053dc:	dcf2      	bgt.n	80053c4 <_printf_i+0x1e8>
 80053de:	e7eb      	b.n	80053b8 <_printf_i+0x1dc>
 80053e0:	2500      	movs	r5, #0
 80053e2:	f104 0919 	add.w	r9, r4, #25
 80053e6:	e7f5      	b.n	80053d4 <_printf_i+0x1f8>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1ac      	bne.n	8005346 <_printf_i+0x16a>
 80053ec:	7803      	ldrb	r3, [r0, #0]
 80053ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053f6:	e76c      	b.n	80052d2 <_printf_i+0xf6>
 80053f8:	08006441 	.word	0x08006441
 80053fc:	08006452 	.word	0x08006452

08005400 <_scanf_chars>:
 8005400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005404:	4615      	mov	r5, r2
 8005406:	688a      	ldr	r2, [r1, #8]
 8005408:	4680      	mov	r8, r0
 800540a:	460c      	mov	r4, r1
 800540c:	b932      	cbnz	r2, 800541c <_scanf_chars+0x1c>
 800540e:	698a      	ldr	r2, [r1, #24]
 8005410:	2a00      	cmp	r2, #0
 8005412:	bf14      	ite	ne
 8005414:	f04f 32ff 	movne.w	r2, #4294967295
 8005418:	2201      	moveq	r2, #1
 800541a:	608a      	str	r2, [r1, #8]
 800541c:	6822      	ldr	r2, [r4, #0]
 800541e:	06d1      	lsls	r1, r2, #27
 8005420:	bf5f      	itttt	pl
 8005422:	681a      	ldrpl	r2, [r3, #0]
 8005424:	1d11      	addpl	r1, r2, #4
 8005426:	6019      	strpl	r1, [r3, #0]
 8005428:	6817      	ldrpl	r7, [r2, #0]
 800542a:	2600      	movs	r6, #0
 800542c:	69a3      	ldr	r3, [r4, #24]
 800542e:	b1db      	cbz	r3, 8005468 <_scanf_chars+0x68>
 8005430:	2b01      	cmp	r3, #1
 8005432:	d107      	bne.n	8005444 <_scanf_chars+0x44>
 8005434:	682b      	ldr	r3, [r5, #0]
 8005436:	6962      	ldr	r2, [r4, #20]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	5cd3      	ldrb	r3, [r2, r3]
 800543c:	b9a3      	cbnz	r3, 8005468 <_scanf_chars+0x68>
 800543e:	2e00      	cmp	r6, #0
 8005440:	d132      	bne.n	80054a8 <_scanf_chars+0xa8>
 8005442:	e006      	b.n	8005452 <_scanf_chars+0x52>
 8005444:	2b02      	cmp	r3, #2
 8005446:	d007      	beq.n	8005458 <_scanf_chars+0x58>
 8005448:	2e00      	cmp	r6, #0
 800544a:	d12d      	bne.n	80054a8 <_scanf_chars+0xa8>
 800544c:	69a3      	ldr	r3, [r4, #24]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d12a      	bne.n	80054a8 <_scanf_chars+0xa8>
 8005452:	2001      	movs	r0, #1
 8005454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005458:	f000 fab4 	bl	80059c4 <__locale_ctype_ptr>
 800545c:	682b      	ldr	r3, [r5, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	4418      	add	r0, r3
 8005462:	7843      	ldrb	r3, [r0, #1]
 8005464:	071b      	lsls	r3, r3, #28
 8005466:	d4ef      	bmi.n	8005448 <_scanf_chars+0x48>
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	06da      	lsls	r2, r3, #27
 800546c:	bf5e      	ittt	pl
 800546e:	682b      	ldrpl	r3, [r5, #0]
 8005470:	781b      	ldrbpl	r3, [r3, #0]
 8005472:	703b      	strbpl	r3, [r7, #0]
 8005474:	682a      	ldr	r2, [r5, #0]
 8005476:	686b      	ldr	r3, [r5, #4]
 8005478:	f102 0201 	add.w	r2, r2, #1
 800547c:	602a      	str	r2, [r5, #0]
 800547e:	68a2      	ldr	r2, [r4, #8]
 8005480:	f103 33ff 	add.w	r3, r3, #4294967295
 8005484:	f102 32ff 	add.w	r2, r2, #4294967295
 8005488:	606b      	str	r3, [r5, #4]
 800548a:	f106 0601 	add.w	r6, r6, #1
 800548e:	bf58      	it	pl
 8005490:	3701      	addpl	r7, #1
 8005492:	60a2      	str	r2, [r4, #8]
 8005494:	b142      	cbz	r2, 80054a8 <_scanf_chars+0xa8>
 8005496:	2b00      	cmp	r3, #0
 8005498:	dcc8      	bgt.n	800542c <_scanf_chars+0x2c>
 800549a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800549e:	4629      	mov	r1, r5
 80054a0:	4640      	mov	r0, r8
 80054a2:	4798      	blx	r3
 80054a4:	2800      	cmp	r0, #0
 80054a6:	d0c1      	beq.n	800542c <_scanf_chars+0x2c>
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	f013 0310 	ands.w	r3, r3, #16
 80054ae:	d105      	bne.n	80054bc <_scanf_chars+0xbc>
 80054b0:	68e2      	ldr	r2, [r4, #12]
 80054b2:	3201      	adds	r2, #1
 80054b4:	60e2      	str	r2, [r4, #12]
 80054b6:	69a2      	ldr	r2, [r4, #24]
 80054b8:	b102      	cbz	r2, 80054bc <_scanf_chars+0xbc>
 80054ba:	703b      	strb	r3, [r7, #0]
 80054bc:	6923      	ldr	r3, [r4, #16]
 80054be:	441e      	add	r6, r3
 80054c0:	6126      	str	r6, [r4, #16]
 80054c2:	2000      	movs	r0, #0
 80054c4:	e7c6      	b.n	8005454 <_scanf_chars+0x54>
	...

080054c8 <_scanf_i>:
 80054c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054cc:	469a      	mov	sl, r3
 80054ce:	4b74      	ldr	r3, [pc, #464]	; (80056a0 <_scanf_i+0x1d8>)
 80054d0:	460c      	mov	r4, r1
 80054d2:	4683      	mov	fp, r0
 80054d4:	4616      	mov	r6, r2
 80054d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80054da:	b087      	sub	sp, #28
 80054dc:	ab03      	add	r3, sp, #12
 80054de:	68a7      	ldr	r7, [r4, #8]
 80054e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80054e4:	4b6f      	ldr	r3, [pc, #444]	; (80056a4 <_scanf_i+0x1dc>)
 80054e6:	69a1      	ldr	r1, [r4, #24]
 80054e8:	4a6f      	ldr	r2, [pc, #444]	; (80056a8 <_scanf_i+0x1e0>)
 80054ea:	2903      	cmp	r1, #3
 80054ec:	bf08      	it	eq
 80054ee:	461a      	moveq	r2, r3
 80054f0:	1e7b      	subs	r3, r7, #1
 80054f2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80054f6:	bf84      	itt	hi
 80054f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80054fc:	60a3      	strhi	r3, [r4, #8]
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	9200      	str	r2, [sp, #0]
 8005502:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005506:	bf88      	it	hi
 8005508:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800550c:	f104 091c 	add.w	r9, r4, #28
 8005510:	6023      	str	r3, [r4, #0]
 8005512:	bf8c      	ite	hi
 8005514:	197f      	addhi	r7, r7, r5
 8005516:	2700      	movls	r7, #0
 8005518:	464b      	mov	r3, r9
 800551a:	f04f 0800 	mov.w	r8, #0
 800551e:	9301      	str	r3, [sp, #4]
 8005520:	6831      	ldr	r1, [r6, #0]
 8005522:	ab03      	add	r3, sp, #12
 8005524:	2202      	movs	r2, #2
 8005526:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800552a:	7809      	ldrb	r1, [r1, #0]
 800552c:	f7fa fe58 	bl	80001e0 <memchr>
 8005530:	9b01      	ldr	r3, [sp, #4]
 8005532:	b330      	cbz	r0, 8005582 <_scanf_i+0xba>
 8005534:	f1b8 0f01 	cmp.w	r8, #1
 8005538:	d15a      	bne.n	80055f0 <_scanf_i+0x128>
 800553a:	6862      	ldr	r2, [r4, #4]
 800553c:	b92a      	cbnz	r2, 800554a <_scanf_i+0x82>
 800553e:	6822      	ldr	r2, [r4, #0]
 8005540:	2108      	movs	r1, #8
 8005542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005546:	6061      	str	r1, [r4, #4]
 8005548:	6022      	str	r2, [r4, #0]
 800554a:	6822      	ldr	r2, [r4, #0]
 800554c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005550:	6022      	str	r2, [r4, #0]
 8005552:	68a2      	ldr	r2, [r4, #8]
 8005554:	1e51      	subs	r1, r2, #1
 8005556:	60a1      	str	r1, [r4, #8]
 8005558:	b19a      	cbz	r2, 8005582 <_scanf_i+0xba>
 800555a:	6832      	ldr	r2, [r6, #0]
 800555c:	1c51      	adds	r1, r2, #1
 800555e:	6031      	str	r1, [r6, #0]
 8005560:	7812      	ldrb	r2, [r2, #0]
 8005562:	701a      	strb	r2, [r3, #0]
 8005564:	1c5d      	adds	r5, r3, #1
 8005566:	6873      	ldr	r3, [r6, #4]
 8005568:	3b01      	subs	r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	6073      	str	r3, [r6, #4]
 800556e:	dc07      	bgt.n	8005580 <_scanf_i+0xb8>
 8005570:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005574:	4631      	mov	r1, r6
 8005576:	4658      	mov	r0, fp
 8005578:	4798      	blx	r3
 800557a:	2800      	cmp	r0, #0
 800557c:	f040 8086 	bne.w	800568c <_scanf_i+0x1c4>
 8005580:	462b      	mov	r3, r5
 8005582:	f108 0801 	add.w	r8, r8, #1
 8005586:	f1b8 0f03 	cmp.w	r8, #3
 800558a:	d1c8      	bne.n	800551e <_scanf_i+0x56>
 800558c:	6862      	ldr	r2, [r4, #4]
 800558e:	b90a      	cbnz	r2, 8005594 <_scanf_i+0xcc>
 8005590:	220a      	movs	r2, #10
 8005592:	6062      	str	r2, [r4, #4]
 8005594:	6862      	ldr	r2, [r4, #4]
 8005596:	4945      	ldr	r1, [pc, #276]	; (80056ac <_scanf_i+0x1e4>)
 8005598:	6960      	ldr	r0, [r4, #20]
 800559a:	9301      	str	r3, [sp, #4]
 800559c:	1a89      	subs	r1, r1, r2
 800559e:	f000 f887 	bl	80056b0 <__sccl>
 80055a2:	9b01      	ldr	r3, [sp, #4]
 80055a4:	f04f 0800 	mov.w	r8, #0
 80055a8:	461d      	mov	r5, r3
 80055aa:	68a3      	ldr	r3, [r4, #8]
 80055ac:	6822      	ldr	r2, [r4, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d03a      	beq.n	8005628 <_scanf_i+0x160>
 80055b2:	6831      	ldr	r1, [r6, #0]
 80055b4:	6960      	ldr	r0, [r4, #20]
 80055b6:	f891 c000 	ldrb.w	ip, [r1]
 80055ba:	f810 000c 	ldrb.w	r0, [r0, ip]
 80055be:	2800      	cmp	r0, #0
 80055c0:	d032      	beq.n	8005628 <_scanf_i+0x160>
 80055c2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80055c6:	d121      	bne.n	800560c <_scanf_i+0x144>
 80055c8:	0510      	lsls	r0, r2, #20
 80055ca:	d51f      	bpl.n	800560c <_scanf_i+0x144>
 80055cc:	f108 0801 	add.w	r8, r8, #1
 80055d0:	b117      	cbz	r7, 80055d8 <_scanf_i+0x110>
 80055d2:	3301      	adds	r3, #1
 80055d4:	3f01      	subs	r7, #1
 80055d6:	60a3      	str	r3, [r4, #8]
 80055d8:	6873      	ldr	r3, [r6, #4]
 80055da:	3b01      	subs	r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	6073      	str	r3, [r6, #4]
 80055e0:	dd1b      	ble.n	800561a <_scanf_i+0x152>
 80055e2:	6833      	ldr	r3, [r6, #0]
 80055e4:	3301      	adds	r3, #1
 80055e6:	6033      	str	r3, [r6, #0]
 80055e8:	68a3      	ldr	r3, [r4, #8]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	60a3      	str	r3, [r4, #8]
 80055ee:	e7dc      	b.n	80055aa <_scanf_i+0xe2>
 80055f0:	f1b8 0f02 	cmp.w	r8, #2
 80055f4:	d1ad      	bne.n	8005552 <_scanf_i+0x8a>
 80055f6:	6822      	ldr	r2, [r4, #0]
 80055f8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80055fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005600:	d1bf      	bne.n	8005582 <_scanf_i+0xba>
 8005602:	2110      	movs	r1, #16
 8005604:	6061      	str	r1, [r4, #4]
 8005606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800560a:	e7a1      	b.n	8005550 <_scanf_i+0x88>
 800560c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005610:	6022      	str	r2, [r4, #0]
 8005612:	780b      	ldrb	r3, [r1, #0]
 8005614:	702b      	strb	r3, [r5, #0]
 8005616:	3501      	adds	r5, #1
 8005618:	e7de      	b.n	80055d8 <_scanf_i+0x110>
 800561a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800561e:	4631      	mov	r1, r6
 8005620:	4658      	mov	r0, fp
 8005622:	4798      	blx	r3
 8005624:	2800      	cmp	r0, #0
 8005626:	d0df      	beq.n	80055e8 <_scanf_i+0x120>
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	05d9      	lsls	r1, r3, #23
 800562c:	d50c      	bpl.n	8005648 <_scanf_i+0x180>
 800562e:	454d      	cmp	r5, r9
 8005630:	d908      	bls.n	8005644 <_scanf_i+0x17c>
 8005632:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005636:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800563a:	4632      	mov	r2, r6
 800563c:	4658      	mov	r0, fp
 800563e:	4798      	blx	r3
 8005640:	1e6f      	subs	r7, r5, #1
 8005642:	463d      	mov	r5, r7
 8005644:	454d      	cmp	r5, r9
 8005646:	d029      	beq.n	800569c <_scanf_i+0x1d4>
 8005648:	6822      	ldr	r2, [r4, #0]
 800564a:	f012 0210 	ands.w	r2, r2, #16
 800564e:	d113      	bne.n	8005678 <_scanf_i+0x1b0>
 8005650:	702a      	strb	r2, [r5, #0]
 8005652:	6863      	ldr	r3, [r4, #4]
 8005654:	9e00      	ldr	r6, [sp, #0]
 8005656:	4649      	mov	r1, r9
 8005658:	4658      	mov	r0, fp
 800565a:	47b0      	blx	r6
 800565c:	f8da 3000 	ldr.w	r3, [sl]
 8005660:	6821      	ldr	r1, [r4, #0]
 8005662:	1d1a      	adds	r2, r3, #4
 8005664:	f8ca 2000 	str.w	r2, [sl]
 8005668:	f011 0f20 	tst.w	r1, #32
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	d010      	beq.n	8005692 <_scanf_i+0x1ca>
 8005670:	6018      	str	r0, [r3, #0]
 8005672:	68e3      	ldr	r3, [r4, #12]
 8005674:	3301      	adds	r3, #1
 8005676:	60e3      	str	r3, [r4, #12]
 8005678:	eba5 0509 	sub.w	r5, r5, r9
 800567c:	44a8      	add	r8, r5
 800567e:	6925      	ldr	r5, [r4, #16]
 8005680:	4445      	add	r5, r8
 8005682:	6125      	str	r5, [r4, #16]
 8005684:	2000      	movs	r0, #0
 8005686:	b007      	add	sp, #28
 8005688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800568c:	f04f 0800 	mov.w	r8, #0
 8005690:	e7ca      	b.n	8005628 <_scanf_i+0x160>
 8005692:	07ca      	lsls	r2, r1, #31
 8005694:	bf4c      	ite	mi
 8005696:	8018      	strhmi	r0, [r3, #0]
 8005698:	6018      	strpl	r0, [r3, #0]
 800569a:	e7ea      	b.n	8005672 <_scanf_i+0x1aa>
 800569c:	2001      	movs	r0, #1
 800569e:	e7f2      	b.n	8005686 <_scanf_i+0x1be>
 80056a0:	08005bec 	.word	0x08005bec
 80056a4:	0800580d 	.word	0x0800580d
 80056a8:	08005925 	.word	0x08005925
 80056ac:	08006473 	.word	0x08006473

080056b0 <__sccl>:
 80056b0:	b570      	push	{r4, r5, r6, lr}
 80056b2:	780b      	ldrb	r3, [r1, #0]
 80056b4:	2b5e      	cmp	r3, #94	; 0x5e
 80056b6:	bf13      	iteet	ne
 80056b8:	1c4a      	addne	r2, r1, #1
 80056ba:	1c8a      	addeq	r2, r1, #2
 80056bc:	784b      	ldrbeq	r3, [r1, #1]
 80056be:	2100      	movne	r1, #0
 80056c0:	bf08      	it	eq
 80056c2:	2101      	moveq	r1, #1
 80056c4:	1e44      	subs	r4, r0, #1
 80056c6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80056ca:	f804 1f01 	strb.w	r1, [r4, #1]!
 80056ce:	42ac      	cmp	r4, r5
 80056d0:	d1fb      	bne.n	80056ca <__sccl+0x1a>
 80056d2:	b913      	cbnz	r3, 80056da <__sccl+0x2a>
 80056d4:	3a01      	subs	r2, #1
 80056d6:	4610      	mov	r0, r2
 80056d8:	bd70      	pop	{r4, r5, r6, pc}
 80056da:	f081 0401 	eor.w	r4, r1, #1
 80056de:	54c4      	strb	r4, [r0, r3]
 80056e0:	1c51      	adds	r1, r2, #1
 80056e2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80056e6:	2d2d      	cmp	r5, #45	; 0x2d
 80056e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80056ec:	460a      	mov	r2, r1
 80056ee:	d006      	beq.n	80056fe <__sccl+0x4e>
 80056f0:	2d5d      	cmp	r5, #93	; 0x5d
 80056f2:	d0f0      	beq.n	80056d6 <__sccl+0x26>
 80056f4:	b90d      	cbnz	r5, 80056fa <__sccl+0x4a>
 80056f6:	4632      	mov	r2, r6
 80056f8:	e7ed      	b.n	80056d6 <__sccl+0x26>
 80056fa:	462b      	mov	r3, r5
 80056fc:	e7ef      	b.n	80056de <__sccl+0x2e>
 80056fe:	780e      	ldrb	r6, [r1, #0]
 8005700:	2e5d      	cmp	r6, #93	; 0x5d
 8005702:	d0fa      	beq.n	80056fa <__sccl+0x4a>
 8005704:	42b3      	cmp	r3, r6
 8005706:	dcf8      	bgt.n	80056fa <__sccl+0x4a>
 8005708:	3301      	adds	r3, #1
 800570a:	429e      	cmp	r6, r3
 800570c:	54c4      	strb	r4, [r0, r3]
 800570e:	dcfb      	bgt.n	8005708 <__sccl+0x58>
 8005710:	3102      	adds	r1, #2
 8005712:	e7e6      	b.n	80056e2 <__sccl+0x32>

08005714 <_strtol_l.isra.0>:
 8005714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005718:	4680      	mov	r8, r0
 800571a:	4689      	mov	r9, r1
 800571c:	4692      	mov	sl, r2
 800571e:	461e      	mov	r6, r3
 8005720:	460f      	mov	r7, r1
 8005722:	463d      	mov	r5, r7
 8005724:	9808      	ldr	r0, [sp, #32]
 8005726:	f815 4b01 	ldrb.w	r4, [r5], #1
 800572a:	f000 f947 	bl	80059bc <__locale_ctype_ptr_l>
 800572e:	4420      	add	r0, r4
 8005730:	7843      	ldrb	r3, [r0, #1]
 8005732:	f013 0308 	ands.w	r3, r3, #8
 8005736:	d132      	bne.n	800579e <_strtol_l.isra.0+0x8a>
 8005738:	2c2d      	cmp	r4, #45	; 0x2d
 800573a:	d132      	bne.n	80057a2 <_strtol_l.isra.0+0x8e>
 800573c:	787c      	ldrb	r4, [r7, #1]
 800573e:	1cbd      	adds	r5, r7, #2
 8005740:	2201      	movs	r2, #1
 8005742:	2e00      	cmp	r6, #0
 8005744:	d05d      	beq.n	8005802 <_strtol_l.isra.0+0xee>
 8005746:	2e10      	cmp	r6, #16
 8005748:	d109      	bne.n	800575e <_strtol_l.isra.0+0x4a>
 800574a:	2c30      	cmp	r4, #48	; 0x30
 800574c:	d107      	bne.n	800575e <_strtol_l.isra.0+0x4a>
 800574e:	782b      	ldrb	r3, [r5, #0]
 8005750:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005754:	2b58      	cmp	r3, #88	; 0x58
 8005756:	d14f      	bne.n	80057f8 <_strtol_l.isra.0+0xe4>
 8005758:	786c      	ldrb	r4, [r5, #1]
 800575a:	2610      	movs	r6, #16
 800575c:	3502      	adds	r5, #2
 800575e:	2a00      	cmp	r2, #0
 8005760:	bf14      	ite	ne
 8005762:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005766:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800576a:	2700      	movs	r7, #0
 800576c:	fbb1 fcf6 	udiv	ip, r1, r6
 8005770:	4638      	mov	r0, r7
 8005772:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005776:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800577a:	2b09      	cmp	r3, #9
 800577c:	d817      	bhi.n	80057ae <_strtol_l.isra.0+0x9a>
 800577e:	461c      	mov	r4, r3
 8005780:	42a6      	cmp	r6, r4
 8005782:	dd23      	ble.n	80057cc <_strtol_l.isra.0+0xb8>
 8005784:	1c7b      	adds	r3, r7, #1
 8005786:	d007      	beq.n	8005798 <_strtol_l.isra.0+0x84>
 8005788:	4584      	cmp	ip, r0
 800578a:	d31c      	bcc.n	80057c6 <_strtol_l.isra.0+0xb2>
 800578c:	d101      	bne.n	8005792 <_strtol_l.isra.0+0x7e>
 800578e:	45a6      	cmp	lr, r4
 8005790:	db19      	blt.n	80057c6 <_strtol_l.isra.0+0xb2>
 8005792:	fb00 4006 	mla	r0, r0, r6, r4
 8005796:	2701      	movs	r7, #1
 8005798:	f815 4b01 	ldrb.w	r4, [r5], #1
 800579c:	e7eb      	b.n	8005776 <_strtol_l.isra.0+0x62>
 800579e:	462f      	mov	r7, r5
 80057a0:	e7bf      	b.n	8005722 <_strtol_l.isra.0+0xe>
 80057a2:	2c2b      	cmp	r4, #43	; 0x2b
 80057a4:	bf04      	itt	eq
 80057a6:	1cbd      	addeq	r5, r7, #2
 80057a8:	787c      	ldrbeq	r4, [r7, #1]
 80057aa:	461a      	mov	r2, r3
 80057ac:	e7c9      	b.n	8005742 <_strtol_l.isra.0+0x2e>
 80057ae:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80057b2:	2b19      	cmp	r3, #25
 80057b4:	d801      	bhi.n	80057ba <_strtol_l.isra.0+0xa6>
 80057b6:	3c37      	subs	r4, #55	; 0x37
 80057b8:	e7e2      	b.n	8005780 <_strtol_l.isra.0+0x6c>
 80057ba:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80057be:	2b19      	cmp	r3, #25
 80057c0:	d804      	bhi.n	80057cc <_strtol_l.isra.0+0xb8>
 80057c2:	3c57      	subs	r4, #87	; 0x57
 80057c4:	e7dc      	b.n	8005780 <_strtol_l.isra.0+0x6c>
 80057c6:	f04f 37ff 	mov.w	r7, #4294967295
 80057ca:	e7e5      	b.n	8005798 <_strtol_l.isra.0+0x84>
 80057cc:	1c7b      	adds	r3, r7, #1
 80057ce:	d108      	bne.n	80057e2 <_strtol_l.isra.0+0xce>
 80057d0:	2322      	movs	r3, #34	; 0x22
 80057d2:	f8c8 3000 	str.w	r3, [r8]
 80057d6:	4608      	mov	r0, r1
 80057d8:	f1ba 0f00 	cmp.w	sl, #0
 80057dc:	d107      	bne.n	80057ee <_strtol_l.isra.0+0xda>
 80057de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e2:	b102      	cbz	r2, 80057e6 <_strtol_l.isra.0+0xd2>
 80057e4:	4240      	negs	r0, r0
 80057e6:	f1ba 0f00 	cmp.w	sl, #0
 80057ea:	d0f8      	beq.n	80057de <_strtol_l.isra.0+0xca>
 80057ec:	b10f      	cbz	r7, 80057f2 <_strtol_l.isra.0+0xde>
 80057ee:	f105 39ff 	add.w	r9, r5, #4294967295
 80057f2:	f8ca 9000 	str.w	r9, [sl]
 80057f6:	e7f2      	b.n	80057de <_strtol_l.isra.0+0xca>
 80057f8:	2430      	movs	r4, #48	; 0x30
 80057fa:	2e00      	cmp	r6, #0
 80057fc:	d1af      	bne.n	800575e <_strtol_l.isra.0+0x4a>
 80057fe:	2608      	movs	r6, #8
 8005800:	e7ad      	b.n	800575e <_strtol_l.isra.0+0x4a>
 8005802:	2c30      	cmp	r4, #48	; 0x30
 8005804:	d0a3      	beq.n	800574e <_strtol_l.isra.0+0x3a>
 8005806:	260a      	movs	r6, #10
 8005808:	e7a9      	b.n	800575e <_strtol_l.isra.0+0x4a>
	...

0800580c <_strtol_r>:
 800580c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800580e:	4c06      	ldr	r4, [pc, #24]	; (8005828 <_strtol_r+0x1c>)
 8005810:	4d06      	ldr	r5, [pc, #24]	; (800582c <_strtol_r+0x20>)
 8005812:	6824      	ldr	r4, [r4, #0]
 8005814:	6a24      	ldr	r4, [r4, #32]
 8005816:	2c00      	cmp	r4, #0
 8005818:	bf08      	it	eq
 800581a:	462c      	moveq	r4, r5
 800581c:	9400      	str	r4, [sp, #0]
 800581e:	f7ff ff79 	bl	8005714 <_strtol_l.isra.0>
 8005822:	b003      	add	sp, #12
 8005824:	bd30      	pop	{r4, r5, pc}
 8005826:	bf00      	nop
 8005828:	20000014 	.word	0x20000014
 800582c:	20000078 	.word	0x20000078

08005830 <_strtoul_l.isra.0>:
 8005830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005834:	4680      	mov	r8, r0
 8005836:	4689      	mov	r9, r1
 8005838:	4692      	mov	sl, r2
 800583a:	461e      	mov	r6, r3
 800583c:	460f      	mov	r7, r1
 800583e:	463d      	mov	r5, r7
 8005840:	9808      	ldr	r0, [sp, #32]
 8005842:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005846:	f000 f8b9 	bl	80059bc <__locale_ctype_ptr_l>
 800584a:	4420      	add	r0, r4
 800584c:	7843      	ldrb	r3, [r0, #1]
 800584e:	f013 0308 	ands.w	r3, r3, #8
 8005852:	d130      	bne.n	80058b6 <_strtoul_l.isra.0+0x86>
 8005854:	2c2d      	cmp	r4, #45	; 0x2d
 8005856:	d130      	bne.n	80058ba <_strtoul_l.isra.0+0x8a>
 8005858:	787c      	ldrb	r4, [r7, #1]
 800585a:	1cbd      	adds	r5, r7, #2
 800585c:	2101      	movs	r1, #1
 800585e:	2e00      	cmp	r6, #0
 8005860:	d05c      	beq.n	800591c <_strtoul_l.isra.0+0xec>
 8005862:	2e10      	cmp	r6, #16
 8005864:	d109      	bne.n	800587a <_strtoul_l.isra.0+0x4a>
 8005866:	2c30      	cmp	r4, #48	; 0x30
 8005868:	d107      	bne.n	800587a <_strtoul_l.isra.0+0x4a>
 800586a:	782b      	ldrb	r3, [r5, #0]
 800586c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005870:	2b58      	cmp	r3, #88	; 0x58
 8005872:	d14e      	bne.n	8005912 <_strtoul_l.isra.0+0xe2>
 8005874:	786c      	ldrb	r4, [r5, #1]
 8005876:	2610      	movs	r6, #16
 8005878:	3502      	adds	r5, #2
 800587a:	f04f 32ff 	mov.w	r2, #4294967295
 800587e:	2300      	movs	r3, #0
 8005880:	fbb2 f2f6 	udiv	r2, r2, r6
 8005884:	fb06 fc02 	mul.w	ip, r6, r2
 8005888:	ea6f 0c0c 	mvn.w	ip, ip
 800588c:	4618      	mov	r0, r3
 800588e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005892:	2f09      	cmp	r7, #9
 8005894:	d817      	bhi.n	80058c6 <_strtoul_l.isra.0+0x96>
 8005896:	463c      	mov	r4, r7
 8005898:	42a6      	cmp	r6, r4
 800589a:	dd23      	ble.n	80058e4 <_strtoul_l.isra.0+0xb4>
 800589c:	2b00      	cmp	r3, #0
 800589e:	db1e      	blt.n	80058de <_strtoul_l.isra.0+0xae>
 80058a0:	4282      	cmp	r2, r0
 80058a2:	d31c      	bcc.n	80058de <_strtoul_l.isra.0+0xae>
 80058a4:	d101      	bne.n	80058aa <_strtoul_l.isra.0+0x7a>
 80058a6:	45a4      	cmp	ip, r4
 80058a8:	db19      	blt.n	80058de <_strtoul_l.isra.0+0xae>
 80058aa:	fb00 4006 	mla	r0, r0, r6, r4
 80058ae:	2301      	movs	r3, #1
 80058b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058b4:	e7eb      	b.n	800588e <_strtoul_l.isra.0+0x5e>
 80058b6:	462f      	mov	r7, r5
 80058b8:	e7c1      	b.n	800583e <_strtoul_l.isra.0+0xe>
 80058ba:	2c2b      	cmp	r4, #43	; 0x2b
 80058bc:	bf04      	itt	eq
 80058be:	1cbd      	addeq	r5, r7, #2
 80058c0:	787c      	ldrbeq	r4, [r7, #1]
 80058c2:	4619      	mov	r1, r3
 80058c4:	e7cb      	b.n	800585e <_strtoul_l.isra.0+0x2e>
 80058c6:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80058ca:	2f19      	cmp	r7, #25
 80058cc:	d801      	bhi.n	80058d2 <_strtoul_l.isra.0+0xa2>
 80058ce:	3c37      	subs	r4, #55	; 0x37
 80058d0:	e7e2      	b.n	8005898 <_strtoul_l.isra.0+0x68>
 80058d2:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80058d6:	2f19      	cmp	r7, #25
 80058d8:	d804      	bhi.n	80058e4 <_strtoul_l.isra.0+0xb4>
 80058da:	3c57      	subs	r4, #87	; 0x57
 80058dc:	e7dc      	b.n	8005898 <_strtoul_l.isra.0+0x68>
 80058de:	f04f 33ff 	mov.w	r3, #4294967295
 80058e2:	e7e5      	b.n	80058b0 <_strtoul_l.isra.0+0x80>
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	da09      	bge.n	80058fc <_strtoul_l.isra.0+0xcc>
 80058e8:	2322      	movs	r3, #34	; 0x22
 80058ea:	f8c8 3000 	str.w	r3, [r8]
 80058ee:	f04f 30ff 	mov.w	r0, #4294967295
 80058f2:	f1ba 0f00 	cmp.w	sl, #0
 80058f6:	d107      	bne.n	8005908 <_strtoul_l.isra.0+0xd8>
 80058f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058fc:	b101      	cbz	r1, 8005900 <_strtoul_l.isra.0+0xd0>
 80058fe:	4240      	negs	r0, r0
 8005900:	f1ba 0f00 	cmp.w	sl, #0
 8005904:	d0f8      	beq.n	80058f8 <_strtoul_l.isra.0+0xc8>
 8005906:	b10b      	cbz	r3, 800590c <_strtoul_l.isra.0+0xdc>
 8005908:	f105 39ff 	add.w	r9, r5, #4294967295
 800590c:	f8ca 9000 	str.w	r9, [sl]
 8005910:	e7f2      	b.n	80058f8 <_strtoul_l.isra.0+0xc8>
 8005912:	2430      	movs	r4, #48	; 0x30
 8005914:	2e00      	cmp	r6, #0
 8005916:	d1b0      	bne.n	800587a <_strtoul_l.isra.0+0x4a>
 8005918:	2608      	movs	r6, #8
 800591a:	e7ae      	b.n	800587a <_strtoul_l.isra.0+0x4a>
 800591c:	2c30      	cmp	r4, #48	; 0x30
 800591e:	d0a4      	beq.n	800586a <_strtoul_l.isra.0+0x3a>
 8005920:	260a      	movs	r6, #10
 8005922:	e7aa      	b.n	800587a <_strtoul_l.isra.0+0x4a>

08005924 <_strtoul_r>:
 8005924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005926:	4c06      	ldr	r4, [pc, #24]	; (8005940 <_strtoul_r+0x1c>)
 8005928:	4d06      	ldr	r5, [pc, #24]	; (8005944 <_strtoul_r+0x20>)
 800592a:	6824      	ldr	r4, [r4, #0]
 800592c:	6a24      	ldr	r4, [r4, #32]
 800592e:	2c00      	cmp	r4, #0
 8005930:	bf08      	it	eq
 8005932:	462c      	moveq	r4, r5
 8005934:	9400      	str	r4, [sp, #0]
 8005936:	f7ff ff7b 	bl	8005830 <_strtoul_l.isra.0>
 800593a:	b003      	add	sp, #12
 800593c:	bd30      	pop	{r4, r5, pc}
 800593e:	bf00      	nop
 8005940:	20000014 	.word	0x20000014
 8005944:	20000078 	.word	0x20000078

08005948 <__submore>:
 8005948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800594c:	460c      	mov	r4, r1
 800594e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005954:	4299      	cmp	r1, r3
 8005956:	d11d      	bne.n	8005994 <__submore+0x4c>
 8005958:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800595c:	f7fe fffa 	bl	8004954 <_malloc_r>
 8005960:	b918      	cbnz	r0, 800596a <__submore+0x22>
 8005962:	f04f 30ff 	mov.w	r0, #4294967295
 8005966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800596a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800596e:	63a3      	str	r3, [r4, #56]	; 0x38
 8005970:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005974:	6360      	str	r0, [r4, #52]	; 0x34
 8005976:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800597a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800597e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005982:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005986:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800598a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800598e:	6020      	str	r0, [r4, #0]
 8005990:	2000      	movs	r0, #0
 8005992:	e7e8      	b.n	8005966 <__submore+0x1e>
 8005994:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005996:	0077      	lsls	r7, r6, #1
 8005998:	463a      	mov	r2, r7
 800599a:	f000 f857 	bl	8005a4c <_realloc_r>
 800599e:	4605      	mov	r5, r0
 80059a0:	2800      	cmp	r0, #0
 80059a2:	d0de      	beq.n	8005962 <__submore+0x1a>
 80059a4:	eb00 0806 	add.w	r8, r0, r6
 80059a8:	4601      	mov	r1, r0
 80059aa:	4632      	mov	r2, r6
 80059ac:	4640      	mov	r0, r8
 80059ae:	f000 f829 	bl	8005a04 <memcpy>
 80059b2:	f8c4 8000 	str.w	r8, [r4]
 80059b6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80059ba:	e7e9      	b.n	8005990 <__submore+0x48>

080059bc <__locale_ctype_ptr_l>:
 80059bc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80059c0:	4770      	bx	lr
	...

080059c4 <__locale_ctype_ptr>:
 80059c4:	4b04      	ldr	r3, [pc, #16]	; (80059d8 <__locale_ctype_ptr+0x14>)
 80059c6:	4a05      	ldr	r2, [pc, #20]	; (80059dc <__locale_ctype_ptr+0x18>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	bf08      	it	eq
 80059d0:	4613      	moveq	r3, r2
 80059d2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80059d6:	4770      	bx	lr
 80059d8:	20000014 	.word	0x20000014
 80059dc:	20000078 	.word	0x20000078

080059e0 <__ascii_mbtowc>:
 80059e0:	b082      	sub	sp, #8
 80059e2:	b901      	cbnz	r1, 80059e6 <__ascii_mbtowc+0x6>
 80059e4:	a901      	add	r1, sp, #4
 80059e6:	b142      	cbz	r2, 80059fa <__ascii_mbtowc+0x1a>
 80059e8:	b14b      	cbz	r3, 80059fe <__ascii_mbtowc+0x1e>
 80059ea:	7813      	ldrb	r3, [r2, #0]
 80059ec:	600b      	str	r3, [r1, #0]
 80059ee:	7812      	ldrb	r2, [r2, #0]
 80059f0:	1c10      	adds	r0, r2, #0
 80059f2:	bf18      	it	ne
 80059f4:	2001      	movne	r0, #1
 80059f6:	b002      	add	sp, #8
 80059f8:	4770      	bx	lr
 80059fa:	4610      	mov	r0, r2
 80059fc:	e7fb      	b.n	80059f6 <__ascii_mbtowc+0x16>
 80059fe:	f06f 0001 	mvn.w	r0, #1
 8005a02:	e7f8      	b.n	80059f6 <__ascii_mbtowc+0x16>

08005a04 <memcpy>:
 8005a04:	b510      	push	{r4, lr}
 8005a06:	1e43      	subs	r3, r0, #1
 8005a08:	440a      	add	r2, r1
 8005a0a:	4291      	cmp	r1, r2
 8005a0c:	d100      	bne.n	8005a10 <memcpy+0xc>
 8005a0e:	bd10      	pop	{r4, pc}
 8005a10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a18:	e7f7      	b.n	8005a0a <memcpy+0x6>

08005a1a <memmove>:
 8005a1a:	4288      	cmp	r0, r1
 8005a1c:	b510      	push	{r4, lr}
 8005a1e:	eb01 0302 	add.w	r3, r1, r2
 8005a22:	d807      	bhi.n	8005a34 <memmove+0x1a>
 8005a24:	1e42      	subs	r2, r0, #1
 8005a26:	4299      	cmp	r1, r3
 8005a28:	d00a      	beq.n	8005a40 <memmove+0x26>
 8005a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a2e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005a32:	e7f8      	b.n	8005a26 <memmove+0xc>
 8005a34:	4283      	cmp	r3, r0
 8005a36:	d9f5      	bls.n	8005a24 <memmove+0xa>
 8005a38:	1881      	adds	r1, r0, r2
 8005a3a:	1ad2      	subs	r2, r2, r3
 8005a3c:	42d3      	cmn	r3, r2
 8005a3e:	d100      	bne.n	8005a42 <memmove+0x28>
 8005a40:	bd10      	pop	{r4, pc}
 8005a42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a46:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005a4a:	e7f7      	b.n	8005a3c <memmove+0x22>

08005a4c <_realloc_r>:
 8005a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4e:	4607      	mov	r7, r0
 8005a50:	4614      	mov	r4, r2
 8005a52:	460e      	mov	r6, r1
 8005a54:	b921      	cbnz	r1, 8005a60 <_realloc_r+0x14>
 8005a56:	4611      	mov	r1, r2
 8005a58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a5c:	f7fe bf7a 	b.w	8004954 <_malloc_r>
 8005a60:	b922      	cbnz	r2, 8005a6c <_realloc_r+0x20>
 8005a62:	f7fe ff29 	bl	80048b8 <_free_r>
 8005a66:	4625      	mov	r5, r4
 8005a68:	4628      	mov	r0, r5
 8005a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a6c:	f000 f821 	bl	8005ab2 <_malloc_usable_size_r>
 8005a70:	42a0      	cmp	r0, r4
 8005a72:	d20f      	bcs.n	8005a94 <_realloc_r+0x48>
 8005a74:	4621      	mov	r1, r4
 8005a76:	4638      	mov	r0, r7
 8005a78:	f7fe ff6c 	bl	8004954 <_malloc_r>
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d0f2      	beq.n	8005a68 <_realloc_r+0x1c>
 8005a82:	4631      	mov	r1, r6
 8005a84:	4622      	mov	r2, r4
 8005a86:	f7ff ffbd 	bl	8005a04 <memcpy>
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	4638      	mov	r0, r7
 8005a8e:	f7fe ff13 	bl	80048b8 <_free_r>
 8005a92:	e7e9      	b.n	8005a68 <_realloc_r+0x1c>
 8005a94:	4635      	mov	r5, r6
 8005a96:	e7e7      	b.n	8005a68 <_realloc_r+0x1c>

08005a98 <__ascii_wctomb>:
 8005a98:	b149      	cbz	r1, 8005aae <__ascii_wctomb+0x16>
 8005a9a:	2aff      	cmp	r2, #255	; 0xff
 8005a9c:	bf85      	ittet	hi
 8005a9e:	238a      	movhi	r3, #138	; 0x8a
 8005aa0:	6003      	strhi	r3, [r0, #0]
 8005aa2:	700a      	strbls	r2, [r1, #0]
 8005aa4:	f04f 30ff 	movhi.w	r0, #4294967295
 8005aa8:	bf98      	it	ls
 8005aaa:	2001      	movls	r0, #1
 8005aac:	4770      	bx	lr
 8005aae:	4608      	mov	r0, r1
 8005ab0:	4770      	bx	lr

08005ab2 <_malloc_usable_size_r>:
 8005ab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ab6:	1f18      	subs	r0, r3, #4
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	bfbc      	itt	lt
 8005abc:	580b      	ldrlt	r3, [r1, r0]
 8005abe:	18c0      	addlt	r0, r0, r3
 8005ac0:	4770      	bx	lr
	...

08005ac4 <_init>:
 8005ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac6:	bf00      	nop
 8005ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aca:	bc08      	pop	{r3}
 8005acc:	469e      	mov	lr, r3
 8005ace:	4770      	bx	lr

08005ad0 <_fini>:
 8005ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad2:	bf00      	nop
 8005ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad6:	bc08      	pop	{r3}
 8005ad8:	469e      	mov	lr, r3
 8005ada:	4770      	bx	lr
